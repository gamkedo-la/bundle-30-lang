var MEGASHEET_SCALE = 1/0.25;
// this function avoids any save/restore, doesn't support flipping, rotation, bypassing stats canvas
function drawFromSheetSimple(imgName, atX,atY,
                        desiredWidth,desiredHeight) // has to get stretched regardless, so keeping these optional ones
{
  var imgNum = sheetLookup[imgName];
  var imgData = spritesheetData[imgNum];

  var widthToDraw, heightToDraw;
  if(typeof desiredWidth !== 'undefined') { // custom size specified?
    widthToDraw = desiredWidth;
    heightToDraw = desiredHeight;
  } else {
    widthToDraw = imgData.w*MEGASHEET_SCALE;
    heightToDraw = imgData.h*MEGASHEET_SCALE;
  }

  gameCanvasContext.drawImage(megaSheet,imgData.x,imgData.y,
                              imgData.w,imgData.h,
                              atX,atY,
                              widthToDraw,heightToDraw);
}

function drawFromSheet(imgName, atX,atY,
                        desiredWidth,desiredHeight, // optional arguments (note: if either, expects both)
                        flipGraphic, // flip horizontal, note: desired w/h above needed to give this option
                        rotationAngle,pivotX,pivotY,//if defined, rotate from a pivot point
                        useStatsCanvas = false)
{
  var imgNum = sheetLookup[imgName];

  if (imgNum==undefined) {      
      return;
  }

  if(typeof flipGraphic === 'undefined') { // no optional params? then use simpler version
    drawFromSheetSimple(imgName, atX,atY,
                        desiredWidth,desiredHeight);
    return;
  }

  var imgData = spritesheetData[imgNum];

  var widthToDraw, heightToDraw;
  if(typeof desiredWidth !== 'undefined') { // custom size specified?
    widthToDraw = desiredWidth;
    heightToDraw = desiredHeight;
  } else {
    widthToDraw = spritesheetData[imgNum].w*MEGASHEET_SCALE;
    heightToDraw = spritesheetData[imgNum].h*MEGASHEET_SCALE;
  }

  //console.log('angle: ' + rotationAngle + " pivotX: " + pivotX + ' pivotY: ' + pivotY);
  if(typeof rotationAngle !== 'undefined' && typeof pivotX !== 'undefined' && typeof pivotY !== 'undefined')
  {
    //console.log('inside angle and pivot checks');
    gameCanvasContext.save();
    gameCanvasContext.translate(pivotX,pivotY);//place imaginary hand at pivot point
    gameCanvasContext.rotate(rotationAngle + Math.PI/2);//rotate with hand at pivot based in radians
    gameCanvasContext.translate(-pivotX,-pivotY);//move imaginary hand back to original spot
    gameCanvasContext.translate(atX,atY);
    gameCanvasContext.drawImage(megaSheet,spritesheetData[imgNum].x,spritesheetData[imgNum].y,
                                spritesheetData[imgNum].w,spritesheetData[imgNum].h,
                                0,0,
                                widthToDraw,heightToDraw);
    gameCanvasContext.restore();
  }
  else
  {
    if (useStatsCanvas === true)
    {
      statsCanvasContext.save();
      statsCanvasContext.translate(atX,atY);
      if(typeof flipGraphic !== 'undefined' && flipGraphic) {
        statsCanvasContext.scale(-1,1);
        statsCanvasContext.translate(-widthToDraw,0); // scoot to keep same coordinate
      }

      statsCanvasContext.drawImage(megaSheet,spritesheetData[imgNum].x,spritesheetData[imgNum].y,
                                  spritesheetData[imgNum].w,spritesheetData[imgNum].h,
                                  0,0,
                                  widthToDraw,heightToDraw);
      statsCanvasContext.restore();
    }
    else
    {
      gameCanvasContext.save();
      gameCanvasContext.translate(atX,atY);
      if(typeof flipGraphic !== 'undefined' && flipGraphic) {
        gameCanvasContext.scale(-1,1);
        gameCanvasContext.translate(-widthToDraw,0); // scoot to keep same coordinate
      }

      gameCanvasContext.drawImage(megaSheet,spritesheetData[imgNum].x,spritesheetData[imgNum].y,
                                  spritesheetData[imgNum].w,spritesheetData[imgNum].h,
                                  0,0,
                                  widthToDraw,heightToDraw);
      gameCanvasContext.restore();
    }
  }
}




function getRandomIntInclusive(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive
}

function getRandomIntWithExclusionaryRange(min,max, excludedMin,excludedMax) {
    var randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;
    return (randomNumber >= excludedMin && randomNumber <= excludedMax) ?
    getRandomIntWithExclusionaryRange(min,max, excludedMin,excludedMax) : randomNumber;
}

function getRandomElementFromArray(myArray){
  var randomIdx = getRandomIntInclusive(0, myArray.length - 1);
  return myArray[randomIdx];
}

function getRandomArbitrary(min, max) {
  return Math.random() * (max - min) + min;
}
function InputManager()
{
  this.gameCanvasClick = function(builtInDocumentEventObject)
  {

    if (helperPrompt.isOn)
    {
      helperPrompt.isOn = false;
      return;
    }

    switch(fullGameStateMachine.currentState)
    {
      case  fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.loading:
      //console.log('game is still loading, nothing should happen');
      return;
      break;

      case fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.clickToLaunch:
      loadingAndSplashScreen.handleClickAfterLoading();
      break;

      case fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.transitionToTitleScreen:
      return;
      break;

      case fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.titleScreen:
      titleScreen.handleGameCellClicks(builtInDocumentEventObject);
      break;

      case fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.modeSelectScreen:
      modeSelectScreen.handleNextButtonClick();
      modeSelectScreen.handleRadioButtonClicks();
      break;

      case fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.languageSelectionScreen:
      languageSelectionScreen.handlePlayButtonClick();
      languageSelectionScreen.handleLanguageCellClicks();
      break;

      case fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.mandarinCustomizationScreen:
      mandarinCustomizationScreen.handleClicks();
      break;

      case fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.englishCustomizationScreen:
      englishCustomizationScreen.handleClicks();
      break;

      case fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame:
      if (gameClassManager.currentGame.handleClick !== undefined)
      {
        gameClassManager.currentGame.handleClick();
      }
      backButton.handleClick();//backButton.js, player goes back to menu/title screen
      replayPromptButton.handleClick();
      break;
    }
  }//

  this.mouseCoordinates = {x:undefined,y:undefined};

  this.calculateMousePosition = function(builtInDocumentEventObject)
  {
    var rect = gameCanvas.getBoundingClientRect();
    var root = document.documentElement;
    var x = builtInDocumentEventObject.clientX - rect.left - root.scrollLeft;
    var y = builtInDocumentEventObject.clientY - rect.top - root.scrollTop;
    inputManager.mouseCoordinates.x = x;
    inputManager.mouseCoordinates.y = y;
  }

  this.leftArrowIsBeingHeld = false;
  this.rightArrowIsBeingHeld = false;
  this.downArrowIsBeingHeld = false;
  this.upArrowIsBeingHeld = false;
  this.spaceBarIsBeingHeld = false;

  this.keyDown = function(builtInDocumentEventObject)
  {
      builtInDocumentEventObject.preventDefault();
      switch(builtInDocumentEventObject.keyCode)
      {
        case 37://left arrow
        this.leftArrowIsBeingHeld = true;
        //console.log('this.leftArrowIsBeingHeld: ' + this.leftArrowIsBeingHeld);
        switch(fullGameStateMachine.currentState)
        {
          case fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame:
          if (gameClassManager.currentGame.handleLeftArrowDown)
          {
            gameClassManager.currentGame.handleLeftArrowDown();
          }
          else
          {
            return;
          }
        }
        break;

        case 38://up arrow
        this.upArrowIsBeingHeld = true;
        switch(fullGameStateMachine.currentState)
        {
          case fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame:
          if (gameClassManager.currentGame.handleUpArrowDown)
          {
            gameClassManager.currentGame.handleUpArrowDown();
          }
        }
        break;

        case 39://right arrow
        this.rightArrowIsBeingHeld = true;
        switch(fullGameStateMachine.currentState)
        {
          case fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame:
          if (gameClassManager.currentGame.handleRightArrowDown)
          {
            gameClassManager.currentGame.handleRightArrowDown();
          }
        }
        break;

        case 40://down arrow
        this.downArrowIsBeingHeld = true;
        switch(fullGameStateMachine.currentState)
        {
          case fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame:
          if (gameClassManager.currentGame.handleDownArrowDown)
          {
            gameClassManager.currentGame.handleDownArrowDown();
          }
        }
        break;


  	  case 32://spacebar
		this.spaceBarIsBeingHeld = true;
		switch(fullGameStateMachine.currentState)
		{
          case fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame:
          if (gameClassManager.currentGame.handleSpaceBarDown)
          {
			      gameClassManager.currentGame.handleSpaceBarDown();
          }
		}
		break;

      case 68://d
      if (debugOn === true)
      {
        debugOn = false;

      } else if (debugOn === false)
      {
        
        debugOn = true;
      }
      break;

      case 107://number pad +
      turnMasterVolumeUp();
      break;

      case 109://number pad -
      turnMasterVolumeDown();
      break;

      case 80://p
      if (fullGameStateMachine.currentState === fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.pausedMiniGame)
      {
        fullGameStateMachine.currentState = fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame;
      }
      else if (fullGameStateMachine.currentState === fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame)
      {
        fullGameStateMachine.currentState = fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.pausedMiniGame;
      }
      break;

      case 77://m
      if (volume.music > 0)
      {
        volume.music = 0;
      } else {
        volume.music = 0.75;
      }
      break;

      case 82://r reset prompts and answers
      promptsAndAnswersManager.setOrResetPromptsAndAnswers();
      break;
    }
  }

  this.keyUp = function(builtInDocumentEventObject)
  {
    switch(builtInDocumentEventObject.keyCode)
    {
      case 37://left arrow
      this.leftArrowIsBeingHeld = false;
      //console.log('this.leftArrowIsBeingHeld: ' + this.leftArrowIsBeingHeld);
      switch(fullGameStateMachine.currentState)
      {
        case fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame:
        if (gameClassManager.currentGame.handleLeftArrowUp)
        {
          gameClassManager.currentGame.handleLeftArrowUp();
        }
        else
        {
          return;
        }
      }
      break;

      case 38://up arrow
      this.upArrowIsBeingHeld = false;
      switch(fullGameStateMachine.currentState)
      {
        case fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame:
        if (gameClassManager.currentGame.handleUpArrowUp)
        {
          gameClassManager.currentGame.handleUpArrowUp();
        }
        else
        {
          return;
        }
      }
      break;

      case 39://right arrow
      this.rightArrowIsBeingHeld = false;
      switch(fullGameStateMachine.currentState)
      {
        case fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame:
        if (gameClassManager.currentGame.handleRightArrowUp)
        {
          gameClassManager.currentGame.handleRightArrowUp();
        }
        else
        {
          return;
        }
      }
      break;

      case 40://down arrow
      this.downArrowIsBeingHeld = false;
      switch(fullGameStateMachine.currentState)
      {
        case fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame:
        if (gameClassManager.currentGame.handleDownArrowUp)
        {
          gameClassManager.currentGame.handleDownArrowUp();
        }
        else
        {
          return;
        }
      }
      break;

      case 32://spacebar
      this.spaceBarIsBeingHeld = false;
      switch(fullGameStateMachine.currentState)
      {
        case fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame:
        if (gameClassManager.currentGame.handleSpaceBarUp)
        {
          gameClassManager.currentGame.handleSpaceBarUp();
        }
        else
        {
          return;
        }
      }
      break;
    }
  }
}

let inputManager = new InputManager();

var playerShouldBePlayingFinder = false;
var playerShouldBePlayingCatcher = false;
function DateAndTime()
{
  const JANUARY = 0;
  const FEBRUARY = 1;
  const MARCH = 2;
  const APRIL = 3;
  const MAY = 4;
  const JUNE = 5;
  const JULY = 6;
  const AUGUST = 7;
  const SEPTEMBER = 8;
  const OCTOBER = 9;
  const NOVEMBER = 10;
  const DECEMBER = 11;

  this.builtInJavascriptDateObject = undefined;
  this.setOrResetParentDateObject = function()
  {
    this.builtInJavascriptDateObject = new Date();
  }

  this.todaysDay = undefined;
  this.assignTodaysDay = function()
  {
    this.todaysDay = this.builtInJavascriptDateObject.getDate();
  }

  this.year = undefined;
  this.assignYear = function()
  {
    this.year = this.builtInJavascriptDateObject.getYear();
  }

  this.isALeapYear = undefined;
  this.determineIfLeapYear = function()
  {
    if (this.year % 4 === 0 && this.year % 100 === 0 && this.year % 400 === 0)
    {
      this.isALeapYear = true;
    }
    else {
      this.isALeapYear = false;
    }
  }

  this.currentMonth = undefined;
  this.assignCurrentMonth = function()
  {
    this.currentMonth = this.builtInJavascriptDateObject.getMonth();
  }

  this.tomorrowsDay = undefined;
  this.nextMonth = undefined;
  this.tomorrowShouldDisplayThisMonth = true;
  this.calculateTomorrowsDay = function()
  {
    this.tomorrowsDay = this.todaysDay + 1;

    if (this.currentMonth === (JANUARY || MARCH || MAY || JULY || AUGUST || OCTOBER || DECEMBER) &&
        this.tomorrowsDay > 31)
        {
          this.nextMonth = this.currentMonth + 1;
          this.tomorrowsDay = 1;
          this.tomorrowShouldDisplayThisMonth = false;
          if (this.nextMonth > DECEMBER)
          {
            this.nextMonth = JANUARY;
          }
        }
    else if (this.currentMonth === (SEPTEMBER || APRIL || JUNE || NOVEMBER) && this.tomorrowsDay > 30)
    {
      this.nextMonth = this.currentMonth + 1;
      this.tomorrowsDay = 1;
      this.tomorrowShouldDisplayThisMonth = false;
    }
    else if (this.currentMonth === (FEBRUARY) && !this.isALeapYear && this.tomorrowsDay > 28)
    {
      this.nextMonth = this.currentMonth + 1;
      this.tomorrowsDay = 1;
      this.tomorrowShouldDisplayThisMonth = false;
    }
    else if (this.currentMonth === FEBRUARY && this.isALeapYear && this.tomorrowsDay > 29)
    {
      this.nextMonth = this.currentMonth + 1;
      this.tomorrowsDay = 1;
      this.tomorrowShouldDisplayThisMonth = false;
    } else {
      this.tomorrowShouldDisplayThisMonth = true;
    }
  }

  this.yesterdaysDay = undefined;
  this.lastMonth = undefined;
  this.yesterdayShouldDisplayCurrentMonth = true;
  this.calculateYesterdaysDay = function()
  {
    this.yesterdaysDay = this.todaysDay - 1;

    if (this.yesterdaysDay < 1)
    {
      this.lastMonth = this.currentMonth - 1;
      this.yesterdayShouldDisplayCurrentMonth = false;
      if (this.lastMonth === (JANUARY || MARCH || MAY || JULY || AUGUST || OCTOBER || DECEMBER) )
      {
        this.yesterdaysDay = 31;
      }
      else if (this.lastMonth === (SEPTEMBER || APRIL || JUNE || NOVEMBER) )
      {
        this.yesterdaysDay = 30;
      }
      else if (this.lastMonth === FEBRUARY)
        if (this.isALeapYear)
        {
          this.yesterdaysDay = 29;
        }
        else
        {
          this.yesterdaysDay = 28;
        }
    } else {
      this.yesterdayShouldDisplayCurrentMonth = true;
    }
  }

  this.todaysDate =
  {
    day: undefined,
    month: undefined
  }

  this.determineTodaysDateDay = function()
  {
    this.todaysDate.day = this.todaysDay;
  }

  this.determineTodaysDateMonth = function()
  {
    this.todaysDate.month = this.currentMonth;
  }

  this.tomorrowsDate =
  {
    day: undefined,
    month: undefined
  }

  this.determineTomorrowsDateDay = function()
  {
    this.tomorrowsDate.day = this.tomorrowsDay;
  }

  this.determineTomorrowsMonth = function()
  {
    if (this.tomorrowShouldDisplayThisMonth)
    {
      this.tomorrowsDate.month = this.currentMonth;
    }
    else {
      this.tomorrowsDate.month = this.nextMonth;
    }
  }

  this.yesterdaysDate =
  {
    day: undefined,
    month: undefined,


  }

  this.determineYesterdaysDateDay = function()
  {
    this.yesterdaysDate.day = this.yesterdaysDay;
  }

  this.determineYesterdaysMonth = function()
  {
    if (this.yesterdayShouldDisplayCurrentMonth)
    {
      this.yesterdaysDate.month = this.currentMonth;
    }
    else {
      this.yesterdaysDate.month = this.lastMonth;
    }
  }

  this.initialize = function()
  {
    this.setOrResetParentDateObject();
    this.assignTodaysDay();
    this.assignYear();
    this.assignCurrentMonth();
    this.determineIfLeapYear();
    this.determineTodaysDateDay();
    this.determineTodaysDateMonth();
    this.calculateYesterdaysDay();
    this.calculateTomorrowsDay();
    this.determineYesterdaysDateDay();
    this.determineTomorrowsDateDay();
    this.calculateTomorrowsDay();
    this.calculateYesterdaysDay();
    this.determineYesterdaysMonth();
    this.determineTomorrowsMonth();
  }

  this.dateToDraw = undefined;
  this.shouldDrawADate = false;
  this.checkForNecessityOfUsingDatesForImagePrompter = function()
  {
    if ( promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.name !== 'mandarin today' &&
         promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.name !== 'mandarin tomorrow' &&
         promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.name !== 'mandarin yesterday')
        {
          this.shouldDrawADate = false;
        }
        else
        {

          let dateToDraw = undefined;
          if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.name === 'mandarin today')
          {
            dateToDraw = this.todaysDate;
          } else if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.name === 'mandarin tomorrow')
          {
            dateToDraw = this.tomorrowsDate;
          } else if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.name === 'mandarin yesterday')
          {
            dateToDraw = this.yesterdaysDate;
          }

          this.dateToDraw = dateToDraw;
          this.shouldDrawADate = true;
        }
  }

  this.shouldDrawADateOnAnswers = false;
  this.checkForNecessityOfUsingDatesForDrawAnswersManager = function()
  {

    if ( (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.name === 'mandarin today' ||
        promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.name === 'mandarin tomorrow' ||
        promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.name === 'mandarin yesterday')
        &&
        promptsAndAnswersManager.currentAnswerDataType === "IMG" )
        {
          this.shouldDrawADateOnAnswers = true;
          promptersManager.loadCurrentPrompter(imagePrompter);
        }
        else {
          this.shouldDrawADateOnAnswers = false;
        }
  }
}

let dateAndTime = new DateAndTime();
dateAndTime.initialize();
var spritesheetData =
[{"fileName":"images\\check.png","fileIdx":0,"x":1,"y":1,"w":25,"h":25},{"fileName":"images\\checkBox.png","fileIdx":1,"x":28,"y":1,"w":25,"h":25},{"fileName":"images\\checkForCheckBox.png","fileIdx":2,"x":55,"y":1,"w":25,"h":25},{"fileName":"images\\placeholderPlayButtonImage.png","fileIdx":3,"x":82,"y":1,"w":250,"h":187},{"fileName":"images\\Backgrounds\\airBooth.png","fileIdx":4,"x":334,"y":1,"w":132,"h":237},{"fileName":"images\\Backgrounds\\airBoothPlasticLayer.png","fileIdx":5,"x":468,"y":1,"w":132,"h":237},{"fileName":"images\\Backgrounds\\airBoothTopLayer.png","fileIdx":6,"x":602,"y":1,"w":132,"h":237},{"fileName":"images\\Backgrounds\\balloonBackground.png","fileIdx":7,"x":736,"y":1,"w":250,"h":187},{"fileName":"images\\Backgrounds\\Barn.png","fileIdx":8,"x":988,"y":1,"w":250,"h":187},{"fileName":"images\\Backgrounds\\bottomWall.png","fileIdx":9,"x":1240,"y":1,"w":192,"h":29},{"fileName":"images\\Backgrounds\\car.png","fileIdx":10,"x":1434,"y":1,"w":21,"h":48},{"fileName":"images\\Backgrounds\\Cliff.png","fileIdx":11,"x":1457,"y":1,"w":250,"h":187},{"fileName":"images\\Backgrounds\\cloud1.png","fileIdx":12,"x":1709,"y":1,"w":99,"h":40},{"fileName":"images\\Backgrounds\\cloud2.png","fileIdx":13,"x":1810,"y":1,"w":81,"h":57},{"fileName":"images\\Backgrounds\\cloud3.png","fileIdx":14,"x":1893,"y":1,"w":52,"h":47},{"fileName":"images\\Backgrounds\\cloud4.png","fileIdx":15,"x":1947,"y":1,"w":91,"h":92},{"fileName":"images\\Backgrounds\\clouds.png","fileIdx":16,"x":2040,"y":1,"w":160,"h":175},{"fileName":"images\\Backgrounds\\daytimeBackground.png","fileIdx":17,"x":2202,"y":1,"w":250,"h":187},{"fileName":"images\\Backgrounds\\dodgeball.png","fileIdx":18,"x":2454,"y":1,"w":250,"h":187},{"fileName":"images\\Backgrounds\\editedJumperBackground.png","fileIdx":19,"x":2706,"y":1,"w":160,"h":175},{"fileName":"images\\Backgrounds\\feed.png","fileIdx":20,"x":2868,"y":1,"w":250,"h":187},{"fileName":"images\\Backgrounds\\FinderBG.png","fileIdx":21,"x":3120,"y":1,"w":160,"h":175},{"fileName":"images\\Backgrounds\\Flower.png","fileIdx":22,"x":3282,"y":1,"w":250,"h":187},{"fileName":"images\\Backgrounds\\Flower2.png","fileIdx":23,"x":3534,"y":1,"w":250,"h":187},{"fileName":"images\\Backgrounds\\flyingBee.png","fileIdx":24,"x":3786,"y":1,"w":250,"h":187},{"fileName":"images\\Backgrounds\\Grass.png","fileIdx":25,"x":4038,"y":1,"w":250,"h":187},{"fileName":"images\\Backgrounds\\Lake.png","fileIdx":26,"x":4290,"y":1,"w":215,"h":115},{"fileName":"images\\Backgrounds\\LaneGrass1.png","fileIdx":27,"x":4507,"y":1,"w":250,"h":187},{"fileName":"images\\Backgrounds\\LaneGrass2.png","fileIdx":28,"x":1,"y":240,"w":250,"h":187},{"fileName":"images\\Backgrounds\\leftWall.png","fileIdx":29,"x":253,"y":240,"w":28,"h":158},{"fileName":"images\\Backgrounds\\Lily.png","fileIdx":30,"x":283,"y":240,"w":215,"h":115},{"fileName":"images\\Backgrounds\\mazefloor.png","fileIdx":31,"x":500,"y":240,"w":160,"h":175},{"fileName":"images\\Backgrounds\\menu_border.png","fileIdx":32,"x":662,"y":240,"w":160,"h":175},{"fileName":"images\\Backgrounds\\nighttimeBackground.png","fileIdx":33,"x":824,"y":240,"w":250,"h":187},{"fileName":"images\\Backgrounds\\Penalty.png","fileIdx":34,"x":1076,"y":240,"w":250,"h":187},{"fileName":"images\\Backgrounds\\rightWall.png","fileIdx":35,"x":1328,"y":240,"w":29,"h":158},{"fileName":"images\\Backgrounds\\river.png","fileIdx":36,"x":1359,"y":240,"w":250,"h":132},{"fileName":"images\\Backgrounds\\road.png","fileIdx":37,"x":1611,"y":240,"w":88,"h":187},{"fileName":"images\\Backgrounds\\road1.png","fileIdx":38,"x":1701,"y":240,"w":88,"h":187},{"fileName":"images\\Backgrounds\\road2.png","fileIdx":39,"x":1791,"y":240,"w":88,"h":187},{"fileName":"images\\Backgrounds\\roadDash.png","fileIdx":40,"x":1881,"y":240,"w":3,"h":11},{"fileName":"images\\Backgrounds\\roadDash2.png","fileIdx":41,"x":1886,"y":240,"w":3,"h":11},{"fileName":"images\\Backgrounds\\roadDash3.png","fileIdx":42,"x":1891,"y":240,"w":3,"h":11},{"fileName":"images\\Backgrounds\\runnerCloud1.png","fileIdx":43,"x":1896,"y":240,"w":250,"h":187},{"fileName":"images\\Backgrounds\\runnerGrass.png","fileIdx":44,"x":2148,"y":240,"w":250,"h":187},{"fileName":"images\\Backgrounds\\runnerMountain1.png","fileIdx":45,"x":2400,"y":240,"w":250,"h":187},{"fileName":"images\\Backgrounds\\runnerSunAndSky.png","fileIdx":46,"x":2652,"y":240,"w":250,"h":187},{"fileName":"images\\Backgrounds\\scoreboard_overlay.png","fileIdx":47,"x":2904,"y":240,"w":160,"h":175},{"fileName":"images\\Backgrounds\\ShootGallery.png","fileIdx":48,"x":3066,"y":240,"w":149,"h":111},{"fileName":"images\\Backgrounds\\Sky.png","fileIdx":49,"x":3217,"y":240,"w":250,"h":187},{"fileName":"images\\Backgrounds\\Space.png","fileIdx":50,"x":3469,"y":240,"w":250,"h":187},{"fileName":"images\\Backgrounds\\Space2.png","fileIdx":51,"x":3721,"y":240,"w":250,"h":187},{"fileName":"images\\Backgrounds\\spaceBackgroundForVolcanoGame.png","fileIdx":52,"x":3973,"y":240,"w":250,"h":187},{"fileName":"images\\Backgrounds\\SpaceWithJupiter1.png","fileIdx":53,"x":4225,"y":240,"w":250,"h":187},{"fileName":"images\\Backgrounds\\SpaceWithJupiter2.png","fileIdx":54,"x":4477,"y":240,"w":250,"h":187},{"fileName":"images\\Backgrounds\\spellingBee.png","fileIdx":55,"x":4729,"y":240,"w":160,"h":175},{"fileName":"images\\Backgrounds\\target.png","fileIdx":56,"x":4891,"y":240,"w":27,"h":24},{"fileName":"images\\Backgrounds\\tiled1.png","fileIdx":57,"x":4920,"y":240,"w":36,"h":12},{"fileName":"images\\Backgrounds\\topWall.png","fileIdx":58,"x":1,"y":429,"w":250,"h":29},{"fileName":"images\\Backgrounds\\underwater.png","fileIdx":59,"x":253,"y":429,"w":250,"h":81},{"fileName":"images\\Backgrounds\\underwater2.png","fileIdx":60,"x":505,"y":429,"w":250,"h":81},{"fileName":"images\\Backgrounds\\vacuumBackground.png","fileIdx":61,"x":757,"y":429,"w":250,"h":187},{"fileName":"images\\Backgrounds\\Volcano.png","fileIdx":62,"x":1009,"y":429,"w":160,"h":175},{"fileName":"images\\Backgrounds\\Wack.png","fileIdx":63,"x":1171,"y":429,"w":160,"h":175},{"fileName":"images\\Backgrounds\\WackTableBeneathSurface.png","fileIdx":64,"x":1333,"y":429,"w":160,"h":175},{"fileName":"images\\Backgrounds\\WackTableSurface.png","fileIdx":65,"x":1495,"y":429,"w":160,"h":175},{"fileName":"images\\Backgrounds\\wave.png","fileIdx":66,"x":1657,"y":429,"w":250,"h":19},{"fileName":"images\\Backgrounds\\whackALetterTile.png","fileIdx":67,"x":1909,"y":429,"w":250,"h":187},{"fileName":"images\\Custom Font\\original pdns\\symbols\\symbol!.png","fileIdx":68,"x":2161,"y":429,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\biga.png","fileIdx":69,"x":2413,"y":429,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigb.png","fileIdx":70,"x":2665,"y":429,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigc.png","fileIdx":71,"x":2917,"y":429,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigd.png","fileIdx":72,"x":3169,"y":429,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bige.png","fileIdx":73,"x":3421,"y":429,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigf.png","fileIdx":74,"x":3673,"y":429,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigg.png","fileIdx":75,"x":3925,"y":429,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigh.png","fileIdx":76,"x":4177,"y":429,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigi.png","fileIdx":77,"x":4429,"y":429,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigj.png","fileIdx":78,"x":4681,"y":429,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigk.png","fileIdx":79,"x":1,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigl.png","fileIdx":80,"x":253,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigm.png","fileIdx":81,"x":505,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bign.png","fileIdx":82,"x":757,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigo.png","fileIdx":83,"x":1009,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigp.png","fileIdx":84,"x":1261,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigq.png","fileIdx":85,"x":1513,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigr.png","fileIdx":86,"x":1765,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigs.png","fileIdx":87,"x":2017,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigt.png","fileIdx":88,"x":2269,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigu.png","fileIdx":89,"x":2521,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigv.png","fileIdx":90,"x":2773,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigw.png","fileIdx":91,"x":3025,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigx.png","fileIdx":92,"x":3277,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigy.png","fileIdx":93,"x":3529,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\big letters\\bigz.png","fileIdx":94,"x":3781,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\numbers\\0.png","fileIdx":95,"x":4033,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\numbers\\1.png","fileIdx":96,"x":4285,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\numbers\\2.png","fileIdx":97,"x":4537,"y":618,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\numbers\\3.png","fileIdx":98,"x":1,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\numbers\\4.png","fileIdx":99,"x":253,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\numbers\\5.png","fileIdx":100,"x":505,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\numbers\\6.png","fileIdx":101,"x":757,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\numbers\\7.png","fileIdx":102,"x":1009,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\numbers\\8.png","fileIdx":103,"x":1261,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\numbers\\9.png","fileIdx":104,"x":1513,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smalla.png","fileIdx":105,"x":1765,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smallb.png","fileIdx":106,"x":2017,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smallc.png","fileIdx":107,"x":2269,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smalld.png","fileIdx":108,"x":2521,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smalle.png","fileIdx":109,"x":2773,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smallf.png","fileIdx":110,"x":3025,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smallg.png","fileIdx":111,"x":3277,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smallh.png","fileIdx":112,"x":3529,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smalli.png","fileIdx":113,"x":3781,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smallj.png","fileIdx":114,"x":4033,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smallk.png","fileIdx":115,"x":4285,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smalll.png","fileIdx":116,"x":4537,"y":807,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smallm.png","fileIdx":117,"x":1,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smalln.png","fileIdx":118,"x":253,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smallo.png","fileIdx":119,"x":505,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smallp.png","fileIdx":120,"x":757,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smallq.png","fileIdx":121,"x":1009,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smallr.png","fileIdx":122,"x":1261,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smalls.png","fileIdx":123,"x":1513,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smallt.png","fileIdx":124,"x":1765,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smallu.png","fileIdx":125,"x":2017,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smallv.png","fileIdx":126,"x":2269,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smallw.png","fileIdx":127,"x":2521,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smallx.png","fileIdx":128,"x":2773,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smally.png","fileIdx":129,"x":3025,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\small letters\\smallz.png","fileIdx":130,"x":3277,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\symbols\\downArrow.png","fileIdx":131,"x":3529,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\symbols\\leftArrow.png","fileIdx":132,"x":3781,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\symbols\\rightArrow.png","fileIdx":133,"x":4033,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\symbols\\symbol!.png","fileIdx":134,"x":4285,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\symbols\\symbol$.png","fileIdx":135,"x":4537,"y":996,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\symbols\\symbol,.png","fileIdx":136,"x":1,"y":1185,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\symbols\\symbol..png","fileIdx":137,"x":253,"y":1185,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\symbols\\symbol=.png","fileIdx":138,"x":505,"y":1185,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\symbols\\symbol@.png","fileIdx":139,"x":757,"y":1185,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\symbols\\symbolHash.png","fileIdx":140,"x":1009,"y":1185,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\symbols\\symbolQuestionMark.png","fileIdx":141,"x":1261,"y":1185,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\symbols\\symbol~.png","fileIdx":142,"x":1513,"y":1185,"w":250,"h":187},{"fileName":"images\\Custom Font\\pngs\\symbols\\upArrow.png","fileIdx":143,"x":1765,"y":1185,"w":250,"h":187},{"fileName":"images\\sprites\\air grab\\AirGuy.png","fileIdx":144,"x":2017,"y":1185,"w":48,"h":144},{"fileName":"images\\sprites\\air grab\\Bill.png","fileIdx":145,"x":2067,"y":1185,"w":51,"h":20},{"fileName":"images\\sprites\\air grab\\Bill2.png","fileIdx":146,"x":2120,"y":1185,"w":51,"h":19},{"fileName":"images\\sprites\\air grab\\Bill3.png","fileIdx":147,"x":2173,"y":1185,"w":52,"h":18},{"fileName":"images\\sprites\\air grab\\Bill4.png","fileIdx":148,"x":2227,"y":1185,"w":15,"h":5},{"fileName":"images\\sprites\\air grab\\leftArmm.png","fileIdx":149,"x":2244,"y":1185,"w":12,"h":70},{"fileName":"images\\sprites\\air grab\\rightArmm.png","fileIdx":150,"x":2258,"y":1185,"w":12,"h":70},{"fileName":"images\\sprites\\balloonPop\\balloonPopSpritesheet.png","fileIdx":151,"x":2272,"y":1185,"w":64,"h":64},{"fileName":"images\\sprites\\Bird\\birdOpenFacingLeft.png","fileIdx":152,"x":2338,"y":1185,"w":200,"h":225},{"fileName":"images\\sprites\\Bird\\birdOpenFacingRight.png","fileIdx":153,"x":2540,"y":1185,"w":200,"h":225},{"fileName":"images\\sprites\\Bird\\plane.png","fileIdx":154,"x":2742,"y":1185,"w":500,"h":125},{"fileName":"images\\sprites\\Bird\\skyRing.png","fileIdx":155,"x":3244,"y":1185,"w":45,"h":42},{"fileName":"images\\sprites\\Bird\\skyRing2.png","fileIdx":156,"x":3291,"y":1185,"w":45,"h":42},{"fileName":"images\\sprites\\bubbleWrap\\bubbleWrapSpritesheet.png","fileIdx":157,"x":3338,"y":1185,"w":256,"h":128},{"fileName":"images\\sprites\\cVc shooter\\bullet.png","fileIdx":158,"x":3596,"y":1185,"w":3,"h":11},{"fileName":"images\\sprites\\cVc shooter\\Gun.png","fileIdx":159,"x":3601,"y":1185,"w":38,"h":142},{"fileName":"images\\sprites\\cVc shooter\\smokeParticle.png","fileIdx":160,"x":3641,"y":1185,"w":22,"h":14},{"fileName":"images\\sprites\\cVc shooter\\target2.png","fileIdx":161,"x":3665,"y":1185,"w":27,"h":24},{"fileName":"images\\sprites\\cVc shooter\\target3.png","fileIdx":162,"x":3694,"y":1185,"w":27,"h":24},{"fileName":"images\\sprites\\dayTime\\arrow.png","fileIdx":163,"x":3723,"y":1185,"w":25,"h":50},{"fileName":"images\\sprites\\dayTime\\speechBubbleFromLeft.png","fileIdx":164,"x":3750,"y":1185,"w":250,"h":187},{"fileName":"images\\sprites\\dayTime\\speechBubbleFromLeftA.png","fileIdx":165,"x":4002,"y":1185,"w":250,"h":187},{"fileName":"images\\sprites\\dayTime\\speechBubbleFromLeftAHighlighted.png","fileIdx":166,"x":4254,"y":1185,"w":250,"h":187},{"fileName":"images\\sprites\\dayTime\\speechBubbleFromLeftB.png","fileIdx":167,"x":4506,"y":1185,"w":250,"h":187},{"fileName":"images\\sprites\\dayTime\\speechBubbleFromLeftBHighlighted.png","fileIdx":168,"x":1,"y":1412,"w":250,"h":187},{"fileName":"images\\sprites\\dayTime\\speechBubbleFromRIght.png","fileIdx":169,"x":253,"y":1412,"w":250,"h":187},{"fileName":"images\\sprites\\dodgeBall\\dodgeBall.png","fileIdx":170,"x":505,"y":1412,"w":43,"h":41},{"fileName":"images\\sprites\\dodgeBall\\Player1.png","fileIdx":171,"x":550,"y":1412,"w":42,"h":74},{"fileName":"images\\sprites\\dodgeBall\\Player2.png","fileIdx":172,"x":594,"y":1412,"w":42,"h":74},{"fileName":"images\\sprites\\dodgeBall\\Player3.png","fileIdx":173,"x":638,"y":1412,"w":42,"h":74},{"fileName":"images\\sprites\\dodgeBall\\Player4.png","fileIdx":174,"x":682,"y":1412,"w":42,"h":81},{"fileName":"images\\sprites\\dodgeBall\\Player5.png","fileIdx":175,"x":726,"y":1412,"w":42,"h":81},{"fileName":"images\\sprites\\eggCatch\\Basket.png","fileIdx":176,"x":770,"y":1412,"w":44,"h":32},{"fileName":"images\\sprites\\eggCatch\\Basket2.png","fileIdx":177,"x":816,"y":1412,"w":44,"h":32},{"fileName":"images\\sprites\\eggCatch\\chicken.png","fileIdx":178,"x":862,"y":1412,"w":53,"h":54},{"fileName":"images\\sprites\\eggCatch\\egg.png","fileIdx":179,"x":917,"y":1412,"w":38,"h":50},{"fileName":"images\\sprites\\eggCatch\\egg2.png","fileIdx":180,"x":957,"y":1412,"w":38,"h":50},{"fileName":"images\\sprites\\feedGame\\cake1.png","fileIdx":181,"x":997,"y":1412,"w":38,"h":27},{"fileName":"images\\sprites\\feedGame\\cake2.png","fileIdx":182,"x":1037,"y":1412,"w":38,"h":27},{"fileName":"images\\sprites\\feedGame\\cake3.png","fileIdx":183,"x":1077,"y":1412,"w":34,"h":22},{"fileName":"images\\sprites\\feedGame\\cake4.png","fileIdx":184,"x":1113,"y":1412,"w":35,"h":22},{"fileName":"images\\sprites\\feedGame\\leftP.png","fileIdx":185,"x":1150,"y":1412,"w":37,"h":37},{"fileName":"images\\sprites\\feedGame\\rightP.png","fileIdx":186,"x":1189,"y":1412,"w":37,"h":37},{"fileName":"images\\sprites\\Finder\\bottomRoom.png","fileIdx":187,"x":1228,"y":1412,"w":250,"h":187},{"fileName":"images\\sprites\\Finder\\door.png","fileIdx":188,"x":1480,"y":1412,"w":250,"h":187},{"fileName":"images\\sprites\\Finder\\upperAndMiddleRooms.png","fileIdx":189,"x":1732,"y":1412,"w":250,"h":187},{"fileName":"images\\sprites\\Fishing\\boat.png","fileIdx":190,"x":1984,"y":1412,"w":73,"h":11},{"fileName":"images\\sprites\\Fishing\\fish.png","fileIdx":191,"x":2059,"y":1412,"w":47,"h":16},{"fileName":"images\\sprites\\Fishing\\fish2.png","fileIdx":192,"x":2108,"y":1412,"w":47,"h":16},{"fileName":"images\\sprites\\Fishing\\fish3.png","fileIdx":193,"x":2157,"y":1412,"w":47,"h":16},{"fileName":"images\\sprites\\Fishing\\person.png","fileIdx":194,"x":2206,"y":1412,"w":15,"h":8},{"fileName":"images\\sprites\\Flower\\10 Second Flower.png","fileIdx":195,"x":2223,"y":1412,"w":7,"h":14},{"fileName":"images\\sprites\\Flower\\Seed.png","fileIdx":196,"x":2232,"y":1412,"w":12,"h":3},{"fileName":"images\\sprites\\Flower\\Seed2.png","fileIdx":197,"x":2246,"y":1412,"w":12,"h":3},{"fileName":"images\\sprites\\Flower\\Simple Bee.png","fileIdx":198,"x":2260,"y":1412,"w":37,"h":37},{"fileName":"images\\sprites\\Flying Bee\\Simple Bee Facing Down.png","fileIdx":199,"x":2299,"y":1412,"w":37,"h":37},{"fileName":"images\\sprites\\Flying Bee\\Simple Bee Facing DownLeft.png","fileIdx":200,"x":2338,"y":1412,"w":37,"h":37},{"fileName":"images\\sprites\\Flying Bee\\Simple Bee Facing DownRight.png","fileIdx":201,"x":2377,"y":1412,"w":37,"h":37},{"fileName":"images\\sprites\\Flying Bee\\Simple Bee Facing Left.png","fileIdx":202,"x":2416,"y":1412,"w":37,"h":37},{"fileName":"images\\sprites\\Flying Bee\\Simple Bee Facing Right.png","fileIdx":203,"x":2455,"y":1412,"w":37,"h":37},{"fileName":"images\\sprites\\Flying Bee\\Simple Bee Facing Up.png","fileIdx":204,"x":2494,"y":1412,"w":37,"h":37},{"fileName":"images\\sprites\\Flying Bee\\Simple Bee Facing UpLeft.png","fileIdx":205,"x":2533,"y":1412,"w":37,"h":37},{"fileName":"images\\sprites\\Flying Bee\\Simple Bee Facing UpRight.png","fileIdx":206,"x":2572,"y":1412,"w":37,"h":37},{"fileName":"images\\sprites\\frogCrate\\bathStone.png","fileIdx":207,"x":2611,"y":1412,"w":160,"h":37},{"fileName":"images\\sprites\\frogCrate\\bowl.png","fileIdx":208,"x":2773,"y":1412,"w":92,"h":46},{"fileName":"images\\sprites\\frogCrate\\Bowl2.png","fileIdx":209,"x":2867,"y":1412,"w":92,"h":46},{"fileName":"images\\sprites\\frogCrate\\cartoonFly.png","fileIdx":210,"x":2961,"y":1412,"w":15,"h":15},{"fileName":"images\\sprites\\frogCrate\\cartoonFlyB.png","fileIdx":211,"x":2978,"y":1412,"w":15,"h":15},{"fileName":"images\\sprites\\frogCrate\\editedBowlInside.png","fileIdx":212,"x":2995,"y":1412,"w":92,"h":4},{"fileName":"images\\sprites\\frogCrate\\editedBowlOutside.png","fileIdx":213,"x":3089,"y":1412,"w":92,"h":46},{"fileName":"images\\sprites\\frogCrate\\FrogInBowl.png","fileIdx":214,"x":3183,"y":1412,"w":250,"h":82},{"fileName":"images\\sprites\\frogCrate\\frogTongue.png","fileIdx":215,"x":3435,"y":1412,"w":1,"h":48},{"fileName":"images\\sprites\\frogRiver\\Frog.png","fileIdx":216,"x":3438,"y":1412,"w":95,"h":82},{"fileName":"images\\sprites\\frogRiver\\lilyImage1.png","fileIdx":217,"x":3535,"y":1412,"w":46,"h":30},{"fileName":"images\\sprites\\frogRiver\\lilyImage2.png","fileIdx":218,"x":3583,"y":1412,"w":30,"h":18},{"fileName":"images\\sprites\\frogRiver\\lilyImage3.png","fileIdx":219,"x":3615,"y":1412,"w":55,"h":21},{"fileName":"images\\sprites\\frogRiver\\lilyImage4.png","fileIdx":220,"x":3672,"y":1412,"w":39,"h":25},{"fileName":"images\\sprites\\Jumper\\JumperFacingLeft.png","fileIdx":221,"x":3713,"y":1412,"w":60,"h":54},{"fileName":"images\\sprites\\Jumper\\JumperFacingRight.png","fileIdx":222,"x":3775,"y":1412,"w":60,"h":54},{"fileName":"images\\sprites\\Jumper\\jumperGroundParticle.png","fileIdx":223,"x":3837,"y":1412,"w":1,"h":1},{"fileName":"images\\sprites\\Jumper\\treasureChest.png","fileIdx":224,"x":3840,"y":1412,"w":60,"h":78},{"fileName":"images\\sprites\\Lane\\billboard.png","fileIdx":225,"x":3902,"y":1412,"w":163,"h":187},{"fileName":"images\\sprites\\Lane\\car.png","fileIdx":226,"x":4067,"y":1412,"w":75,"h":150},{"fileName":"images\\sprites\\Lane\\gasCan.png","fileIdx":227,"x":4144,"y":1412,"w":33,"h":43},{"fileName":"images\\sprites\\Maze\\mole.png","fileIdx":228,"x":4179,"y":1412,"w":87,"h":100},{"fileName":"images\\sprites\\Maze\\moleFood.png","fileIdx":229,"x":4268,"y":1412,"w":42,"h":13},{"fileName":"images\\sprites\\Memory\\Simon.png","fileIdx":230,"x":4312,"y":1412,"w":116,"h":113},{"fileName":"images\\sprites\\Memory\\Simon2.png","fileIdx":231,"x":4430,"y":1412,"w":116,"h":113},{"fileName":"images\\sprites\\Memory\\Simon3.png","fileIdx":232,"x":4548,"y":1412,"w":116,"h":113},{"fileName":"images\\sprites\\Memory\\simonLeftHighlight.png","fileIdx":233,"x":4666,"y":1412,"w":116,"h":113},{"fileName":"images\\sprites\\Memory\\simonRightHighlight.png","fileIdx":234,"x":4784,"y":1412,"w":116,"h":113},{"fileName":"images\\sprites\\nightTime\\Ghost.png","fileIdx":235,"x":4902,"y":1412,"w":71,"h":79},{"fileName":"images\\sprites\\nightTime\\ghost2.png","fileIdx":236,"x":1,"y":1601,"w":71,"h":79},{"fileName":"images\\sprites\\passBlock\\Gem.png","fileIdx":237,"x":74,"y":1601,"w":18,"h":25},{"fileName":"images\\sprites\\passBlock\\Gem2.png","fileIdx":238,"x":94,"y":1601,"w":18,"h":15},{"fileName":"images\\sprites\\passBlock\\Gem3.png","fileIdx":239,"x":114,"y":1601,"w":17,"h":16},{"fileName":"images\\sprites\\passBlock\\lavaBal.png","fileIdx":240,"x":133,"y":1601,"w":45,"h":46},{"fileName":"images\\sprites\\passBlock\\lavaBall.png","fileIdx":241,"x":180,"y":1601,"w":45,"h":46},{"fileName":"images\\sprites\\passBlock\\lavaBalll.png","fileIdx":242,"x":227,"y":1601,"w":45,"h":46},{"fileName":"images\\sprites\\passBlock\\lavaBalllUpsideDown.png","fileIdx":243,"x":274,"y":1601,"w":45,"h":46},{"fileName":"images\\sprites\\passBlock\\lavaBallUpsideDown.png","fileIdx":244,"x":321,"y":1601,"w":45,"h":46},{"fileName":"images\\sprites\\passBlock\\lavaBalUpsideDown.png","fileIdx":245,"x":368,"y":1601,"w":45,"h":46},{"fileName":"images\\sprites\\passBlock\\lavaParticle1.png","fileIdx":246,"x":415,"y":1601,"w":1,"h":3},{"fileName":"images\\sprites\\passBlock\\lavaParticle2.png","fileIdx":247,"x":418,"y":1601,"w":3,"h":3},{"fileName":"images\\sprites\\passBlock\\lavaParticle3.png","fileIdx":248,"x":423,"y":1601,"w":1,"h":2},{"fileName":"images\\sprites\\passBlock\\lavaParticle4.png","fileIdx":249,"x":426,"y":1601,"w":3,"h":2},{"fileName":"images\\sprites\\passBlock\\volcanicRock.png","fileIdx":250,"x":431,"y":1601,"w":38,"h":10},{"fileName":"images\\sprites\\Penalty\\goal.png","fileIdx":251,"x":471,"y":1601,"w":209,"h":108},{"fileName":"images\\sprites\\Penalty\\ball\\ball0000.png","fileIdx":252,"x":682,"y":1601,"w":270,"h":270},{"fileName":"images\\sprites\\Penalty\\ball\\ball0001.png","fileIdx":253,"x":954,"y":1601,"w":270,"h":270},{"fileName":"images\\sprites\\Penalty\\ball\\ball0002.png","fileIdx":254,"x":1226,"y":1601,"w":270,"h":270},{"fileName":"images\\sprites\\Penalty\\ball\\ball0003.png","fileIdx":255,"x":1498,"y":1601,"w":270,"h":270},{"fileName":"images\\sprites\\Penalty\\ball\\ball0004.png","fileIdx":256,"x":1770,"y":1601,"w":270,"h":270},{"fileName":"images\\sprites\\Penalty\\ball\\ball0005.png","fileIdx":257,"x":2042,"y":1601,"w":270,"h":270},{"fileName":"images\\sprites\\Penalty\\ball\\ball0006.png","fileIdx":258,"x":2314,"y":1601,"w":270,"h":270},{"fileName":"images\\sprites\\Penalty\\ball\\ball0007.png","fileIdx":259,"x":2586,"y":1601,"w":270,"h":270},{"fileName":"images\\sprites\\Penalty\\ball\\ball0008.png","fileIdx":260,"x":2858,"y":1601,"w":270,"h":270},{"fileName":"images\\sprites\\Penalty\\ball\\ball0009.png","fileIdx":261,"x":3130,"y":1601,"w":270,"h":270},{"fileName":"images\\sprites\\Penalty\\ball\\ball0010.png","fileIdx":262,"x":3402,"y":1601,"w":270,"h":270},{"fileName":"images\\sprites\\pinata\\pinata.png","fileIdx":263,"x":3674,"y":1601,"w":64,"h":64},{"fileName":"images\\sprites\\PromptsAndAnswers\\bee.png","fileIdx":264,"x":3740,"y":1601,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\cat.png","fileIdx":265,"x":3992,"y":1601,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\cot.png","fileIdx":266,"x":4244,"y":1601,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\flower.png","fileIdx":267,"x":4496,"y":1601,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\man.png","fileIdx":268,"x":4748,"y":1601,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\men.png","fileIdx":269,"x":1,"y":1873,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\woman.png","fileIdx":270,"x":253,"y":1873,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\women.png","fileIdx":271,"x":505,"y":1873,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\CentralVietnamese\\helloMan.png","fileIdx":272,"x":757,"y":1873,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\CentralVietnamese\\helloWoman.png","fileIdx":273,"x":1009,"y":1873,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\CentralVietnamese\\iLikeToEatVegetarian.png","fileIdx":274,"x":1261,"y":1873,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\CentralVietnamese\\whatDoYouLikeToEat.png","fileIdx":275,"x":1513,"y":1873,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\CentralVietnamese\\whatIsYourNameBaby.png","fileIdx":276,"x":1765,"y":1873,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\CentralVietnamese\\whatIsYourNameBrother.png","fileIdx":277,"x":2017,"y":1873,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\anyTime2.png","fileIdx":278,"x":2269,"y":1873,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\at.png","fileIdx":279,"x":2521,"y":1873,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\black.png","fileIdx":280,"x":2773,"y":1873,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\blankCalendarPage.png","fileIdx":281,"x":3025,"y":1873,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\blue.png","fileIdx":282,"x":3277,"y":1873,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\brown.png","fileIdx":283,"x":3529,"y":1873,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\couch.png","fileIdx":284,"x":3781,"y":1873,"w":270,"h":202},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\dumplings.png","fileIdx":285,"x":4053,"y":1873,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\excuseMeForSayingThis.png","fileIdx":286,"x":4305,"y":1873,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\excuseMePassingThroughContext.png","fileIdx":287,"x":4557,"y":1873,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\excuseMeQuestionAskingContext.png","fileIdx":288,"x":1,"y":2077,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\excuseMyLowSkill.png","fileIdx":289,"x":253,"y":2077,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\gray.png","fileIdx":290,"x":505,"y":2077,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\green.png","fileIdx":291,"x":757,"y":2077,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\have.png","fileIdx":292,"x":1009,"y":2077,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\here.png","fileIdx":293,"x":1261,"y":2077,"w":270,"h":360},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\horse.png","fileIdx":294,"x":1533,"y":2077,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\howAmI.png","fileIdx":295,"x":1785,"y":2077,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\howAreThey.png","fileIdx":296,"x":2037,"y":2077,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\howAreWe.png","fileIdx":297,"x":2289,"y":2077,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\howAreYou.png","fileIdx":298,"x":2541,"y":2077,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\howIsHe.png","fileIdx":299,"x":2793,"y":2077,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\howIsItDoing.png","fileIdx":300,"x":3045,"y":2077,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\howIsShe.png","fileIdx":301,"x":3297,"y":2077,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\howOldAreYou.png","fileIdx":302,"x":3549,"y":2077,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\iAlsoLikeFitness.png","fileIdx":303,"x":3801,"y":2077,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\iAm37.png","fileIdx":304,"x":4053,"y":2077,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\iAmATeacher.png","fileIdx":305,"x":4305,"y":2077,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\iAmFromAmerica.png","fileIdx":306,"x":4557,"y":2077,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\iAppreciateThat.png","fileIdx":307,"x":1,"y":2439,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\iLikeProgramming.png","fileIdx":308,"x":253,"y":2439,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\iLikeRockClimbing.png","fileIdx":309,"x":505,"y":2439,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\iLikeWatchingMovies.png","fileIdx":310,"x":757,"y":2439,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\iLiveInVietnam.png","fileIdx":311,"x":1009,"y":2439,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\illLetYouGo.png","fileIdx":312,"x":1261,"y":2439,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\imAlsoVeryGood.png","fileIdx":313,"x":1513,"y":2439,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\imVeryGood.png","fileIdx":314,"x":1765,"y":2439,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\in.png","fileIdx":315,"x":2017,"y":2439,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\iRespectfullyWait.png","fileIdx":316,"x":2269,"y":2439,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\itsMyDuty.png","fileIdx":317,"x":2521,"y":2439,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\itsOK.png","fileIdx":318,"x":2773,"y":2439,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\leImage.png","fileIdx":319,"x":3025,"y":2439,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\longTimeNoSee.png","fileIdx":320,"x":3277,"y":2439,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\mandarinBuy.png","fileIdx":321,"x":3529,"y":2439,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\mandarinMeMyIImage.png","fileIdx":322,"x":3781,"y":2439,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\mandarinSell.png","fileIdx":323,"x":4033,"y":2439,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\mandarinThatPlace.png","fileIdx":324,"x":4285,"y":2439,"w":270,"h":360},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\meToo.png","fileIdx":325,"x":4557,"y":2439,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\mom.png","fileIdx":326,"x":1,"y":2801,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\myHumbleOpinion.png","fileIdx":327,"x":253,"y":2801,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\myNameIsKiiiiiid.png","fileIdx":328,"x":505,"y":2801,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\myNameIsSteven.png","fileIdx":329,"x":757,"y":2801,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\niceToMeetYou.png","fileIdx":330,"x":1009,"y":2801,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\notBad.png","fileIdx":331,"x":1261,"y":2801,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\notImage.png","fileIdx":332,"x":1513,"y":2801,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\of.png","fileIdx":333,"x":1765,"y":2801,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\ofImage.png","fileIdx":334,"x":2017,"y":2801,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\oneMoment.png","fileIdx":335,"x":2269,"y":2801,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\personImage.png","fileIdx":336,"x":2521,"y":2801,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\pink.png","fileIdx":337,"x":2773,"y":2801,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\please.png","fileIdx":338,"x":3025,"y":2801,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\pleaseAdviseMe.png","fileIdx":339,"x":3277,"y":2801,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\pleaseHelpMe.png","fileIdx":340,"x":3529,"y":2801,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\purple.png","fileIdx":341,"x":3781,"y":2801,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\red.png","fileIdx":342,"x":4033,"y":2801,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\sleep.png","fileIdx":343,"x":4285,"y":2801,"w":270,"h":202},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\somethingElse.png","fileIdx":344,"x":4557,"y":2801,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\sorry.png","fileIdx":345,"x":1,"y":3005,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\takeCare.png","fileIdx":346,"x":253,"y":3005,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\thankYou.png","fileIdx":347,"x":505,"y":3005,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\thatOne.png","fileIdx":348,"x":757,"y":3005,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\there.png","fileIdx":349,"x":1009,"y":3005,"w":270,"h":360},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\theseOnes.png","fileIdx":350,"x":1281,"y":3005,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\thisMaySeemRude.png","fileIdx":351,"x":1533,"y":3005,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\thisOne.png","fileIdx":352,"x":1785,"y":3005,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\thoseOnes.png","fileIdx":353,"x":2037,"y":3005,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\thumbnail.png","fileIdx":354,"x":2289,"y":3005,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\toBeImage.png","fileIdx":355,"x":2541,"y":3005,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\tower.png","fileIdx":356,"x":2793,"y":3005,"w":266,"h":200},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\whatDoYouLikeToDo.png","fileIdx":357,"x":3061,"y":3005,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\whatIsYourJob.png","fileIdx":358,"x":3313,"y":3005,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\whatIsYourName.png","fileIdx":359,"x":3565,"y":3005,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\whatPartOfChina.png","fileIdx":360,"x":3817,"y":3005,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\whereAreYouFrom.png","fileIdx":361,"x":4069,"y":3005,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\whereDoYouLive.png","fileIdx":362,"x":4321,"y":3005,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\white.png","fileIdx":363,"x":4573,"y":3005,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\yellow.png","fileIdx":364,"x":1,"y":3367,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\you.png","fileIdx":365,"x":253,"y":3367,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\youHaveWorkedHard.png","fileIdx":366,"x":505,"y":3367,"w":250,"h":187},{"fileName":"images\\sprites\\PromptsAndAnswers\\Mandarin\\youreWelcome.png","fileIdx":367,"x":757,"y":3367,"w":250,"h":187},{"fileName":"images\\sprites\\Rewards\\Diamon2.png","fileIdx":368,"x":1009,"y":3367,"w":26,"h":26},{"fileName":"images\\sprites\\Rewards\\Diamond.png","fileIdx":369,"x":1037,"y":3367,"w":26,"h":26},{"fileName":"images\\sprites\\Rewards\\Gift.png","fileIdx":370,"x":1065,"y":3367,"w":60,"h":57},{"fileName":"images\\sprites\\Rewards\\Gift2.png","fileIdx":371,"x":1127,"y":3367,"w":35,"h":31},{"fileName":"images\\sprites\\Rewards\\Trophy.png","fileIdx":372,"x":1164,"y":3367,"w":65,"h":61},{"fileName":"images\\sprites\\runner\\1.png","fileIdx":373,"x":1231,"y":3367,"w":27,"h":39},{"fileName":"images\\sprites\\runner\\1edited.png","fileIdx":374,"x":1260,"y":3367,"w":27,"h":39},{"fileName":"images\\sprites\\runner\\1jump.png","fileIdx":375,"x":1289,"y":3367,"w":42,"h":52},{"fileName":"images\\sprites\\runner\\2.png","fileIdx":376,"x":1333,"y":3367,"w":27,"h":39},{"fileName":"images\\sprites\\runner\\2edited.png","fileIdx":377,"x":1362,"y":3367,"w":27,"h":39},{"fileName":"images\\sprites\\runner\\3.png","fileIdx":378,"x":1391,"y":3367,"w":27,"h":39},{"fileName":"images\\sprites\\runner\\3edited.png","fileIdx":379,"x":1420,"y":3367,"w":27,"h":39},{"fileName":"images\\sprites\\runner\\4.png","fileIdx":380,"x":1449,"y":3367,"w":27,"h":39},{"fileName":"images\\sprites\\runner\\4edited.png","fileIdx":381,"x":1478,"y":3367,"w":27,"h":39},{"fileName":"images\\sprites\\runner\\5.png","fileIdx":382,"x":1507,"y":3367,"w":27,"h":39},{"fileName":"images\\sprites\\runner\\5edited.png","fileIdx":383,"x":1536,"y":3367,"w":27,"h":39},{"fileName":"images\\sprites\\runner\\Basket.png","fileIdx":384,"x":1565,"y":3367,"w":27,"h":28},{"fileName":"images\\sprites\\runner\\Coin.png","fileIdx":385,"x":1594,"y":3367,"w":45,"h":42},{"fileName":"images\\sprites\\runner\\runnerCrouch.png","fileIdx":386,"x":1641,"y":3367,"w":250,"h":187},{"fileName":"images\\sprites\\runner\\runnerJumping.png","fileIdx":387,"x":1893,"y":3367,"w":250,"h":187},{"fileName":"images\\sprites\\runner\\runnerRunning1.png","fileIdx":388,"x":2145,"y":3367,"w":250,"h":187},{"fileName":"images\\sprites\\runner\\runnerRunning2.png","fileIdx":389,"x":2397,"y":3367,"w":250,"h":187},{"fileName":"images\\sprites\\runner\\runnerRunning3.png","fileIdx":390,"x":2649,"y":3367,"w":250,"h":187},{"fileName":"images\\sprites\\runner\\runnerStumble.png","fileIdx":391,"x":2901,"y":3367,"w":250,"h":187},{"fileName":"images\\sprites\\Snake\\apple.png","fileIdx":392,"x":3153,"y":3367,"w":12,"h":12},{"fileName":"images\\sprites\\Snake\\appleCore.png","fileIdx":393,"x":3167,"y":3367,"w":12,"h":12},{"fileName":"images\\sprites\\Snake\\bottomSnake.png","fileIdx":394,"x":3181,"y":3367,"w":5,"h":20},{"fileName":"images\\sprites\\Snake\\middleSnake.png","fileIdx":395,"x":3188,"y":3367,"w":5,"h":20},{"fileName":"images\\sprites\\Snake\\topSnake.png","fileIdx":396,"x":3195,"y":3367,"w":5,"h":20},{"fileName":"images\\sprites\\spaceShooter\\Jupiter.png","fileIdx":397,"x":3202,"y":3367,"w":15,"h":14},{"fileName":"images\\sprites\\spaceShooter\\Laser.png","fileIdx":398,"x":3219,"y":3367,"w":127,"h":1},{"fileName":"images\\sprites\\spaceShooter\\rocket.png","fileIdx":399,"x":3348,"y":3367,"w":22,"h":8},{"fileName":"images\\sprites\\spaceShooter\\rocketExplosion.png","fileIdx":400,"x":3372,"y":3367,"w":127,"h":127},{"fileName":"images\\sprites\\spaceShooter\\spaceRock.png","fileIdx":401,"x":3501,"y":3367,"w":45,"h":42},{"fileName":"images\\sprites\\spaceShooter\\spaceRock2.png","fileIdx":402,"x":3548,"y":3367,"w":45,"h":42},{"fileName":"images\\sprites\\spaceShooter\\spaceship.png","fileIdx":403,"x":3595,"y":3367,"w":132,"h":204},{"fileName":"images\\sprites\\spaceShooter\\spaceship2.png","fileIdx":404,"x":3729,"y":3367,"w":137,"h":212},{"fileName":"images\\sprites\\SpellingBees\\Simple Bee Without Stripes.png","fileIdx":405,"x":3868,"y":3367,"w":37,"h":37},{"fileName":"images\\sprites\\transitions\\heart.png","fileIdx":406,"x":3907,"y":3367,"w":32,"h":32},{"fileName":"images\\sprites\\transitions\\star.png","fileIdx":407,"x":3941,"y":3367,"w":32,"h":32},{"fileName":"images\\sprites\\Vacuum\\vacuum.png","fileIdx":408,"x":3975,"y":3367,"w":44,"h":39},{"fileName":"images\\sprites\\whackAnAnswer\\wackPlacer.png","fileIdx":409,"x":4021,"y":3367,"w":45,"h":42},{"fileName":"images\\sprites\\whackAnAnswer\\wackPlacer2.png","fileIdx":410,"x":4068,"y":3367,"w":45,"h":42},{"fileName":"images\\sprites\\whackAnAnswer\\wackPlacer3.png","fileIdx":411,"x":4115,"y":3367,"w":45,"h":42},{"fileName":"images\\sprites\\whackAnAnswer\\whackHammer.png","fileIdx":412,"x":4162,"y":3367,"w":148,"h":152},{"fileName":"images\\sprites\\Penalty\\goalkeeper\\1.png","fileIdx":413,"x":4312,"y":3367,"w":575,"h":225},{"fileName":"images\\sprites\\Penalty\\goalkeeper\\2.png","fileIdx":414,"x":1,"y":3594,"w":575,"h":225},{"fileName":"images\\sprites\\Penalty\\goalkeeper\\3.png","fileIdx":415,"x":578,"y":3594,"w":575,"h":225},{"fileName":"images\\sprites\\Penalty\\goalkeeper\\4.png","fileIdx":416,"x":1155,"y":3594,"w":575,"h":225},{"fileName":"images\\sprites\\Penalty\\goalkeeper\\5.png","fileIdx":417,"x":1732,"y":3594,"w":575,"h":225},{"fileName":"images\\sprites\\Penalty\\goalkeeper\\6.png","fileIdx":418,"x":2309,"y":3594,"w":575,"h":225},{"fileName":"images\\sprites\\Penalty\\goalkeeper\\7.png","fileIdx":419,"x":2886,"y":3594,"w":575,"h":225},{"fileName":"images\\sprites\\Penalty\\goalkeeper\\8.png","fileIdx":420,"x":3463,"y":3594,"w":575,"h":225},{"fileName":"images\\sprites\\Penalty\\goalkeeper\\9.png","fileIdx":421,"x":4040,"y":3594,"w":575,"h":225},{"fileName":"images\\sprites\\Penalty\\goalkeeper\\10.png","fileIdx":422,"x":1,"y":3821,"w":575,"h":225},{"fileName":"images\\sprites\\Penalty\\goalkeeper\\11.png","fileIdx":423,"x":578,"y":3821,"w":575,"h":225},{"fileName":"images\\sprites\\Penalty\\goalkeeper\\12.png","fileIdx":424,"x":1155,"y":3821,"w":575,"h":225},{"fileName":"images\\sprites\\Penalty\\goalkeeper\\13.png","fileIdx":425,"x":1732,"y":3821,"w":575,"h":225},{"fileName":"images\\sprites\\Penalty\\goalkeeper\\14.png","fileIdx":426,"x":2309,"y":3821,"w":575,"h":225}];//standard image declaration section

let megaSheet = document.createElement("img");
//Prompt and Answer Class Section
let womanImage = document.createElement("img");
let womenImage = document.createElement("img");
let manImage = document.createElement("img");
let menImage = document.createElement("img");
let heImage = document.createElement("img");
let sheImage = document.createElement("img");

let cotImage = document.createElement("img");
let catImage = document.createElement("img");

let howAreYouImage = document.createElement("img");
let howAmIImage = document.createElement("img");
let howAreTheyImage = document.createElement("img");
let howAreWeImage = document.createElement("img");
let howIsSheImage = document.createElement("img");
let howIsHeImage = document.createElement("img");
let howIsItDoingImage = document.createElement("img");
let imVeryGoodImage = document.createElement("img");
let notBadImage = document.createElement("img");
let imAlsoVeryGoodImage = document.createElement("img");
let veryNiceToMeetYouImage = document.createElement("img");
let whereAreYouFromImage = document.createElement("img");
let imFromAmericaImage = document.createElement("img");
let whatDoYouLikeToDoImage = document.createElement("img");
let whatPartOfChinaImage = document.createElement("img");
let whereDoYouLiveImage = document.createElement("img");
let iLiveInVietnamImage = document.createElement("img");
let meTooImage = document.createElement("img");
let iLikeProgrammingImage = document.createElement("img");
let iAlsoLikeFitnessImage = document.createElement("img");
let whatIsYourJobImage =  document.createElement("img");
let iAmATeacherImage =  document.createElement("img");
let anythingElseImage =  document.createElement("img");
let iLikeWatchingMoviesImage =  document.createElement("img");
let iLikeRockClimbingImage =  document.createElement("img");
let whatIsYourNameImage =  document.createElement("img");
let myNameIsStevenImage = document.createElement("img");
let howOldAreYouImage = document.createElement("img");
let iAm37YearsOldImage = document.createElement("img");

//polite stuff
let pleaseImage = document.createElement("img");
let sorryImage = document.createElement("img");
let excuseMeQuestionAskingContextImage = document.createElement("img");
let waitAMomentImage = document.createElement("img");
let thankYouImage = document.createElement("img");
let anyTimeImage = document.createElement("img");
let youreWelcomeImage = document.createElement("img");
let excuseMePassingThroughContextImage = document.createElement("img");
let iAppreciateThatImage = document.createElement("img");
let youHaveWorkedHardImage = document.createElement("img");

//polite stuff group 2
let longTimeNoSeeImage = document.createElement("img");
let illLetYouGoImage = document.createElement("img");
let pleaseAdviseMeImage = document.createElement("img");
let iRespectfullyWaitImage = document.createElement("img");
let myHumbleOpinionImage = document.createElement("img");
let itsOKImage = document.createElement("img");
let itsMyDutyImage = document.createElement("img");
let excuseMeForSayingThisImage = document.createElement("img");
let excuseMyLowSkillImage = document.createElement("img");

//common words
let toBeImage = document.createElement("img");
let ofImage = document.createElement("img");
let notImage = document.createElement("img");
let leImage = document.createElement("img");
let personImage = document.createElement("img");
let mandarinMeMyIImage = document.createElement("img");
let youImage = document.createElement("img");
let atImage = document.createElement("img");
let haveImage = document.createElement("img");
let inImage = document.createElement("img");

let mandarinBuyImage = document.createElement("img");//'buy' in English
let mandarinSellImage = document.createElement("img");//'sell' in English

let mandarinMomImage = document.createElement("img");
let mandarinHorseImage = document.createElement('img');

let mandarinThisOneImage = document.createElement("img");
let mandarinThatOneImage = document.createElement("img");
let mandarinTheseOnesImage = document.createElement("img");
let mandarinThoseOnesImage = document.createElement("img");

let mandarinCouchImage = document.createElement("img");
let mandarinTowerImage = document.createElement("img");

let sleepImage = document.createElement("img");
let dumplingsImage = document.createElement("img");

let hereImage = document.createElement("img");
let thereImage = document.createElement("img");

let blackImage = document.createElement("img");
let whiteImage = document.createElement("img");
let grayImage = document.createElement("img");
let redImage = document.createElement("img");
let brownImage = document.createElement("img");
let yellowImage = document.createElement("img");
let greenImage = document.createElement("img");
let blueImage = document.createElement("img");
let purpleImage = document.createElement("img");
let pinkImage = document.createElement("img");

//central vietnamese
let helloManImage = document.createElement("img");
let helloWomanImage = document.createElement("img");
let whatsYourNameBrotherImage = document.createElement("img");
let whatsYourNameBabyImage = document.createElement("img");
let whatDoYouLikeToEatImage = document.createElement("img");
let iLikeToEatVegetarianImage  = document.createElement("img");

let calendarImage = document.createElement("img");

let beeImage = document.createElement("img");
let flowerImage = document.createElement("img");

//runner images
// let runnerSunAndSkyBackgroundImage = document.createElement("img");
// let runnerCloud1 = document.createElement("img");
// let runnerGrassImage = document.createElement("img");
// let runnerMountain1Image = document.createElement("img");
// let runnerRunning1Image = document.createElement('img');
// let runnerRunning2Image = document.createElement('img');
// let runnerRunning3Image = document.createElement('img');
// let runnerRunning4Image = document.createElement("img");
// let runnerRunning5Image = document.createElement("img");
// let runnerJumpingImage = document.createElement("img");
// let coinImage = document.createElement("img");

//snake images
let snakeGrassBackground = document.createElement('img');
let snakeHeadImage = document.createElement('img');
let snakeMiddleImage = document.createElement('img');
let snakeTailImage = document.createElement('img');
let appleImage = document.createElement('img');
let appleCoreImage = document.createElement('img');

//bird images
let skyBackground = document.createElement('img');
let cloud1Image = document.createElement('img');
let cloud2Image = document.createElement('img');
let cloud3Image = document.createElement('img');
let cloud4Image = document.createElement('img');
let birdOpenFacingLeftImage = document.createElement('img');
let birdOpenFacingRightImage = document.createElement('img');
let skyRingAnswerHolder1 = document.createElement('img');
let skyRingAnswerHolder2 = document.createElement('img');
let planeImage = document.createElement('img');

let menu_borderImage = document.createElement('img');
let scoreboard_overlayImage = document.createElement('img');

//lane images
let laneGrassBackground1 = document.createElement('img');
let laneGrassBackground2 = document.createElement('img');
let laneRoad1 = document.createElement('img');
let laneRoad2 = document.createElement('img');
let laneCarImage = document.createElement('img');
let roadDash1 = document.createElement('img');
let roadDash2 = document.createElement('img');
let roadDash3 = document.createElement('img');
let gasCanImage = document.createElement('img');
let billboardImage = document.createElement('img');

//jumper images
let jumperBackground = document.createElement('img');
let jumperPlayerFacingRightImage = document.createElement('img');
let jumperPlayerFacingLeftImage = document.createElement('img');
let jumperGroundParticleImage = document.createElement('img');
let treasureChestAnswerHolderImage = document.createElement('img');

//finder images
let finderBackgroundImage = document.createElement('img');
let upperAndMiddleRoomsImage = document.createElement('img');
let bottomRoomImage = document.createElement('img');
let doorImage = document.createElement('img');
let trophyImage = document.createElement('img');

//volcano
let volcanoImage = document.createElement('img');
let spaceBackgroundForVolcanoGame = document.createElement('img');
let lavaBall1Image = document.createElement('img');
let lavaBall2Image = document.createElement('img');
let lavaBall3Image = document.createElement('img');
let lavaBall1UpsideDownImage = document.createElement('img');
let lavaBall2UpsideDownImage = document.createElement('img');
let lavaBall3UpsideDownImage = document.createElement('img');
let lavaParticle1Image = document.createElement('img');
let lavaParticle2Image = document.createElement('img');
let lavaParticle3Image = document.createElement('img');
let lavaParticle4Image = document.createElement('img');
let paddleRockImage = document.createElement('img');
let gem1Image = document.createElement('img');
let gem2Image = document.createElement('img');
let gem3Image = document.createElement('img');

//cVc shooter/shoot gallery game
let shootGalleryImage = document.createElement('img');
let shootGalleryTargetImage = document.createElement('img');
let galleryGunImage = document.createElement('img');
let galleryBulletImage = document.createElement('img');
let gunSmokeParticleImage = document.createElement('img');

//space shooter images
let spaceShooterBackgroundImage = document.createElement('img');
let spaceShooterBackgroundImage2 = document.createElement('img');
let spaceshipImage = document.createElement('img');
let spaceRockImage1 = document.createElement('img');
let spaceRockImage2 = document.createElement('img');
let rocketExplosionImage = document.createElement('img');
let rocketImage = document.createElement('img');

//flower images
let simpleFlower = document.createElement('img');
let flowerBackground = document.createElement('img');
let jupiterImage = document.createElement('img');

//hello world images
let russianDollImage1 = document.createElement('img');
let daytimeImage = document.createElement('img');
let russianDollImage4 = document.createElement('img');
let speechBubbleFromLeftImageA = document.createElement('img');
let speechBubbleFromLeftImageAHighlighted = document.createElement('img');
let speechBubbleFromLeftImageBHighlighted = document.createElement('img');
let speechBubbleFromLeftImageB = document.createElement('img');
let speechBubbleFromRightImage = document.createElement('img');
let helloWorldArrowImage = document.createElement('img');

//dodgeball images
let dodgeBallBackgroundImage = document.createElement('img');
let russianDollImage2 = document.createElement('img');
let russianDollImage3 = document.createElement('img');
let russianDollImage5 = document.createElement('img');
let dodgeballImage = document.createElement('img');

//nighttime
let nighttimeBackgroundImage = document.createElement('img');
let ghostImage1 = document.createElement('img');
let ghostImage2 = document.createElement('img');

//frog crate
let frogCrateBackground = document.createElement('img');
let frogInBowlImage = document.createElement('img');
let bathStoneImage = document.createElement('img');
let frogTongueImage = document.createElement('img');
let flyImage1 = document.createElement('img');

// maze images
let mazeFloor = document.createElement('img');
let mazeTopWall = document.createElement('img');
let mazeBottomWall = document.createElement('img');
let mazeLeftWall = document.createElement('img');
let mazeRightWall = document.createElement('img');
let mazeCharacter = document.createElement('img');
let moleFoodImage = document.createElement('img');

//memory
let simon1Image = document.createElement('img');
let simonLeftHighlightImage = document.createElement('img');
let simonRightHighlightImage = document.createElement('img');


//Frog
let frogRiverBackgroundImage = document.createElement('img');
let frogRiverCharacter = document.createElement('img');
let lilyImage1 = document.createElement('img');
let lilyImage2 = document.createElement('img');
let lilyImage3 = document.createElement('img');
let lilyImage4 = document.createElement('img');

//whackAnAnswer
let whackTableSurface = document.createElement('img');
let whackTableBeneathSurface = document.createElement('img');
let hammerImage = document.createElement('img');

//spelling bees
let spellingBeesBackgroundImage = document.createElement('img');

//vacuum
let vacuumBackgroundImage = document.createElement('img');
let vacuumImage = document.createElement('img');

//fishing
let fishingGameWaterBackgroundImage = document.createElement('img');
let fishingGameCharacter = document.createElement('img');
let fishingGameBoat = document.createElement('img');
let fishingGameFish1 = document.createElement('img');
let fishingGameFish2 = document.createElement('img');
let fishingGameFish3 = document.createElement('img');

//flying bee
let flyingBeeBackgroundImage = document.createElement('img');
let flyingBeeFacingLeftImage = document.createElement('img');
let flyingBeeFacingLeftUpImage = document.createElement('img');
let flyingBeeFacingLeftDownImage = document.createElement('img');
let flyingBeeFacingRightImage = document.createElement('img');
let flyingBeeFacingRightUpImage = document.createElement('img');
let flyingBeeFacingRightDownImage = document.createElement('img');
let flyingBeeFacingDownImage = document.createElement('img');
let flyingBeeFacingUpImage = document.createElement('img');

//egg catch
let eggCatchBackgroundImage = document.createElement('img');
let eggImage1 = document.createElement('img');
let eggImage2 = document.createElement('img');
let basketImage = document.createElement('img');
let chickenImage = document.createElement('img');

let beeWithoutStripesImage = document.createElement('img');

//feed who
let feedBackgroundImage = document.createElement('img');
let cake1 = document.createElement('img');
let cake2 = document.createElement('img');
let cake3 = document.createElement('img');
let cake4 = document.createElement('img');
let leftPac = document.createElement('img');
let rightPac = document.createElement('img');

//PenaltyShootout images
let penaltyBall1 = document.createElement('img');
let penaltyBall2 = document.createElement('img');
let penaltyBall3 = document.createElement('img');
let penaltyBall4 = document.createElement('img');
let penaltyBall5 = document.createElement('img');
let penaltyBall6 = document.createElement('img');
let penaltyBall7 = document.createElement('img');
let penaltyBall8 = document.createElement('img');
let penaltyBall9 = document.createElement('img');
let penaltyBall10 = document.createElement('img');
let penaltyBall11 = document.createElement('img');
let penaltyGoal = document.createElement('img');
let penaltyGoalkeeper1 = document.createElement('img');
let penaltyGoalkeeper2 = document.createElement('img');
let penaltyGoalkeeper3 = document.createElement('img');
let penaltyGoalkeeper4 = document.createElement('img');
let penaltyGoalkeeper5 = document.createElement('img');
let penaltyGoalkeeper6 = document.createElement('img');
let penaltyGoalkeeper7 = document.createElement('img');
let penaltyGoalkeeper8 = document.createElement('img');
let penaltyGoalkeeper9 = document.createElement('img');
let penaltyGoalkeeper10 = document.createElement('img');
let penaltyGoalkeeper11 = document.createElement('img');
let penaltyGoalkeeper12 = document.createElement('img');
let penaltyGoalkeeper13 = document.createElement('img');
let penaltyGoalkeeper14 = document.createElement('img');

//special characters for custom font
let upArrowImage = document.createElement("img");
let rightArrowImage = document.createElement("img");
let downArrowImage = document.createElement("img");
let leftArrowImage = document.createElement("img");

//custom font symbols that do not function easily in condensed code
//var arrayOfTextSymbols = '~!@#$%=,.';
let symbolTildeImage = document.createElement("img");//~
let symbolExclamationPointImage = document.createElement("img");//!
let symbolEmailAtImage = document.createElement("img");//@
let symbolHashImage = document.createElement("img");//#
let symbolDollarSignImage = document.createElement("img");//$
let symbolPercentImage = document.createElement("img");//%
let symbolEqualsImage = document.createElement("img");//=
let symbolQuestionMarkImage = document.createElement("img");//?
let symbolPeriodImage = document.createElement("img");//.
let symbolCommaImage = document.createElement("img");//,

let placeholderPlayButtonImage = document.createElement("img");

let checkBoxImage = document.createElement("img");
let checkForCheckBoxImage = document.createElement("img");

// bubble wrap game
var bubbleWrapBG = document.createElement("img");
var bubbleWrapSpritesheet = document.createElement("img");
var balloonPopSpritesheet = document.createElement("img");
var pinataImage = document.createElement("img");
var heartImage = document.createElement("img");
var starImage = document.createElement("img");
//var balloonPopBG = document.createElement("img");

//custom font image loading section, used loops for less typing... just to see if i could
var arrayOfTextLetters = 'abcdefghijklmnopqrstuvwxyzñ';
var arrayOfTextNumbers = '0123456789';
var arrayOfTextSymbols = [upArrowImage, rightArrowImage, downArrowImage, leftArrowImage, symbolTildeImage, symbolExclamationPointImage,
symbolEmailAtImage, symbolHashImage, symbolDollarSignImage, symbolPercentImage, symbolEqualsImage, symbolQuestionMarkImage,
symbolPeriodImage, symbolCommaImage];

// image arrays for fancyBG trasition particle systems
var titleFancySprites = ['images\\sprites\\PromptsAndAnswers\\cat.png','images\\sprites\\PromptsAndAnswers\\bee.png','images\\sprites\\PromptsAndAnswers\\flower.png','images\\Backgrounds\\runnerCloud1.png','images\\sprites\\runner\\Coin.png','images\\sprites\\Lane\\car.png','images\\sprites\\spaceShooter\\spaceship.png',"images\\sprites\\Maze\\moleFood.png","images\\sprites\\air grab\\Bill.png",'images\\sprites\\pinata\\pinata.png','images\\Custom Font\\pngs\\symbols\\symbolQuestionMark.png','images\\sprites\\Fishing\\fish.png',"images\\sprites\\frogRiver\\lilyImage1.png",'images\\sprites\\whackAnAnswer\\whackHammer.png'];


(function () {//cycle through letter and number names, create image elements for them

  //letters
  for (let arrayOfTextLettersIndex = 0; arrayOfTextLettersIndex < arrayOfTextLetters.length; arrayOfTextLettersIndex++)
  {

    //small letters
    let smallLetterVariableName = 'small' + arrayOfTextLetters[arrayOfTextLettersIndex];
    window[smallLetterVariableName] = document.createElement("img");

    //big letters
    let bigLetterVariableName = 'big' + arrayOfTextLetters[arrayOfTextLettersIndex];
    window[bigLetterVariableName] = document.createElement("img");
  }

  //numbers
  for (let arrayOfTextNumbersIndex = 0; arrayOfTextNumbersIndex < arrayOfTextNumbers.length; arrayOfTextNumbersIndex++)
  {
    let numberVariableName = 'number' + arrayOfTextNumbers[arrayOfTextNumbersIndex];
    window[numberVariableName] = document.createElement("img");
  }

})();

var numberOfImagesToLoad = undefined;
let arrayOfImagesToLoad = [];
function loadImages()
{

  // for (let arrayOfTextLettersIndex = 0; arrayOfTextLettersIndex < arrayOfTextLetters.length; arrayOfTextLettersIndex++)
  // {
  //   let smallLetterImageName = 'small' + arrayOfTextLetters[arrayOfTextLettersIndex];
  //   arrayOfImagesToLoad.push(
  //                   {
  //                   imageObjectBinding: window[smallLetterImageName],
  //                   theFile: 'images/Custom Font/pngs/small letters/small' + arrayOfTextLetters[arrayOfTextLettersIndex] + '.png'
  //                   });
  //
  //   let bigLetterImageName = 'big' + arrayOfTextLetters[arrayOfTextLettersIndex];
  //   arrayOfImagesToLoad.push(
  //                   {
  //                   imageObjectBinding: window[bigLetterImageName],
  //                   theFile: 'images/Custom Font/pngs/big letters/big' + arrayOfTextLetters[arrayOfTextLettersIndex] + '.png'}
  //                   );
  // }
  //
  // for (let arrayOfTextNumbersIndex = 0; arrayOfTextNumbersIndex < arrayOfTextNumbers.length; arrayOfTextNumbersIndex++)
  // {
  //   let numberImageName = 'number' + arrayOfTextNumbers[arrayOfTextNumbersIndex];
  //   arrayOfImagesToLoad.push(
  //                   {
  //                   imageObjectBinding: window[numberImageName],
  //                   theFile: 'images/Custom Font/pngs/numbers/' + arrayOfTextNumbers[arrayOfTextNumbersIndex]  + '.png'
  //                   });
  // }
  //somewhat standard image loading

  arrayOfImagesToLoad.push({imageObjectBinding: megaSheet, theFile: 'megaSheet.png', loaded: false});
  sheetLookup = [];
  for (var i = 0; i < spritesheetData.length; i++)
  {
    sheetLookup[spritesheetData[i].fileName] = spritesheetData[i].fileIdx;
  }
  //prompt and answer
  // arrayOfImagesToLoad.push({imageObjectBinding: womanImage, theFile: 'images/sprites/PromptsAndAnswers/woman.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: womenImage, theFile: 'images/sprites/PromptsAndAnswers/women.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: manImage, theFile: 'images/sprites/PromptsAndAnswers/man.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: menImage, theFile: 'images/sprites/PromptsAndAnswers/men.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: heImage, theFile: 'images/sprites/PromptsAndAnswers/man.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: sheImage, theFile: 'images/sprites/PromptsAndAnswers/woman.png', loaded: false});


  //cVc shooter section

  //English cVcs
  // arrayOfImagesToLoad.push({imageObjectBinding: catImage, theFile: 'images/sprites/PromptsAndAnswers/cat.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: cotImage, theFile: 'images/sprites/PromptsAndAnswers/cot.png', loaded: false});

  //Mandarin cVcs
  // arrayOfImagesToLoad.push({imageObjectBinding: howAreYouImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/howAreYou.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: howAmIImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/howAmI.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: howAreTheyImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/howAreThey.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: howAreWeImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/howAreWe.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: howIsHeImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/howIsHe.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: howIsSheImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/howIsShe.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: howIsItDoingImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/howIsItDoing.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: imVeryGoodImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/imVeryGood.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: notBadImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/notBad.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: imAlsoVeryGoodImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/imAlsoVeryGood.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: veryNiceToMeetYouImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/niceToMeetYou.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: whereAreYouFromImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/whereAreYouFrom.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: imFromAmericaImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/iAmFromAmerica.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: whatDoYouLikeToDoImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/whatDoYouLikeToDo.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: whatPartOfChinaImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/whatPartOfChina.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: whereDoYouLiveImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/whereDoYouLive.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: iLiveInVietnamImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/iLiveInVietnam.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: meTooImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/meToo.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: iLikeProgrammingImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/iLikeProgramming.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: iAlsoLikeFitnessImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/iAlsoLikeFitness.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: whatIsYourJobImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/whatIsYourJob.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: iAmATeacherImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/iAmATeacher.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: anythingElseImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/somethingElse.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: iLikeWatchingMoviesImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/iLikeWatchingMovies.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: iLikeRockClimbingImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/iLikeRockClimbing.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: whatIsYourNameImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/whatIsYourName.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: myNameIsStevenImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/myNameIsKiiiiiid.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: myNameIsStevenImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/myNameIsSteven.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: howOldAreYouImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/howOldAreYou.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: iAm37YearsOldImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/iAm37.png', loaded: false});

  //end of cVc shooter

  //polite phrases 1
  // arrayOfImagesToLoad.push({imageObjectBinding: pleaseImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/please.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: sorryImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/sorry.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: excuseMeQuestionAskingContextImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/excuseMeQuestionAskingContext.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: waitAMomentImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/oneMoment.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: thankYouImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/thankYou.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: anyTimeImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/anyTime2.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: youreWelcomeImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/youreWelcome.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: excuseMePassingThroughContextImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/excuseMePassingThroughContext.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: iAppreciateThatImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/iAppreciateThat.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: youHaveWorkedHardImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/youHaveWorkedHard.png', loaded: false});

  //polite stuff group 2
  // arrayOfImagesToLoad.push({imageObjectBinding: longTimeNoSeeImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/longTimeNoSee.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: illLetYouGoImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/illLetYouGo.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: pleaseAdviseMeImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/pleaseAdviseMe.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: iRespectfullyWaitImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/iRespectfullyWait.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: myHumbleOpinionImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/myHumbleOpinion.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: excuseMeForSayingThisImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/excuseMeForSayingThis.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: itsOKImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/itsOK.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: itsMyDutyImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/itsMyDuty.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: excuseMyLowSkillImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/excuseMyLowSkill.png', loaded: false});

  //common words
  // arrayOfImagesToLoad.push({imageObjectBinding: mandarinBuyImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/mandarinBuy.png', loaded: false});//'buy' in English
  // arrayOfImagesToLoad.push({imageObjectBinding: mandarinSellImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/mandarinSell.png', loaded: false});//'sell' in English
  //
  // arrayOfImagesToLoad.push({imageObjectBinding: mandarinMomImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/mom.png', loaded: false});//'sell' in English
  // arrayOfImagesToLoad.push({imageObjectBinding: mandarinHorseImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/horse.png', loaded: false});//'sell' in English
  //
  // arrayOfImagesToLoad.push({imageObjectBinding: mandarinThisOneImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/thisOne.png', loaded: false});//'sell' in English
  // arrayOfImagesToLoad.push({imageObjectBinding: mandarinThatOneImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/thatOne.png', loaded: false});//'sell' in English
  // arrayOfImagesToLoad.push({imageObjectBinding: mandarinTheseOnesImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/theseOnes.png', loaded: false});//'sell' in English
  // arrayOfImagesToLoad.push({imageObjectBinding: mandarinThoseOnesImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/thoseOnes.png', loaded: false});//'sell' in English
  //
  // arrayOfImagesToLoad.push({imageObjectBinding: mandarinCouchImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/couch.png', loaded: false});//'sell' in English
  // arrayOfImagesToLoad.push({imageObjectBinding: mandarinTowerImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/tower.png', loaded: false});//'sell' in English
  //
  // arrayOfImagesToLoad.push({imageObjectBinding: sleepImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/sleep.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: dumplingsImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/dumplings.png', loaded: false});
  //
  // arrayOfImagesToLoad.push({imageObjectBinding: hereImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/here.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: thereImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/there.png', loaded: false});
  //
  // arrayOfImagesToLoad.push({imageObjectBinding: calendarImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/blankCalendarPage.png', loaded: false});
  //
  // arrayOfImagesToLoad.push({imageObjectBinding: blackImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/black.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: whiteImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/white.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: grayImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/gray.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: redImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/red.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: brownImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/brown.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: yellowImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/yellow.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: greenImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/green.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: blueImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/blue.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: purpleImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/purple.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: pinkImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/pink.png', loaded: false});
  //
  // arrayOfImagesToLoad.push({imageObjectBinding: beeImage, theFile: 'images/sprites/PromptsAndAnswers/bee.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: flowerImage, theFile: 'images/sprites/PromptsAndAnswers/flower.png', loaded: false});
  //
  // arrayOfImagesToLoad.push({imageObjectBinding: toBeImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/toBeImage.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: ofImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/ofImage.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: notImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/notImage.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: leImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/leImage.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: personImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/personImage.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: mandarinMeMyIImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/mandarinMeMyIImage.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: youImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/you.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: atImage, theFile: 'images/sprites/PromptsAndAnswers/Mandarin/at.png', loaded: false});
  //
  // //central vietnamese section
  // arrayOfImagesToLoad.push({imageObjectBinding: helloManImage, theFile: 'images/sprites/PromptsAndAnswers/CentralVietnamese/helloMan.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: helloWomanImage, theFile: 'images/sprites/PromptsAndAnswers/CentralVietnamese/helloWoman.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: whatsYourNameBrotherImage, theFile: 'images/sprites/PromptsAndAnswers/CentralVietnamese/whatIsYourNameBrother.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: whatsYourNameBabyImage, theFile: 'images/sprites/PromptsAndAnswers/CentralVietnamese/whatIsYourNameBaby.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: whatDoYouLikeToEatImage, theFile: 'images/sprites/PromptsAndAnswers/CentralVietnamese/whatDoYouLikeToEat.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: iLikeToEatVegetarianImage, theFile: 'images/sprites/PromptsAndAnswers/CentralVietnamese/iLikeToEatVegetarian.png', loaded: false});


  // //runner game
  // arrayOfImagesToLoad.push({imageObjectBinding: runnerSunAndSkyBackgroundImage, theFile: 'images/Backgrounds/runnerSunAndSky.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: runnerCloud1, theFile: 'images/Backgrounds/runnerCloud1.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: runnerGrassImage, theFile: 'images/Backgrounds/runnerGrass.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: runnerMountain1Image, theFile: 'images/Backgrounds/runnerMountain1.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: runnerRunning1Image, theFile: 'images/sprites/runner/1edited.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: runnerRunning2Image, theFile: 'images/sprites/runner/2edited.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: runnerRunning3Image, theFile: 'images/sprites/runner/3edited.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: runnerRunning4Image, theFile: 'images/sprites/runner/4edited.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: runnerRunning5Image, theFile: 'images/sprites/runner/5edited.png', loaded: false});
  //
  // arrayOfImagesToLoad.push({imageObjectBinding: runnerJumpingImage, theFile: 'images/sprites/runner/1jump.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: coinImage, theFile: 'images/sprites/runner/Coin.png', loaded: false});

  //snake game
  // arrayOfImagesToLoad.push({imageObjectBinding: snakeGrassBackground, theFile: 'images/Backgrounds/Grass.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: snakeHeadImage, theFile: 'images/sprites/Snake/topSnake.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: snakeMiddleImage, theFile: 'images/sprites/Snake/middleSnake.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: snakeTailImage, theFile: 'images/sprites/Snake/bottomSnake.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: appleImage, theFile: 'images/sprites/Snake/apple.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: appleCoreImage, theFile: 'images/sprites/Snake/appleCore.png', loaded: false});

  // main menu bg
  // arrayOfImagesToLoad.push({imageObjectBinding: menu_borderImage, theFile: 'images/Backgrounds/menu_border.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: scoreboard_overlayImage, theFile: 'images/Backgrounds/scoreboard_overlay.png', loaded: false});

  //lane game
  // arrayOfImagesToLoad.push({imageObjectBinding: laneGrassBackground1, theFile: 'images/Backgrounds/LaneGrass1.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: laneGrassBackground2, theFile: 'images/Backgrounds/LaneGrass2.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: laneRoad1, theFile: 'images/Backgrounds/road1.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: laneRoad2, theFile: 'images/Backgrounds/road2.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: laneCarImage, theFile: 'images/sprites/Lane/car.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: roadDash1, theFile: 'images/Backgrounds/roadDash.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: roadDash2, theFile: 'images/Backgrounds/roadDash2.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: roadDash3, theFile: 'images/Backgrounds/roadDash3.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: gasCanImage, theFile: 'images/sprites/Lane/gasCan.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: billboardImage, theFile: 'images/sprites/Lane/billboard.png', loaded: false});

  //jumper game
  // arrayOfImagesToLoad.push({imageObjectBinding: jumperBackground, theFile: 'images/Backgrounds/editedJumperBackground.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: jumperPlayerFacingRightImage, theFile: 'images/sprites/Jumper/JumperFacingRight.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: jumperPlayerFacingLeftImage, theFile: 'images/sprites/Jumper/JumperFacingLeft.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: jumperGroundParticleImage, theFile: 'images/sprites/Jumper/jumperGroundParticle.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: treasureChestAnswerHolderImage, theFile: 'images/sprites/Jumper/treasureChest.png', loaded: false});

  //finder game
  // arrayOfImagesToLoad.push({imageObjectBinding: finderBackgroundImage, theFile: 'images/Backgrounds/FinderBG.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: upperAndMiddleRoomsImage, theFile: 'images/sprites/Finder/upperAndMiddleRooms.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: bottomRoomImage, theFile: 'images/sprites/Finder/bottomRoom.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: doorImage, theFile: 'images/sprites/Finder/door.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: trophyImage, theFile: 'images/sprites/Rewards/Trophy.png', loaded: false});

  //pass or block
  // arrayOfImagesToLoad.push({imageObjectBinding: volcanoImage, theFile: 'images/Backgrounds/Volcano.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: spaceBackgroundForVolcanoGame, theFile: 'images/Backgrounds/spaceBackgroundForVolcanoGame.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: lavaBall1Image, theFile: 'images/sprites/passBlock/lavaBal.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: lavaBall2Image, theFile: 'images/sprites/passBlock/lavaBall.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: lavaBall3Image, theFile: 'images/sprites/passBlock/lavaBalll.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: lavaParticle1Image, theFile: 'images/sprites/passBlock/lavaParticle1.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: lavaParticle2Image, theFile: 'images/sprites/passBlock/lavaParticle2.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: lavaParticle3Image, theFile: 'images/sprites/passBlock/lavaParticle3.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: lavaParticle4Image, theFile: 'images/sprites/passBlock/lavaParticle4.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: lavaBall1UpsideDownImage, theFile: 'images/sprites/passBlock/lavaBalUpsideDown.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: lavaBall2UpsideDownImage, theFile: 'images/sprites/passBlock/lavaBallUpsideDown.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: lavaBall3UpsideDownImage, theFile: 'images/sprites/passBlock/lavaBalllUpsideDown.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: paddleRockImage, theFile: 'images/sprites/passBlock/volcanicRock.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: gem1Image, theFile: 'images/sprites/passBlock/Gem.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: gem2Image, theFile: 'images/sprites/passBlock/Gem2.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: gem3Image, theFile: 'images/sprites/passBlock/Gem3.png', loaded: false});

  //space shooter game
  // arrayOfImagesToLoad.push({imageObjectBinding: spaceShooterBackgroundImage, theFile: 'images/Backgrounds/SpaceWithJupiter1.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: spaceShooterBackgroundImage2, theFile: 'images/Backgrounds/SpaceWithJupiter2.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: spaceshipImage, theFile: 'images/sprites/spaceShooter/spaceship.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: jupiterImage, theFile: 'images/sprites/spaceShooter/Jupiter.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: spaceRockImage1, theFile: 'images/sprites/spaceShooter/spaceRock.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: spaceRockImage2, theFile: 'images/sprites/spaceShooter/spaceRock2.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: rocketExplosionImage, theFile: 'images/sprites/spaceShooter/rocketExplosion.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: rocketImage, theFile: 'images/sprites/spaceShooter/rocket.png', loaded: false});


  //feedGame
  // arrayOfImagesToLoad.push({imageObjectBinding: feedBackgroundImage, theFile: 'images/Backgrounds/feed.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: cake1, theFile: 'images/sprites/feedGame/cake1.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding:cake2, theFile: 'images/sprites/feedGame/cake2.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: cake3, theFile: 'images/sprites/feedGame/cake3.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: rightPac, theFile: 'images/sprites/feedGame/rightP.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: leftPac, theFile: 'images/sprites/feedGame/leftP.png', loaded: false});

  //flower game
  arrayOfImagesToLoad.push({imageObjectBinding: simpleFlower, theFile: "images/sprites/Flower/10 Second Flower.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: flowerBackground, theFile: "images/Backgrounds/Flower2.png", loaded: false});

  //hello world images
  // arrayOfImagesToLoad.push({imageObjectBinding: russianDollImage1, theFile: "images/sprites/dodgeBall/Player1.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: daytimeImage, theFile: "images/Backgrounds/daytimeBackground.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: russianDollImage4, theFile: "images/sprites/dodgeBall/Player4.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: speechBubbleFromLeftImageA, theFile: "images/sprites/dayTime/speechBubbleFromLeftA.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: speechBubbleFromLeftImageAHighlighted, theFile: "images/sprites/dayTime/speechBubbleFromLeftAHighlighted.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: speechBubbleFromLeftImageB, theFile: "images/sprites/dayTime/speechBubbleFromLeftB.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: speechBubbleFromLeftImageBHighlighted, theFile: "images/sprites/dayTime/speechBubbleFromLeftBHighlighted.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: speechBubbleFromRightImage, theFile: "images/sprites/dayTime/speechBubbleFromRight.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: helloWorldArrowImage, theFile: "images/sprites/dayTime/arrow.png", loaded: false});

  //dodgeball images
  // arrayOfImagesToLoad.push({imageObjectBinding: dodgeBallBackgroundImage, theFile: "images/Backgrounds/dodgeball.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: russianDollImage2, theFile: "images/sprites/dodgeBall/Player2.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: russianDollImage3, theFile: "images/sprites/dodgeBall/Player3.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: russianDollImage5, theFile: "images/sprites/dodgeBall/Player5.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: dodgeballImage, theFile: "images/sprites/dodgeBall/dodgeBall.png", loaded: false});

  //nighttime
  // arrayOfImagesToLoad.push({imageObjectBinding: nighttimeBackgroundImage, theFile: "images/Backgrounds/nighttimeBackground.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: ghostImage1, theFile: "images/sprites/nightTime/Ghost.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: ghostImage2, theFile: "images/sprites/nightTime/ghost2.png", loaded: false});

  //frog crate
  // arrayOfImagesToLoad.push({imageObjectBinding: frogCrateBackground, theFile: "images/Backgrounds/Lake.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: frogInBowlImage, theFile: "images/sprites/frogCrate/FrogInBowl.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: bathStoneImage, theFile: "images/sprites/frogCrate/bathStone.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: frogTongueImage, theFile: "images/sprites/frogCrate/frogTongue.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: flyImage1, theFile: "images/sprites/frogCrate/cartoonFly.png", loaded: false});

  // maze game
  arrayOfImagesToLoad.push({imageObjectBinding: mazeFloor, theFile: "images/Backgrounds/mazefloor.png", loaded: false});
  arrayOfImagesToLoad.push({imageObjectBinding: mazeTopWall, theFile: "images/Backgrounds/topWall.png", loaded: false});
  arrayOfImagesToLoad.push({imageObjectBinding: mazeBottomWall, theFile: "images/Backgrounds/bottomWall.png", loaded: false});
  arrayOfImagesToLoad.push({imageObjectBinding: mazeLeftWall, theFile: "images/Backgrounds/leftWall.png", loaded: false});
  arrayOfImagesToLoad.push({imageObjectBinding: mazeRightWall, theFile: "images/Backgrounds/rightWall.png", loaded: false});
  arrayOfImagesToLoad.push({imageObjectBinding: mazeCharacter, theFile: "images/sprites/Maze/mole.png", loaded: false});
  arrayOfImagesToLoad.push({imageObjectBinding: moleFoodImage, theFile: "images/sprites/Maze/moleFood.png", loaded: false});

  //memory game
  // arrayOfImagesToLoad.push({imageObjectBinding: simon1Image, theFile: "images/sprites/Memory/Simon.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: simonLeftHighlightImage, theFile: "images/sprites/Memory/simonLeftHighlight.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: simonRightHighlightImage, theFile: "images/sprites/Memory/simonRightHighlight.png", loaded: false});


  //frog
  // arrayOfImagesToLoad.push({imageObjectBinding: frogRiverBackgroundImage, theFile: "images/Backgrounds/river.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: frogRiverCharacter, theFile: "images/sprites/frogRiver/Frog.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: lilyImage1, theFile: "images/sprites/frogRiver/lilyImage1.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: lilyImage2, theFile: "images/sprites/frogRiver/lilyImage2.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: lilyImage3, theFile: "images/sprites/frogRiver/lilyImage3.png", loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: lilyImage4, theFile: "images/sprites/frogRiver/lilyImage4.png", loaded: false});

  //particles used by loading and transition screens
  // arrayOfImagesToLoad.push({imageObjectBinding: heartImage, theFile: 'images/sprites/transitions/heart.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: starImage, theFile: 'images/sprites/transitions/star.png', loaded: false});

  //pinata game
  // arrayOfImagesToLoad.push({imageObjectBinding: pinataImage, theFile: 'images/sprites/pinata/pinata.png', loaded: false});

  //flying bee
  // arrayOfImagesToLoad.push({imageObjectBinding: flyingBeeBackgroundImage, theFile: 'images/Backgrounds/flyingBee.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: flyingBeeFacingLeftImage, theFile: 'images/sprites/Flying Bee/Simple Bee Facing Left.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: flyingBeeFacingLeftUpImage, theFile: 'images/sprites/Flying Bee/Simple Bee Facing UpLeft.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: flyingBeeFacingLeftDownImage, theFile: 'images/sprites/Flying Bee/Simple Bee Facing DownLeft.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: flyingBeeFacingRightImage, theFile: 'images/sprites/Flying Bee/Simple Bee Facing Right.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: flyingBeeFacingRightUpImage, theFile: 'images/sprites/Flying Bee/Simple Bee Facing UpRight.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: flyingBeeFacingRightDownImage, theFile: 'images/sprites/Flying Bee/Simple Bee Facing DownRight.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: flyingBeeFacingUpImage, theFile: 'images/sprites/Flying Bee/Simple Bee Facing Up.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: flyingBeeFacingDownImage, theFile: 'images/sprites/Flying Bee/Simple Bee Facing Down.png', loaded: false});

  //fishing game
  // arrayOfImagesToLoad.push({imageObjectBinding: fishingGameWaterBackgroundImage, theFile: 'images/Backgrounds/underwater2.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: fishingGameCharacter, theFile: 'images/sprites/Fishing/person.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: fishingGameBoat, theFile: 'images/sprites/Fishing/boat.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: fishingGameFish1, theFile: 'images/sprites/Fishing/fish.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: fishingGameFish2, theFile: 'images/sprites/Fishing/fish2.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: fishingGameFish3, theFile: 'images/sprites/Fishing/fish3.png', loaded: false});

  //egg catch game
  // arrayOfImagesToLoad.push({imageObjectBinding: eggCatchBackgroundImage, theFile: 'images/Backgrounds/Barn.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: eggImage1, theFile: 'images/sprites/eggCatch/egg.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: eggImage2, theFile: 'images/sprites/eggCatch/egg2.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: basketImage, theFile: 'images/sprites/eggCatch/Basket.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: chickenImage, theFile: 'images/sprites/eggCatch/chicken.png', loaded: false});

  //PenaltyShootout game
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyBall1, theFile: 'images/sprites/Penalty/ball/ball0000.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyBall2, theFile: 'images/sprites/Penalty/ball/ball0001.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyBall3, theFile: 'images/sprites/Penalty/ball/ball0002.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyBall4, theFile: 'images/sprites/Penalty/ball/ball0003.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyBall5, theFile: 'images/sprites/Penalty/ball/ball0004.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyBall6, theFile: 'images/sprites/Penalty/ball/ball0005.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyBall7, theFile: 'images/sprites/Penalty/ball/ball0006.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyBall8, theFile: 'images/sprites/Penalty/ball/ball0007.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyBall9, theFile: 'images/sprites/Penalty/ball/ball0008.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyBall10, theFile: 'images/sprites/Penalty/ball/ball0009.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyBall11, theFile: 'images/sprites/Penalty/ball/ball0010.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyGoal, theFile: 'images/sprites/Penalty/goal.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyGoalkeeper1, theFile: 'images/sprites/Penalty/goalkeeper/1.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyGoalkeeper2, theFile: 'images/sprites/Penalty/goalkeeper/2.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyGoalkeeper3, theFile: 'images/sprites/Penalty/goalkeeper/3.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyGoalkeeper4, theFile: 'images/sprites/Penalty/goalkeeper/4.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyGoalkeeper5, theFile: 'images/sprites/Penalty/goalkeeper/5.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyGoalkeeper6, theFile: 'images/sprites/Penalty/goalkeeper/6.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyGoalkeeper7, theFile: 'images/sprites/Penalty/goalkeeper/7.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyGoalkeeper8, theFile: 'images/sprites/Penalty/goalkeeper/8.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyGoalkeeper9, theFile: 'images/sprites/Penalty/goalkeeper/9.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyGoalkeeper10, theFile: 'images/sprites/Penalty/goalkeeper/10.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyGoalkeeper11, theFile: 'images/sprites/Penalty/goalkeeper/11.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyGoalkeeper12, theFile: 'images/sprites/Penalty/goalkeeper/12.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyGoalkeeper13, theFile: 'images/sprites/Penalty/goalkeeper/13.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: penaltyGoalkeeper14, theFile: 'images/sprites/Penalty/goalkeeper/14.png', loaded: false});


  //whackAnAnswer
  // arrayOfImagesToLoad.push({imageObjectBinding: whackTableSurface, theFile: 'images/Backgrounds/WackTableSurface.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: whackTableBeneathSurface, theFile: 'images/Backgrounds/WackTableBeneathSurface.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: hammerImage, theFile: 'images/sprites/whackAnAnswer/whackHammer.png', loaded: false});

  //spelling bees
  // arrayOfImagesToLoad.push({imageObjectBinding: spellingBeesBackgroundImage, theFile: 'images/Backgrounds/spellingBee.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: beeWithoutStripesImage, theFile: 'images/sprites/SpellingBees/Simple Bee Without Stripes.png', loaded: false});

  //vacuum
  // arrayOfImagesToLoad.push({imageObjectBinding: vacuumBackgroundImage, theFile: 'images/Backgrounds/vacuumBackground.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: vacuumImage, theFile: 'images/sprites/Vacuum/vacuum.png', loaded: false});

  //symbols
  // arrayOfImagesToLoad.push({imageObjectBinding: upArrowImage, theFile: 'images/Custom Font/pngs/symbols/upArrow.png', loaded: false });
  // arrayOfImagesToLoad.push({imageObjectBinding: rightArrowImage, theFile: 'images/Custom Font/pngs/symbols/rightArrow.png', loaded: false });
  // arrayOfImagesToLoad.push({imageObjectBinding: downArrowImage, theFile: 'images/Custom Font/pngs/symbols/downArrow.png', loaded: false });
  // arrayOfImagesToLoad.push({imageObjectBinding: leftArrowImage, theFile: 'images/Custom Font/pngs/symbols/leftArrow.png', loaded: false });
  //
  // arrayOfImagesToLoad.push({imageObjectBinding: symbolTildeImage, theFile: 'images/Custom Font/pngs/symbols/symbol~.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: symbolExclamationPointImage, theFile: 'images/Custom Font/pngs/symbols/symbol!.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: symbolEmailAtImage, theFile: 'images/Custom Font/pngs/symbols/symbol@.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: symbolDollarSignImage, theFile: 'images/Custom Font/pngs/symbols/symbol$.png', loaded: false});
  //arrayOfImagesToLoad.push({imageObjectBinding: symbolPercentImage, theFile: 'images/Custom Font/pngs/symbols/symbol%.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: symbolEqualsImage, theFile: 'images/Custom Font/pngs/symbols/symbol=.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: symbolPeriodImage, theFile: 'images/Custom Font/pngs/symbols/symbol..png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: symbolCommaImage, theFile: 'images/Custom Font/pngs/symbols/symbol,.png', loaded: false});
  //
  // arrayOfImagesToLoad.push({imageObjectBinding: symbolHashImage, theFile: 'images/Custom Font/pngs/symbols/symbolHash.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: symbolQuestionMarkImage, theFile: 'images/Custom Font/pngs/symbols/symbolQuestionMark.png', loaded: false});

  // arrayOfImagesToLoad.push({imageObjectBinding: placeholderPlayButtonImage, theFile: 'images/placeholderPlayButtonImage.png', loaded: false});

  // bubble wrap game
  // arrayOfImagesToLoad.push({imageObjectBinding: bubbleWrapBG, theFile: 'images/Backgrounds/bubbleWrapBG.jpg', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: bubbleWrapSpritesheet, theFile: 'images/sprites/bubbleWrap/bubbleWrapSpritesheet.png', loaded: false});
  //arrayOfImagesToLoad.push({imageObjectBinding: balloonPopBG, theFile: 'images/Backgrounds/balloonPopBG.jpg', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: balloonPopSpritesheet, theFile: 'images/sprites/balloonPop/balloonPopSpritesheet.png', loaded: false});

  // arrayOfImagesToLoad.push({imageObjectBinding: checkBoxImage, theFile: 'images/checkBox.png', loaded: false});
  // arrayOfImagesToLoad.push({imageObjectBinding: checkForCheckBoxImage, theFile: 'images/checkForCheckBox.png', loaded: false});

  numberOfImagesToLoad = arrayOfImagesToLoad.length;

  for (let imageToLoadIndex = 0; imageToLoadIndex < arrayOfImagesToLoad.length; imageToLoadIndex++)
  {
	  beginLoadingImage(arrayOfImagesToLoad[imageToLoadIndex].imageObjectBinding,
    encodeURI(arrayOfImagesToLoad[imageToLoadIndex].theFile),
    imageToLoadIndex);
	}

}

function beginLoadingImage(imageVariable, fileName, imageToLoadIndex) {
  imageVariable.src = fileName;
	imageVariable.onload = countLoadedImageAndLaunchIfReady(fileName, imageToLoadIndex);
}

var gameIsLoadingBoolean = true;

function countLoadedImageAndLaunchIfReady(fileName, imageToLoadIndex)
{
  arrayOfImagesToLoad[imageToLoadIndex].loaded = true;
  numberOfImagesToLoad--;
  if (numberOfImagesToLoad === 0)
  {

    /*
    const FAST_DEBUG_MODE = true; // skip entire menu and immeditately play a game! use only for debugging!
    if (FAST_DEBUG_MODE) {

        playerShouldBePlayingPinata = true;
        playerShouldSeeTitleScreen = false;
        fullGameStateMachine.playingAGameState = true;
        levelIsTransitioning = false;
        pinataGame.init();
        //return;
    }
    */


    loadingAndSplashScreen.promptPlayerForClickAfterLoading();// in dualLoadingSplashScreen.js
    fullGameStateMachine.loadCurrentState(fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.clickToLaunch);
  }

}

function checkForUnloadedImages()
{
  
  for (let arrayOfImagesToLoadIndex = 0; arrayOfImagesToLoadIndex < arrayOfImagesToLoad.length; arrayOfImagesToLoadIndex++)
  {
    if (arrayOfImagesToLoad[arrayOfImagesToLoadIndex].loaded === false)
    {
      console.log(arrayOfImagesToLoad[arrayOfImagesToLoadIndex].theFile)
    }
  }
}
const GAME_SPACE_SHOOTER = 7;

var fancyticks = 0;
var fancysprite = [];
var fancycount = 100;
var fancydecay = 0.02;
var fancymaxspeed = -12;
var fancysize = 100;
var showingCredits = false;

function fancyBG(bottomImages=["images\\sprites\\transitions\\heart.png"],topImages=["images\\sprites\\transitions\\star.png"]) {
    var i = 0;

    if (!fancysprite.length) {
        for (i=0; i<fancycount; i++) {
            fancysprite[i] = { x:0,y:-9999999,a:0.5+Math.random()*0.5,s:1,a:0,i:bottomImages[0] };
        }
    }

    for (i=0; i<fancycount; i++) {
        if (fancysprite[i].a<fancydecay) {
            // respawn
            fancysprite[i].x = Math.random() * gameCanvas.width - 64;
            fancysprite[i].a = 0.5+Math.random()*0.5;
            if (Math.random()>0.5) {
                // bottom up
                fancysprite[i].y = gameCanvas.height + 64 + Math.random()*128;
                fancysprite[i].s = Math.random() * fancymaxspeed;
                fancysprite[i].i = bottomImages[Math.floor(Math.random() * bottomImages.length)];

            } else {
                // top down
                fancysprite[i].y = -256-Math.random()*128;
                fancysprite[i].s = Math.random() * fancymaxspeed * -1;
                fancysprite[i].i = topImages[Math.floor(Math.random() * topImages.length)];
            }
        }

        fancysprite[i].a -= fancydecay;
        fancysprite[i].y += fancysprite[i].s;

        gameCanvasContext.globalAlpha = fancysprite[i].a;

        drawFromSheetSimple(
            fancysprite[i].i,
            fancysprite[i].x,fancysprite[i].y,
            fancysize,fancysize); // scaled down
    }

    gameCanvasContext.globalAlpha = 1;
}

function TitleScreenClass()
{
  this.cellXTopLeftCoordinate = 0;
  this.cellYTopLeftCoordinate = 0;

  this.drawHeader = function()
  {
    customFontFillText(['Bundle of 30 Language Games'], 40, 20, 50,25);
    customFontFillText(['Choose A Game ', symbolExclamationPointImage], 50, 20, 175,100);

    // which image to use? path can be browsed from imageList.js!
    // drawFromSheet("images\\sprites\\PromptsAndAnswers\\Mandarin\\excuseMePassingThroughContext.png",
    //         inputManager.mouseCoordinates.x,inputManager.mouseCoordinates.y, // where to draw?
    //         150,150, // what dimensions?
    //         true); // flip horizontally?
  }

  this.drawCellsAndCheckForHighlighting = function()
  {
    //basic cell outlines
    gameCanvasContext.strokeStyle = 'white';
    for (let cellRowIndex = 0; cellRowIndex < 5; cellRowIndex++)
    {
      for (let cellColumnIndex = 0; cellColumnIndex < 6; cellColumnIndex++)
      {
        this.cellXTopLeftCoordinate = cellColumnIndex*100 + 20;
        this.cellYTopLeftCoordinate = cellRowIndex*100 + 150;
        gameCanvasContext.strokeRect(this.cellXTopLeftCoordinate,this.cellYTopLeftCoordinate, 100,100);
        //highlight cell if the mouse is inside it
        if (inputManager.mouseCoordinates.x > this.cellXTopLeftCoordinate &&
            inputManager.mouseCoordinates.x < this.cellXTopLeftCoordinate + 100 &&
            inputManager.mouseCoordinates.y > this.cellYTopLeftCoordinate &&
            inputManager.mouseCoordinates.y < this.cellYTopLeftCoordinate + 100)
            {
              gameCanvasContext.fillStyle = 'white';
              gameCanvasContext.fillRect(this.cellXTopLeftCoordinate,this.cellYTopLeftCoordinate, 100,100);
            }
      }
    }
  };
  /* NOTE: this is a list of game names for unimplemented games, when implementing a game,
	 move the corresponding data to its titleScreenData attribute */
  const GAME_NAMES = [
    // [{name: "Finder", fontSize: 27, spacing: 15, x: 420, y: 185}],//5
    //[{name: "Air", fontSize: 27, spacing: 15, x: 445, y: 265}, {name: "Grab", fontSize: 27, spacing: 15, x: 437, y: 300}],//11
    //[{name: "Frogger", fontSize: 27, spacing: 13, x: 520, y: 285}],//12
    // [{name: "Memory", fontSize: 27, spacing: 15, x: 122, y: 385}],//14
    // [{name: "Penalty", fontSize: 17, spacing: 12, x: 325, y: 375},{name: "Shootout", fontSize: 17, spacing: 12, x: 324, y: 405}],//16 // TODO: game is not implemented yet. Will remove comments when it is implemented.
    //[{name: "Balloon", fontSize: 17, spacing: 12, x: 425, y: 375},{name: "Pop", fontSize: 17, spacing: 12, x: 450, y: 405}],
    // [{name: "Daytime", fontSize: 24, spacing: 12, x: 525, y: 380}],
    // [{name: "Dodgeball", fontSize: 20, spacing: 10, x: 22, y: 480}],
    //[{name: "Unscrambler", fontSize: 19, spacing: 9, x: 122, y: 480}],
    // [{name: "Nighttime", fontSize: 20, spacing: 10, x: 222, y: 480}],
    // [{name: "Frog", fontSize: 25, spacing: 15, x: 330, y: 465},{name: "Crate", fontSize: 25, spacing: 10, x: 330, y: 505}],
    // [{name: "Flying", fontSize: 25, spacing: 15, x: 420, y: 465},{name: "Bee", fontSize: 25, spacing: 10, x: 440, y: 505}],
    //[{name: "Fishing", fontSize: 25, spacing: 12, x: 520, y: 480}],
    // [{name: "Egg", fontSize: 25, spacing: 12, x: 45, y: 565},{name: "Catch", fontSize: 25, spacing: 10, x: 37, y: 605}],
    // [{name: "Whack", fontSize: 25, spacing: 12, x: 235, y: 550},{name: "a", fontSize: 25, spacing: 10, x: 260, y: 580},{name: "Letter", fontSize: 25, spacing: 10, x: 235, y: 615}],
    // [{name: "Vacuum", fontSize: 25, spacing: 12, x: 327, y: 580}],
    // [{name: 'Spelling', fontSize: 25, spacing: 12, x:418, y: 560},{name: 'Bees', fontSize: 25, spacing: 12, x:436, y: 598}]
    ];

  this.drawGameNames = function()
  {
    gameList.forEach(function (game) {
	  if (game !== null) {
		//console.log("Adding game to title screen: " + game.name);
		const nameDataArray = game.titleScreenData;
  		nameDataArray.forEach(function(nameData) {
  		  customFontFillText(nameData.name, nameData.fontSize, nameData.spacing, nameData.x, nameData.y);
  		});
	  }
    });
	// NOTE: old code kept for drawing names of unavailable games
	GAME_NAMES.forEach(function (nameDataArray) {
  	  nameDataArray.forEach(function(nameData) {
  		customFontFillText(nameData.name, nameData.fontSize, nameData.spacing, nameData.x, nameData.y);
  	  });
    });
  }

  var bgrainbow;
  function generateBGColours()
  {
    var size = 32;
    bgrainbow = new Array(size);
    for (var i = 0; i < size; i++) {
        var red = sin_to_hex(i, 0 * Math.PI * 2 / 3); // 0   deg
        var blue = sin_to_hex(i, 1 * Math.PI * 2 / 3); // 120 deg
        var green = sin_to_hex(i, 2 * Math.PI * 2 / 3); // 240 deg
        bgrainbow[i] = "#" + red + green + blue;
    }
    function sin_to_hex(i, phase) {
        var sin = Math.sin(Math.PI / size * 2 * i + phase);
        var int = Math.floor(sin * 127) + 128;
        var hex = int.toString(16);
        return hex.length === 1 ? "0" + hex : hex;
    }
  }

  var bgcounter = 0;
  this.drawBackground = function()
  {
    gameCanvasContext.fillStyle = 'orange';
    gameCanvasContext.fillRect(0,0, gameCanvas.width,gameCanvas.height);

    // a fun scrolling rainbow
    bgcounter = Math.cos(performance.now()/2500) * 450 + 450;
    if (!bgrainbow) generateBGColours();
    for (i = 0; i < bgrainbow.length; i++) {
        gameCanvasContext.fillStyle = bgrainbow[i];
        gameCanvasContext.beginPath();
        var yy = 900 + (i * 50) - bgcounter;
        gameCanvasContext.arc(320, yy, 1000, 0, 7);
        gameCanvasContext.fill();
    }

    // a cute little picture frame
    drawFromSheetSimple("images\\Backgrounds\\menu_border.png",0,0);
    //gameCanvasContext.drawImage("images\\Backgrounds\\menu_border.png",0,0);
}

  this.draw = function()
  {
    if(showingCredits) {
      gameCanvasContext.fillStyle="black";
      gameCanvasContext.fillRect(0,0,gameCanvas.width,gameCanvas.height);
      drawCredits();
      return;
    }
    this.drawBackground();
    this.drawHeader();
    this.drawCellsAndCheckForHighlighting();
    this.drawGameNames();
    customFontFillText("Click down here to see credits", 20, 12, 130, gameCanvas.height-39);
  }

  this.gameNum = -1;

  this.handleGameCellClicks = function()
  {
    if(showingCredits) {
      showingCredits = false;
      return;
    }
    // TODO: all the x,y,w,h are stored in GAME_NAMES
    // we could use that data and avoid the giant IF and hardcoded values here

    //console.log("MAIN MENU mouse pos is "+inputManager.mouseCoordinates.x+"," +inputManager.mouseCoordinates.y);

    var mouseCol = Math.floor((inputManager.mouseCoordinates.x - 20)/100);
    var mouseRow = Math.floor((inputManager.mouseCoordinates.y - 150)/100);

    if(mouseRow>=5) {
      showingCredits = true;
      return;
    }

    if (mouseCol >= 0 && mouseCol < 6 && mouseRow >= 0 && mouseRow < 5)
    {
      this.gameNum = mouseCol + mouseRow *6;
    }
    //console.log('this.gameNum: ' + this.gameNum);
    //console.log('gameList[this.gameNum].name: ' + gameList[this.gameNum].name);
    gameClassManager.loadCurrentGame(gameList[this.gameNum]);
    //console.log('gameClassManager.currentGame.name: ' + gameClassManager.currentGame.name);

    // FIXME why is this undefined sometimes?
    if (typeof gameClassManager.currentGame == "undefined") {
        //console.log("currentGame is null - ignoring click. this.gameNum="+this.gameNum);
        return;
    }

    // any game
    if (inputManager.mouseCoordinates.x > 20 && inputManager.mouseCoordinates.x < 620 &&
        inputManager.mouseCoordinates.y > 150 && inputManager.mouseCoordinates.y < 650)
        {
          genAudio.playClick();
          if (gameClassManager.currentGame.skipCustomizationScreens) {

            //console.log("skipping customization screens for this game");
            // the bubble popping games are only A-Z seeking games
            // and do not use the prompts and answers databases

            // same as LanguageSelectScreen.startGame() function
            gameClassManager.initializeCurrentGame();
            //promptsAndAnswersManager.setOrResetPromptsAndAnswers();
            miniGameTransitioner.initialize();
            fullGameStateMachine.loadCurrentState(fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.transitionToMiniGame);
            genAudio.playTransitionMusic();

          } else {

            // start all other games the normal way: with mode select GUIs first
            fullGameStateMachine.loadCurrentState(fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.modeSelectScreen);

          }
        }
  }


}

let titleScreen = new TitleScreenClass();

/*//1st row
//snake
else if (inputManager.mouseCoordinates.x > 20 && inputManager.mouseCoordinates.x < 120 &&
         inputManager.mouseCoordinates.y > 250 && inputManager.mouseCoordinates.y < 350)
    {
      spaceShooterGame.startPlaying();
      playerShouldSeeTitleScreen = false;
      fullGameStateMachine.playingAGameState = true;
      levelIsTransitioning = true;
    }
else if (inputManager.mouseCoordinates.x > 220 && inputManager.mouseCoordinates.x < 320 &&
     inputManager.mouseCoordinates.y > 250 && inputManager.mouseCoordinates.y < 350)
{
  // BUBBLE WRAP:
  else if (inputManager.mouseCoordinates.x > 120 && inputManager.mouseCoordinates.x < 220 &&
    inputManager.mouseCoordinates.y > 550 && inputManager.mouseCoordinates.y < 650)
{
  console.log("Clicked Bubble Wrap Button");
    gameClassManager.loadCurrentGame(bubbleWrapGame);

}
  // PINATA GAME:
  else if (inputManager.mouseCoordinates.x > 320 && inputManager.mouseCoordinates.x < 420 &&
      inputManager.mouseCoordinates.y > 250 && inputManager.mouseCoordinates.y < 350)
  {
    console.log("Clicked Pinata Button");
    gameClassManager.loadCurrentGame(pinataGame);
    gameInterval.reset(PINATAFRAMERATE);
  // do we still need to set these?
  playerShouldSeeTitleScreen = false;
  fullGameStateMachine.playingAGameState = true;
      levelIsTransitioning = true;
      if (gameIsOnAServerAndCanUseWebAudioAPI)
      {
          backgroundMusicBufferSource = webAudioAPIContext.createBufferSource();
          currentBackgroundMusic = backgroundMusicBufferSource;
          // FIXME: change to a new song for pinata
          loadWebAudioAPISound('audio/backgroundTracks/runnerBackground.mp3', backgroundMusicBufferSource);
          backgroundMusicBufferSource.loop = true;
          backgroundMusicBufferSource.loopStart = 6.9;
          backgroundMusicBufferSource.loopEnd = 1;
      }

  }
  // FIXME: this may trigger when you click the background and never started a game?
  */

var creditsList = [
" ",
"                                          CLICK ANYWHERE TO CLOSE AND RETURN TO THE GAME",
" ",
"Stebs: Project lead, majority of cored functionality shared between minigames, clue images+recordings, language data set authoring, file count reduction for itch, many of the minigames not mentioned below, foreign language character support, additional font, many small fixes to minigames, additional sounds and art",
"Ian Cherabier: Maze game and fishing game (implementation and art), collision manager, dynamic bounding boxes, game transition debugging, answer positions, various fixes (including for snake game, frog river, egg catch, space shooter, also for language selection screen), replay prompt functionality",
"Vaan Hope Khani: Majority of game art sprites (including coins, letters, characters, bills, food), many backgrounds, assorted sounds (including bomb, dodgeball, running), some art fixes",
"Michael \"Misha\" Fewkes: Audio engine code, sounds (UI, positive/negative feedback, correct/incorrect answers, back, radio select, snake game sound, bird, duck, fade, space shooter), music (runner, maze, title, frog river, jumper, air grab, space shooter, lane, transition songs, several additional songs)",
"Christer \"McFunkypants\" Kaitila: Several games with related implementation and art+audio (pinata, bubble wrap, balloon pop), main menu and transition animated background, title and transition particles, custom font, stats display gui improvements, letter voiceover recordings",
"Gonzalo Delgado: Runner game, lane game, snake game related fixes, code architecture/organization improvements, loading improvements, cross-platform fixes",
"Brian Nielsen: Bird game updates, flower game, bee and flower art+audio,  question/answer pair authoring text tool (based on foundation by H from Warped Radar)",
"Barış Köklü: Penalty shot game (including animation)",
"Michelly Oliveira: Image loading fix, game change fix, cross-platform support improvement, audio debugging",
"H Trayford: Pair authoring text tool foundation",
"Chris DeLeon: Minor debugging, spritesheet atlas script, credits",
"Lexi \"LexiGameDev\" Kunkel: First practice commit!",
  " ",
  "Game made in HomeTeam GameDev, apply to join us at",
  "HomeTeamGameDev.com"
];

function lineWrapCredits() { // note: gets calling immediately after definition!
  const newCut = [];
  var maxLineChar = 127;
  var findEnd;
  for(var i=0;i<creditsList.length;i++) {
    while(creditsList[i].length > 0) {
      findEnd = maxLineChar;
      if(creditsList[i].length > maxLineChar) {
        for(var ii=findEnd;ii>0;ii--) {
          if(creditsList[i].charAt(ii) == " ") {
            findEnd=ii;
            break;
          }
        }
      }
      newCut.push(creditsList[i].substring(0, findEnd));
      creditsList[i] = creditsList[i].substring(findEnd, creditsList[i].length);
    }
  }

  const newerCut = [];
  for(let i = 0; i < newCut.length; i++) {
    const currentLine = newCut[i];
    for(let j = 0; j < currentLine.length; j++) {
      const aChar = currentLine[j];
      if(aChar === ":") {
        if(i !== 0) {
          newerCut.push("\n");
        }

        newerCut.push(currentLine.substring(0, j + 1));
        newerCut.push(currentLine.substring(j + 2, currentLine.length));
        break;
      } else if(j === currentLine.length - 1) {
        if((i === 0) || (i >= newCut.length - 2)) {
          newerCut.push(currentLine);
        } else {
          newerCut.push(currentLine.substring(1, currentLine.length));
        }
      }
    }
  }

  creditsList = newerCut;
}
lineWrapCredits(); // note: calling immediately as part of init, outside the function

const drawCredits = function() {
  var creditPosY = 10;
  var leftX = 20;
  var wasFont = gameCanvasContext.font;
  var wasAlign = gameCanvasContext.textAlign;

    for(var i=0; i<creditsList.length; i++) {
      var yPos = creditPosY + i * 12;
      //if (200 < yPos && yPos < 600) {
        if((i > 0) && (creditsList[i - 1] === "\n")) {
          gameCanvasContext.font= "13px Arial";
          gameCanvasContext.fillStyle="white";
          gameCanvasContext.textAlign="left";
          gameCanvasContext.fillText(creditsList[i],leftX,yPos);
        } else if(i === creditsList.length - 2) {
          gameCanvasContext.font= "11px Arial";
          gameCanvasContext.fillStyle="white";
          gameCanvasContext.textAlign="center";
          gameCanvasContext.fillText(creditsList[i],gameCanvas.width/2,yPos);
        } else if(i === creditsList.length - 1) {
          gameCanvasContext.font= "11px Arial";
          gameCanvasContext.fillStyle="#54b0bd";
          gameCanvasContext.textAlign="center";
          gameCanvasContext.fillText(creditsList[i],gameCanvas.width/2,yPos);
        } else {
          gameCanvasContext.font= "11px Arial";
          gameCanvasContext.fillStyle="white";
          gameCanvasContext.textAlign="left";
          gameCanvasContext.fillText(creditsList[i],leftX,yPos);
        }
      // }
    }
    gameCanvasContext.font= wasFont;
    gameCanvasContext.textAlign=wasAlign; // cleaning up after itself
  };
function ModeSelectScreen()
{
  this.height = gameCanvas.height * 0.666;
  this.name = 'mode select screen';
  this.arrayOfModeSelectBoxes = [];

  this.singlePlayerEndlessModeBox = undefined;
  this.singlePlayerRandomModeBox = undefined;
  this.twoPlayerRandomModeBox = undefined;

  this.initializeBoxes = function()
  {
    this.singlePlayerEndlessModeBox = new ModeSelectBox(0,'Single Player Endless',SINGLE_PLAYER_ENDLESS, true);
    this.singlePlayerRandomModeBox = new ModeSelectBox(1,'Single Player Random',SINGLE_PLAYER_RANDOM, false);
    this.twoPlayerRandomModeBox = new ModeSelectBox(2,'Two Player Random',TWO_PLAYER_RANDOM, false);
  }

  this.initializeArrayOfModeSelectBoxes = function()
  {
    this.arrayOfModeSelectBoxes.push(this.singlePlayerEndlessModeBox);
    this.arrayOfModeSelectBoxes.push(this.singlePlayerRandomModeBox);
    this.arrayOfModeSelectBoxes.push(this.twoPlayerRandomModeBox);
  }

  this.initialize = function()
  {
    this.initializeBoxes();
    this.initializeArrayOfModeSelectBoxes();
  }

  this.drawRadioButtons = function()
  {
    for (let radioButtonIndex = 0; radioButtonIndex < this.arrayOfModeSelectBoxes.length; radioButtonIndex++)
    {
      this.arrayOfModeSelectBoxes[radioButtonIndex].draw();
    }//end of for loop
  }//end of draw radio buttons

  this.handleRadioButtonClicks = function()
  {

    for (let radioButtonIndex = 0; radioButtonIndex < this.arrayOfModeSelectBoxes.length; radioButtonIndex++)
    {
      let mouseX = inputManager.mouseCoordinates.x;
      let mouseY = inputManager.mouseCoordinates.y;
      let radioButtonX = this.arrayOfModeSelectBoxes[radioButtonIndex].radioButtonX;
      let radioButtonY = this.arrayOfModeSelectBoxes[radioButtonIndex].radioButtonY;
      let xDistanceSquared = (mouseX - radioButtonX)*(mouseX - radioButtonX);
      let yDistanceSquared = (mouseY - radioButtonY)*(mouseY - radioButtonY);
      let radioButtonRadius = this.arrayOfModeSelectBoxes[radioButtonIndex].radioButtonRadius;

      if ( Math.sqrt(xDistanceSquared + yDistanceSquared) < radioButtonRadius )
        {
          this.arrayOfModeSelectBoxes[radioButtonIndex].selectedStatus = true;
          genAudio.playClick();
          nextGame = this.arrayOfModeSelectBoxes[radioButtonIndex].mode;
          //console.log('nextGame: ' + nextGame);
          for (let reiterativeArrayIndex = 0; reiterativeArrayIndex < this.arrayOfModeSelectBoxes.length; reiterativeArrayIndex++)
          {
            if (reiterativeArrayIndex !== radioButtonIndex)
            {
              this.arrayOfModeSelectBoxes[reiterativeArrayIndex].selectedStatus = false;
            }
          }
        }
    }
  }

  this.drawNextButton = function()
  {
    let width = gameCanvas.width/4;
    let height = gameCanvas.height/7;
    let startingX = gameCanvas.width/2 - (width/2);
    let startingY = gameCanvas.height - (height*1.5);

    gameCanvasContext.strokeStyle = 'black';
    gameCanvasContext.strokeRect(startingX,startingY, width,height);
    customFontFillText('Next', 30, 15, startingX + width/4,startingY + height/4);
  }

  this.handleNextButtonClick = function()
  {
    let width = gameCanvas.width/4;
    let height = gameCanvas.height/7;
    let startingX = gameCanvas.width/2 - (width/2);
    let startingY = gameCanvas.height - (height*1.5);

    if (inputManager.mouseCoordinates.x > startingX && inputManager.mouseCoordinates.x < startingX + width &&
        inputManager.mouseCoordinates.y > startingY && inputManager.mouseCoordinates.y < startingY + height)
        {
          genAudio.playClick();
          fullGameStateMachine.loadCurrentState(fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.languageSelectionScreen);
        }

    for (let i = 0; i < this.arrayOfModeSelectBoxes.length; i++)
    {
      if (this.arrayOfModeSelectBoxes[i].selectedStatus === true)
      {
        console.log(this.arrayOfModeSelectBoxes[i].name + ' mode selected');
      }
    }
  }



  this.drawBackground = function()
  {
    gameCanvasContext.fillStyle = 'orange';
    gameCanvasContext.fillRect(0,0, gameCanvas.width,gameCanvas.height);
    fancyBG();
  }

  this.draw = function()
  {
    //console.log('inside mode select screen draw');
    this.drawBackground();
    this.drawRadioButtons();
    this.drawNextButton();
  }
}//end of mode select screen

let modeSelectScreen;
function ModeSelectBox(arrayIndex, name, mode, selectedStatus)
{
  this.arrayIndex = arrayIndex;
  this.name = name;
  this.mode = mode;

  this.selectedStatus = selectedStatus;

  this.radioButtonX = gameCanvas.width/8;
  this.radioButtonY = (arrayIndex*modeSelectScreen.height/3) + gameCanvas.height/8;
  this.radioButtonRadius = gameCanvas.width/25;
  this.radioButtonStartingAngle = 0;
  this.radioButtonEndingAngle = 2 * Math.PI;

  this.drawEmptyRadioButton = function(radioButtonIndex)
  {
    gameCanvasContext.fillStyle = 'black';
    gameCanvasContext.beginPath();
    gameCanvasContext.arc(this.radioButtonX,this.radioButtonY, this.radioButtonRadius,
                          this.radioButtonStartingAngle,this.radioButtonEndingAngle);
    gameCanvasContext.stroke();
  }

  this.drawFilledRadioButton = function()
  {
    gameCanvasContext.fillStyle = 'black';
    gameCanvasContext.beginPath();
    gameCanvasContext.arc(this.radioButtonX,this.radioButtonY, this.radioButtonRadius,
                          this.radioButtonStartingAngle,this.radioButtonEndingAngle);
    gameCanvasContext.fill();
  }

  this.drawText = function()
  {
    customFontFillText(this.name, 40, 20, this.radioButtonX + gameCanvas.width/10,this.radioButtonY - modeSelectScreen.height/20);
  }

  this.draw = function()
  {
    if (this.selectedStatus === true)
    {
      this.drawFilledRadioButton();
    }
    else
    {
      this.drawEmptyRadioButton();
    }
    this.drawText();
  }
}
function LanguageSelectionScreen()
{
  this.draw = function()
  {
    //console.log('inside draw language select screen');
    this.drawBackground();
    this.drawHeader();
    this.drawCellsAndCheckForHighlighting();
    this.drawLanguageNames();
    this.drawPlayButton();
  }

  this.drawBackground = function()
  {
    gameCanvasContext.fillStyle = 'orange';
    gameCanvasContext.fillRect(0,0, gameCanvas.width,gameCanvas.height);
    fancyBG();
  }

  this.drawHeader = function()
  {
    customFontFillText('Choose A Language', 50, 25, gameCanvas.width/2 - 150,50);
  }

  this.drawCellsAndCheckForHighlighting = function()
  {
    //basic cell outlines
    gameCanvasContext.strokeStyle = 'white';
    for (let cellRowIndex = 0; cellRowIndex < 1; cellRowIndex++)
    {
      for (let cellColumnIndex = 0; cellColumnIndex < 3; cellColumnIndex++)
      {
        this.cellXTopLeftCoordinate = cellColumnIndex*100 + 20;
        this.cellYTopLeftCoordinate = cellRowIndex*100 + 150;
        gameCanvasContext.strokeRect(this.cellXTopLeftCoordinate,this.cellYTopLeftCoordinate, 100,100);
        //highlight cell if the mouse is inside it
        if (inputManager.mouseCoordinates.x > this.cellXTopLeftCoordinate &&
            inputManager.mouseCoordinates.x < this.cellXTopLeftCoordinate + 100 &&
            inputManager.mouseCoordinates.y > this.cellYTopLeftCoordinate &&
            inputManager.mouseCoordinates.y < this.cellYTopLeftCoordinate + 100)
            {
              gameCanvasContext.fillStyle = 'white';
              gameCanvasContext.fillRect(this.cellXTopLeftCoordinate,this.cellYTopLeftCoordinate, 100,100);
            }
      }
    }
  };

  this.drawLanguageNames = function()
  {
    customFontFillText('English', 20,12, 30,180);

    customFontFillText('Simplified', 15,9, 125,165);
    customFontFillText('Chinese', 20,12, 130,195);

    customFontFillText('Central', 20,12, 230,165);
    customFontFillText('Vietnamese', 15,9, 225,200);
  }

  this.drawPlayButton = function()
  {
    let width = gameCanvas.width/4;
    let height = gameCanvas.height/7;
    let startingX = gameCanvas.width/2 - (width/2);
    let startingY = gameCanvas.height - (height*1.5);

    gameCanvasContext.strokeStyle = 'black';
    gameCanvasContext.strokeRect(startingX,startingY, width,height);
    customFontFillText('Customize', 30, 15, startingX + width/32,startingY + 35);
  }

  this.startGame = function()
  {
    genAudio.playTransitionMusic();
    gameClassManager.initializeCurrentGame();
    promptsAndAnswersManager.setOrResetPromptsAndAnswers();
    // if (gameClassManager.currentGame) console.log("gameClassManager.currentGame: " + gameClassManager.currentGame.name);
    miniGameTransitioner.initialize();
    fullGameStateMachine.loadCurrentState(fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.transitionToMiniGame);

  }

  this.goToLanguageCustomizationScreen = function()
  {
    if (this.languageNum === 0)
    {
      fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.englishCustomizationScreen.associatedObject = englishCustomizationScreen;
      fullGameStateMachine.loadCurrentState(fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.englishCustomizationScreen);
      promptsAndAnswersManager.assignCurrentLanguageArray();
    }
    else if (this.languageNum === 1)
    {
      fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.mandarinCustomizationScreen.associatedObject = mandarinCustomizationScreen;
      fullGameStateMachine.loadCurrentState(fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.mandarinCustomizationScreen);
      promptsAndAnswersManager.assignCurrentLanguageArray();
    }
    else if (this.languageNum === 2)
    {
      promptsAndAnswersManager.assignCurrentLanguageArray();
      this.startGame();
    }
  }

  this.handlePlayButtonClick = function()
  {
    let width = gameCanvas.width/4;
    let height = gameCanvas.height/7;
    let startingX = gameCanvas.width/2 - (width/2);
    let startingY = gameCanvas.height - (height*1.5);

    if (inputManager.mouseCoordinates.x > startingX && inputManager.mouseCoordinates.x < startingX + width &&
        inputManager.mouseCoordinates.y > startingY && inputManager.mouseCoordinates.y < startingY + height &&
        this.languageNum >= 0)
        {

          genAudio.playClick();

          if (isLanguageCustomizationActive)
          {

            this.goToLanguageCustomizationScreen();
          }
          else
          {

            this.startGame();
          }
        }
  }

  this.languageNum = -1;

  this.handleLanguageCellClicks = function()
  {

    // TODO: all the x,y,w,h are stored in GAME_NAMES
    // we could use that data and avoid the giant IF and hardcoded values here

    //console.log("MAIN MENU mouse pos is "+inputManager.mouseCoordinates.x+"," +inputManager.mouseCoordinates.y);

    var mouseCol = Math.floor((inputManager.mouseCoordinates.x - 20)/100);
    var mouseRow = Math.floor((inputManager.mouseCoordinates.y - 150)/100);
    if (mouseCol >= 0 && mouseCol < 3 && mouseRow >= 0 && mouseRow < 1)
    {
      this.languageNum = mouseCol + mouseRow *6;
      //promptsAndAnswersManager.assignCurrentLanguageArray();
      genAudio.playClick();
    }
  }
}

let languageSelectionScreen;
let isLanguageCustomizationActive = true;

function LanguageCustomizationScreen(nameString, specificParentLanguageObject)
{
  this.name = nameString;
  this.parentLanguageObject = specificParentLanguageObject;

  this.x = 0;
  this.y = 0;

  this.width = gameCanvas.width;
  this.height = gameCanvas.height;

  this.columnWidth = gameCanvas.width/3;
  this.rowHeight = gameCanvas.height/20;

  this.currentColumnIndex = 0;
  this.currentRowIndex = 0;

  this.arrayOfPromptAndAnswerGroupCheckBoxes = [];
  this.arrayOfDivs = [];

  this.arrayOfPages = [];
  this.currentPageIndexForInitialization = 0;
  this.currentPageIndex = 0;

  this.initializePromptAndAnswerGroupCheckBoxes = function()
  {
      for (let parentPromptAndAnswerArrayIndex = 0; parentPromptAndAnswerArrayIndex < this.parentLanguageObject.length; parentPromptAndAnswerArrayIndex++)
      {
        let groupCheckBox = new PromptAndAnswerGroupCheckBox
                                (this, this.parentLanguageObject[parentPromptAndAnswerArrayIndex].name,
                                 this.parentLanguageObject[parentPromptAndAnswerArrayIndex], parentPromptAndAnswerArrayIndex);

        this.arrayOfPromptAndAnswerGroupCheckBoxes.push(groupCheckBox);
      }
  }

  this.initializeIndividualPromptsAndAnswerCheckBoxes = function()
  {
    for (let groupCheckBoxesIndex = 0; groupCheckBoxesIndex < this.arrayOfPromptAndAnswerGroupCheckBoxes.length; groupCheckBoxesIndex++)
    {
      this.arrayOfPromptAndAnswerGroupCheckBoxes[groupCheckBoxesIndex].initializeIndividualPromptsAndAnswers();
    }
  }

  this.initializeArrayOfDivs = function()
  {
    if (this.arrayOfPages.length === 0)
    {
      let page = new Page(this.currentPageIndexForInitialization)
      this.arrayOfPages.push(page);
    }

    for (let arrayOfGroupCheckBoxesIndex = 0; arrayOfGroupCheckBoxesIndex < this.arrayOfPromptAndAnswerGroupCheckBoxes.length; arrayOfGroupCheckBoxesIndex++)
    {
      let languageGroupDiv = new LanguageGroupDiv(this, this.arrayOfPromptAndAnswerGroupCheckBoxes[arrayOfGroupCheckBoxesIndex],
                                                  this.currentColumnIndex, arrayOfGroupCheckBoxesIndex, this.currentPageIndexForInitialization);

      languageGroupDiv.defineXAndYCoordinates();
      languageGroupDiv.defineGroupCheckBoxXandY();
      languageGroupDiv.defineChildCheckBoxXandYs();
      languageGroupDiv.checkIfDivOffScreenAndRedefineIfSo(languageGroupDiv);
      this.arrayOfPages[this.currentPageIndexForInitialization].arrayOfDivs.push(languageGroupDiv);
      this.arrayOfDivs.push(languageGroupDiv);
    }
  }

  this.draw = function()
  {
    gameCanvasContext.fillStyle = 'orange';
    gameCanvasContext.fillRect(0,0, gameCanvas.width,gameCanvas.height);

    //header
    customFontFillText(["What would you like to train", symbolQuestionMarkImage], 40,20, 20,35);

    this.drawDivs(this.currentPageIndex);

    //previous/next page buttons
    gameCanvasContext.strokeStyle = 'black';
    gameCanvasContext.strokeRect(gameCanvas.width/2 - 90,2, 70,40);
    gameCanvasContext.strokeRect(gameCanvas.width/2,2, 70,40);

    customFontFillText([leftArrowImage, rightArrowImage], 70,90, gameCanvas.width/2 - 90,-10);

    //play button
    gameCanvasContext.strokeRect(gameCanvas.width-100,2, 98,40);
    customFontFillText('Play', 35,15, gameCanvas.width-90,5);
    //customFontFillText([rightArrowImage], 80,20, gameCanvas.width/2 + 40,5);
  }

  this.drawDivs = function(pageIndex)
  {
    let page = this.arrayOfPages[pageIndex];
    for (let divIndex = 0; divIndex < page.arrayOfDivs.length; divIndex++)
    {
      page.arrayOfDivs[divIndex].draw();
    }
  }

  this.handleClicks = function()
  {
    for (let divIndex = 0; divIndex < this.arrayOfPages[this.currentPageIndex].arrayOfDivs.length; divIndex++)
    {
      this.arrayOfPages[this.currentPageIndex].arrayOfDivs[divIndex].parentPromptAndAnswerGroupCheckBox.handleClick();
      for (let childBoxIndex = 0; childBoxIndex < this.arrayOfPages[this.currentPageIndex].arrayOfDivs[divIndex].parentPromptAndAnswerGroupCheckBox.arrayOfIndividualPromptAndAnswerCheckBoxes.length; childBoxIndex++)
      {
        this.arrayOfPages[this.currentPageIndex].arrayOfDivs[divIndex].parentPromptAndAnswerGroupCheckBox.arrayOfIndividualPromptAndAnswerCheckBoxes[childBoxIndex].handleClick();
      }
    }

    if (inputManager.mouseCoordinates.x > 230 && inputManager.mouseCoordinates.x < 300 &&
        inputManager.mouseCoordinates.y > 0 && inputManager.mouseCoordinates.y < 40)
        {
          genAudio.playClick();
          this.currentPageIndex -= 1;
          if (this.currentPageIndex < 0)
          {
            this.currentPageIndex = 0;
          }
        }
      if (inputManager.mouseCoordinates.x > 320 && inputManager.mouseCoordinates.x < 390 &&
          inputManager.mouseCoordinates.y > 0 && inputManager.mouseCoordinates.y < 40)
          {
            genAudio.playClick();
            this.currentPageIndex += 1;
            if (this.currentPageIndex === this.arrayOfPages.length)
            {
              this.currentPageIndex = this.arrayOfPages.length - 1;
            }
          }

      if (inputManager.mouseCoordinates.x > gameCanvas.width-90 && inputManager.mouseCoordinates.x < gameCanvas.width &&
          inputManager.mouseCoordinates.y > 5 && inputManager.mouseCoordinates.y < 45)
          {
            genAudio.playClick();
            languageSelectionScreen.startGame();
          }
    //console.log('this.arrayOfDivs[0].parentPromptAndAnswerGroupCheckBox.checked: ' + this.arrayOfDivs[0].parentPromptAndAnswerGroupCheckBox.checked);
  }
}

let mandarinCustomizationScreen;
let englishCustomizationScreen;

function Page(pageIndex)
{
  this.number = undefined;
  this.arrayOfDivs = [];
}

function LanguageGroupDiv(parentScreenObject, parentPromptAndAnswerGroupCheckBox, currentColumnIndex, arrayOfDivsIndex)
{
  this.columnIndex = currentColumnIndex;
  //this.currentRowIndex = currentRowIndex;
  this.arrayOfDivsIndex = arrayOfDivsIndex;
  this.previousDivIndex = this.arrayOfDivsIndex - 1;
  this.previousDiv = parentScreenObject.arrayOfDivs[this.previousDivIndex];

  this.pageIndex = parentScreenObject.currentPageIndexForInitialization;

  this.parentPromptAndAnswerGroupCheckBox = parentPromptAndAnswerGroupCheckBox;

  this.parentCheckBoxHeight = gameCanvas.height/20;
  this.lastChildBoxIndex = this.parentPromptAndAnswerGroupCheckBox.arrayOfIndividualPromptAndAnswerCheckBoxes.length - 1;
  this.lastChildBox = this.parentPromptAndAnswerGroupCheckBox.arrayOfIndividualPromptAndAnswerCheckBoxes[this.lastChildBoxIndex];
  this.lastChildBox.bottomY = this.lastChildBox.y + this.lastChildBox.height;

  this.x = undefined;
  this.y = undefined;

  this.defineXAndYCoordinates = function()
  {
    if (this.previousDiv)
    {

    }

    if (!this.previousDiv)
    {
      this.y = 100;
    }
    else if (this.columnIndex === this.previousDiv.columnIndex)
    {
        this.y = this.previousDiv.lastChildBox.y + this.previousDiv.lastChildBox.height + 15;
    } else
    {
      this.y = 100;
    }
    this.columnIndex = parentScreenObject.currentColumnIndex;
    this.x = 15 + this.columnIndex*parentScreenObject.columnWidth;
  }

  this.defineGroupCheckBoxXandY = function()
  {
    this.parentPromptAndAnswerGroupCheckBox.x = this.x;
    this.parentPromptAndAnswerGroupCheckBox.y = this.y;

    this.parentPromptAndAnswerGroupCheckBox.textX = this.x + this.parentPromptAndAnswerGroupCheckBox.width + 5;
    this.parentPromptAndAnswerGroupCheckBox.textY = this.y + this.parentPromptAndAnswerGroupCheckBox.height/2 + 3;
  }

  this.defineChildCheckBoxXandYs = function()
  {
    for (let childIndex = 0; childIndex < this.parentPromptAndAnswerGroupCheckBox.arrayOfIndividualPromptAndAnswerCheckBoxes.length; childIndex++)
    {
      let childBox = this.parentPromptAndAnswerGroupCheckBox.arrayOfIndividualPromptAndAnswerCheckBoxes[childIndex];
      let currentYOffSet = (childBox.height*1.1*(childIndex + 1)) + 17;
      childBox.x = this.x + 10;
      childBox.y = this.y + currentYOffSet;

      childBox.textX = childBox.x + childBox.width + 5;
      childBox.textY = childBox.y + childBox.height/2 + 3;

      childBox.bottomY = childBox.y + childBox.height;
    }
  }

  this.checkIfDivOffScreenAndRedefineIfSo = function(languageGroupDiv)
  {
    if (languageGroupDiv.pageIndex === 1)
    {

    }

    if (this.lastChildBox.bottomY > gameCanvas.height)
    {
      if (languageGroupDiv.pageIndex === 1)
      {

      }
      parentScreenObject.currentColumnIndex++;
      languageGroupDiv.columnIndex++;
      this.y = 100;
      languageGroupDiv.defineXAndYCoordinates();
      languageGroupDiv.defineGroupCheckBoxXandY();
      languageGroupDiv.defineChildCheckBoxXandYs();
      if (parentScreenObject.currentColumnIndex > 2)
      {

        parentScreenObject.currentColumnIndex = 0;
        parentScreenObject.currentPageIndexForInitialization++;
        let page = new Page(parentScreenObject.currentPageIndexForInitialization);
        parentScreenObject.arrayOfPages.push(page);
        languageGroupDiv.pageIndex = parentScreenObject.currentPageIndexForInitialization;
        languageGroupDiv.columnIndex = 0;
        this.y = 100;
        languageGroupDiv.defineXAndYCoordinates();
        languageGroupDiv.defineGroupCheckBoxXandY();
        languageGroupDiv.defineChildCheckBoxXandYs();
      }
    }
  }

  this.draw = function()
  {
    // console.log('inside draw div function');
    drawFromSheet(this.parentPromptAndAnswerGroupCheckBox.boxImage,
                                this.parentPromptAndAnswerGroupCheckBox.x,this.parentPromptAndAnswerGroupCheckBox.y,
                                this.parentPromptAndAnswerGroupCheckBox.width,this.parentPromptAndAnswerGroupCheckBox.height)
    // gameCanvasContext.drawImage(this.parentPromptAndAnswerGroupCheckBox.boxImage,
    //                             this.parentPromptAndAnswerGroupCheckBox.x,this.parentPromptAndAnswerGroupCheckBox.y,
    //                             this.parentPromptAndAnswerGroupCheckBox.width,this.parentPromptAndAnswerGroupCheckBox.height);
    if (this.parentPromptAndAnswerGroupCheckBox.checked)
    {
      drawFromSheet(this.parentPromptAndAnswerGroupCheckBox.checkImage,
                                this.parentPromptAndAnswerGroupCheckBox.x,this.parentPromptAndAnswerGroupCheckBox.y,
                                this.parentPromptAndAnswerGroupCheckBox.width,this.parentPromptAndAnswerGroupCheckBox.height);
      // gameCanvasContext.drawImage(this.parentPromptAndAnswerGroupCheckBox.checkImage,
      //                           this.parentPromptAndAnswerGroupCheckBox.x,this.parentPromptAndAnswerGroupCheckBox.y,
      //                           this.parentPromptAndAnswerGroupCheckBox.width,this.parentPromptAndAnswerGroupCheckBox.height);
    }

    gameCanvasContext.fillStyle = 'black';
    gameCanvasContext.font = '12px Helvetica';

    gameCanvasContext.fillText(this.parentPromptAndAnswerGroupCheckBox.name,
      this.parentPromptAndAnswerGroupCheckBox.textX,this.parentPromptAndAnswerGroupCheckBox.textY);


    for (let childIndex = 0; childIndex < this.parentPromptAndAnswerGroupCheckBox.arrayOfIndividualPromptAndAnswerCheckBoxes.length; childIndex++)
    {

      let childBox = this.parentPromptAndAnswerGroupCheckBox.arrayOfIndividualPromptAndAnswerCheckBoxes[childIndex];

      drawFromSheet(childBox.boxImage, childBox.x,childBox.y,
                                  childBox.width,childBox.height);
      // gameCanvasContext.drawImage(childBox.boxImage, childBox.x,childBox.y,
      //                             childBox.width,childBox.height);
      if (childBox.checked)
      {
        drawFromSheet(childBox.checkImage, childBox.x,childBox.y,
                                    childBox.width,childBox.height);
        // gameCanvasContext.drawImage(childBox.checkImage, childBox.x,childBox.y,
        //                             childBox.width,childBox.height);
      }

      gameCanvasContext.fillStyle = 'black';
      gameCanvasContext.font = '12px Helvetica';
      gameCanvasContext.fillText(childBox.name, childBox.textX,childBox.textY);

    }
  }
}

function PromptAndAnswerGroupCheckBox(parentScreenObject, nameString, promptAndAnswerGroup, arrayIndex)
{
  this.parentScreenObject = parentScreenObject;
  this.name = nameString;
  this.promptAndAnswerGroup = promptAndAnswerGroup;
  this.arrayIndex = arrayIndex;

  this.x = undefined;
  this.y = undefined;

  this.boxImage = 'images\\checkBox.png';
  this.checkImage = 'images\\checkForCheckBox.png';

  this.width = gameCanvas.width/20;
  this.height = gameCanvas.height/20;

  this.bottomY = undefined;

  this.arrayOfIndividualPromptAndAnswerCheckBoxes = [];

  this.initializeIndividualPromptsAndAnswers = function()
  {
    for (let individualPromptAndAnswerIndex = 0; individualPromptAndAnswerIndex < this.promptAndAnswerGroup.arrayOfObjects.length; individualPromptAndAnswerIndex++)
    {

      let individualCheckBox = new IndividualPromptAndAnswerCheckBox
                                  (this, this.promptAndAnswerGroup.arrayOfObjects[individualPromptAndAnswerIndex].name,
                                   this.promptAndAnswerGroup.arrayOfObjects[individualPromptAndAnswerIndex]);

      this.arrayOfIndividualPromptAndAnswerCheckBoxes.push(individualCheckBox);
    }
  }

  this.checked = true;
  this.handleClick = function()
  {
    if (inputManager.mouseCoordinates.x > this.x && inputManager.mouseCoordinates.x < this.x + this.width &&
        inputManager.mouseCoordinates.y > this.y && inputManager.mouseCoordinates.y < this.y + this.height)
        {
          genAudio.playClick();
          this.toggleThisCheckAndChildrenChecks();
        }
  }

  this.toggleThisCheckAndChildrenChecks = function()
  {
    if (this.checked)
    {
      this.checked = false;
      for (let childIndex = this.arrayOfIndividualPromptAndAnswerCheckBoxes.length - 1; childIndex > -1; childIndex--)
      {
        if (this.arrayOfIndividualPromptAndAnswerCheckBoxes[childIndex].checked)
        {

          this.arrayOfIndividualPromptAndAnswerCheckBoxes[childIndex].checked = false;
          for (let currentGroupArrayIndex = 0; currentGroupArrayIndex < promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings.length; currentGroupArrayIndex++)
          {

            if (this.name === promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings[currentGroupArrayIndex].name)
            {

              promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings.splice(currentGroupArrayIndex,1);
            }
          }

          //console.log('currentArrayOfLogicalPromptAnswerGroupings: ' + promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings);
        }
        else
        {
          continue;
        }
      }
    }
    else
    {
      this.checked = true;
      for (let childIndex = 0; childIndex < this.arrayOfIndividualPromptAndAnswerCheckBoxes.length; childIndex++)
      {
        if (!this.arrayOfIndividualPromptAndAnswerCheckBoxes[childIndex].checked)
        {
          this.arrayOfIndividualPromptAndAnswerCheckBoxes[childIndex].checked = true;
          promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings.push(this.promptAndAnswerGroup);
          //console.log('currentArrayOfLogicalPromptAnswerGroupings: ' + promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings);
        }
        else
        {
          continue;
        }//end of else for individual prompt/answer check box true/false
      }// end of for loop for adding checks to boxes and adding prompts/answers to custom array
    }// end of else for checking group check box true/false
  }// end of toggle child check boxes

}// end of group check box class/function

function IndividualPromptAndAnswerCheckBox(parentGroup, nameString, promptAndAnswer, arrayIndex)
{
  this.name = nameString;

  this.boxImage = 'images\\checkBox.png';
  this.checkImage = 'images\\checkForCheckBox.png';

  this.x = undefined;
  this.y = undefined;

  this.textX = undefined;
  this.textY = undefined;

  this.checked = true;

  this.width = gameCanvas.width/25;
  this.height = gameCanvas.height/25;

  this.promptAndAnswer = promptAndAnswer;

  this.handleClick = function()
  {
    if (inputManager.mouseCoordinates.x > this.x && inputManager.mouseCoordinates.x < this.x + this.width &&
        inputManager.mouseCoordinates.y > this.y && inputManager.mouseCoordinates.y < this.y + this.height)
    {
        genAudio.playClick();
        this.toggleCheck();
    }

  }

  this.toggleCheck = function()
  {
    if (this.checked)
    {
      this.checked = false;
      this.removePromptAndAnswerToCustomizedArray();
    }
    else
    {
      this.checked = true;
      this.addPromptAndAnswerToCustomizedArray();
    }
    //console.log('currentArrayOfLogicalPromptAnswerGroupings ' + promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings);

  }

  this.addPromptAndAnswerToCustomizedArray = function()
  {
    for (let currentGroupArrayIndex = 0; currentGroupArrayIndex < promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings.length; currentGroupArrayIndex++)
    {
      for (let individualPromptAnswersIndex = 0; individualPromptAnswersIndex < promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings[currentGroupArrayIndex].arrayOfObjects.length; individualPromptAnswersIndex++)
      {
        if (promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings[currentGroupArrayIndex].arrayOfObjects[individualPromptAnswersIndex].name === this.promptAndAnswer.name)
        {
          return;
        }
        else
        {
          promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings[currentGroupArrayIndex].arrayOfObjects.push(this.promptAndAnswer);
          return;
        }
      }

    }
  }


  this.removePromptAndAnswerToCustomizedArray = function()
  {
    for (let currentGroupArrayIndex = 0; currentGroupArrayIndex < promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings.length; currentGroupArrayIndex++)
    {
      for (let individualPromptAnswersIndex = 0; individualPromptAnswersIndex < promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings[currentGroupArrayIndex].arrayOfObjects.length; individualPromptAnswersIndex++)
      {

        let individualBoxCheckedTally = 0;
        for (let individualBoxIndex = 0; individualBoxIndex < parentGroup.arrayOfIndividualPromptAndAnswerCheckBoxes.length; individualBoxIndex++)
        {
          if (parentGroup.arrayOfIndividualPromptAndAnswerCheckBoxes[individualBoxIndex].checked)
          {
            individualBoxCheckedTally++;
          }
        }

        if (individualBoxCheckedTally <= 2)
        {
          alert('Groups are designed to help practice common mistakes among tricky words, so you must leave at least 2 individual boxes selected in a group. You can also turn off or turn on the whole group.');
          return;
        }
        else
        {
          if (promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings[currentGroupArrayIndex].arrayOfObjects[individualPromptAnswersIndex].name === this.promptAndAnswer.name)
          {
            promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings[currentGroupArrayIndex].arrayOfObjects.splice(individualPromptAnswersIndex,1);
          }
        }

      }
    //console.log('promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings: ' + promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings);
    }
  }
}
const VOLUME_INCREMENT = 0.05


var volume = {}
volume.music = {};
volume._musicValue = 0.7; //muted so I can listen to other music while playing and debugging, lol
Object.defineProperty(volume, 'music', {
	get() {	return volume._musicValue; },
	set(value) {
		volume._musicValue = value;
		if (volume._musicValue > 1) {volume._musicValue = 1;}
		if (volume._musicValue < 0) {volume._musicValue = 0;}
		musicManager.setVolume();
	}
});

var musicManager = new MusicManager();
function MusicManager() {
	var currentTrack = null;
	var fadeTrack = null;
	var nextTrack = null;
	var trackList = new Array();
	var currentTrackDuration = null;
	var nextTrackDuration = null;
	this.playing = false;
	this.onEndFunction = function() {return};

	this.update = function() {
		if (this.playing) {
			if (currentTrack.currentTime >= currentTrackDuration) {
				this.playNextTrack(false);
			}
		}

		if (fadeTrack != null && fadeTrack.volume >= 0.05) {
			fadeTrack.volume -= 0.05;

		}
		if (fadeTrack != null && fadeTrack.volume <= 0.1) {
			fadeTrack.pause();
			fadeTrack = null;
		}
	}

	this.play = function() {
		if(trackList == null) {
			return;
		}

		if (currentTrack == null) {
			currentTrack = new Audio(trackList[0].src);
			currentTrackDuration = trackList[0].dur;
			currentTrack.volume = Math.pow(volume.music, 2);
		}
		currentTrack.play();

		if (nextTrack == null) {
			if (trackList[1] != undefined) {
				nextTrack = new Audio(trackList[1].src);
				nextTrackDuration = trackList[1].dur;
			} else {
				if (!trackList || !trackList[0]) {

					this.playing = false;
					nextTrack = null;
					return;
				}
				nextTrack = new Audio(trackList[0].src);
				nextTrackDuration = trackList[0].dur;
			}
			nextTrack.volume = Math.pow(volume.music, 2);
		}

		this.playing = true;
	}

	this.pause = function() {
		currentTrack.pause();

		if (fadeTrack != null) {
			fadeTrack.pause();
			fadeTrack = null;
		}

		this.playing = false;
	}

	this.stop = function() {
		currentTrack.pause();
		currentTrack.currentTime = 0;

		if (fadeTrack != null) {
			fadeTrack.pause();
			fadeTrack = null;
		}

		this.playing = false;
	}

	this.addTrack = function(musicTrackObject) {
		trackList.push(musicTrackObject);

		if (trackList.length <= 2) {
			if (trackList[1] != undefined) {
				nextTrack = new Audio(trackList[1].src);
				nextTrackDuration = trackList[1].dur;
			} else {
				nextTrack = new Audio(trackList[0].src);
				nextTrackDuration = trackList[0].dur;
			}
			nextTrack.volume = Math.pow(volume.music, 2);
		}
	}

	this.playNextTrack = function(fading = true) {
		this.onEndFunction();

		this.onEndFunction = function() {return};

		if (fadeTrack != null) {
			fadeTrack.pause();
		}
		if (fading) {
			fadeTrack = currentTrack;
		}
		currentTrack = nextTrack;
		currentTrackDuration = nextTrackDuration;
		nextTrack = null;
		if (trackList.length >= 2) {
			trackList.shift();
		}
		this.play();
	}

	this.moveToLastTrack = function() {
		while (trackList.length > 1) {
			trackList.shift();
		}
	}

	this.setVolume = function() {
		if (currentTrack) currentTrack.volume = Math.pow(volume.music, 2);
		if (nextTrack) nextTrack.volume = Math.pow(volume.music, 2);
	}

	this.startDuck = function() {
		if (currentTrack) currentTrack.volume = Math.pow(volume.music*0.7, 2);
		if (nextTrack) nextTrack.volume = Math.pow(volume.music*0.7, 2);
	}

	this.endDuck = function() {
		if (currentTrack) currentTrack.volume = Math.pow(volume.music, 2);
		if (nextTrack) nextTrack.volume = Math.pow(volume.music, 2);
	}
}

function MusicTrack(source, duration) {
	this.src = source;
	this.dur = duration;
}


volume.sfx = {};
volume._sfxValue = 0.7;
Object.defineProperty(volume, 'sfx', {
	get() {	return volume._sfxValue; },
	set(value) {
		volume._sfxValue = value;
		if (volume._sfxValue > 1) {volume._sfxValue = 1;}
		if (volume._sfxValue < 0) {volume._sfxValue = 0;}
	}
});

function sfxMulti(arrayOfSources, mixVolume = 1) {
	var sfxList = new Array();
	var vol = mixVolume;
	for (var i in arrayOfSources) {
		sfxList[i] = new Audio(arrayOfSources[i]);
	}

	this.play = function() {
		var currentSource = randItem(sfxList);
		currentSource.currentTime = 0;
		currentSource.volume = Math.pow(volume.sfx * vol, 2);
		currentSource.play();
	}
}

function sfxOverlap(source, mixVolume = 1) {
	var sfxList = new Array();
	var index = 0;
	sfxList[0] = new Audio(source);
	sfxList[1] = new Audio(source);
	var vol = mixVolume;

	this.play = function() {
		sfxList[index].currentTime = 0;
		sfxList[index].volume = Math.pow(volume.sfx * vol, 2);
		sfxList[index].play();

		index = index == 0 ? 1 : 0;
	}
}

function sfxOneShot(source, mixVolume = 1) {
	this.sfx = new Audio(source);
	var vol = mixVolume;

	this.play = function() {
		this.sfx.currentTime = 0;
		this.sfx.volume = Math.pow(volume.sfx * vol, 2);
		this.sfx.play();
	}
}

function sfxLooping(source, mixVolume = 1) {
	var sfx = new Audio(source);
	var vol = mixVolume;
	sfx.loop = true;

	this.play = function() {
		sfx.volume = Math.pow(volume.sfx * vol, 2);
		if (sfx.paused) {
			sfx.currentTime = 0;
			sfx.play();
		}
	}

	this.stop = function() {
		sfx.pause();
	}
}


volume.prompt = {};
volume._promptValue = 0.7;
Object.defineProperty(volume, 'prompt', {
	get() {	return volume._promptValue; },
	set(value) {
		volume._promptValue = value;
		if (volume._promptValue > 1) {volume._promptValue = 1;}
		if (volume._promptValue < 0) {volume._promptValue = 0;}
	}
});

function promptSound(source) {
	promptAudio.loading++;
	this.sfx = new Audio(source);
	this.sfx.oncanplaythrough = function() {promptAudio.loading--; }
	this.type = 'AUDIO';

	this.play = function() {
		this.sfx.currentTime = 0;
		this.sfx.volume = Math.pow(volume.prompt, 2);
		this.sfx.play();

		if (gameClassManager.currentGame.name !== 'hello world game' && gameClassManager.currentGame.name !== 'hello world 2 game')
		{
			musicManager.startDuck();
			this.sfx.onended = function()
			{
				musicManager.endDuck();
			}
		}
	}
}


promptAudio = {};
promptAudio.loading = 0;

promptAudio.woman = new promptSound('audio/PromptsAndAnswers/woman.mp3');
promptAudio.women = new promptSound('audio/PromptsAndAnswers/women.mp3');
promptAudio.man = new promptSound('audio/PromptsAndAnswers/man.mp3');
promptAudio.men = new promptSound('audio/PromptsAndAnswers/men.mp3');
promptAudio.he = new promptSound('audio/PromptsAndAnswers/he.mp3');
promptAudio.she = new promptSound('audio/PromptsAndAnswers/she.mp3');


//cVc Section
//English cVcs
promptAudio.blendedCat = new promptSound('audio/PromptsAndAnswers/blendedCat.mp3');
promptAudio.blendedCot = new promptSound('audio/PromptsAndAnswers/blendedCot.mp3');

//mandarin cVcs
promptAudio.mandarinHowAreYou = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinHowAreYou.mp3');
promptAudio.mandarinHowAmI = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinHowAmI.mp3');
promptAudio.mandarinHowAreThey = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinHowAreThey.mp3');
promptAudio.mandarinHowAreWe = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinHowAreWe.mp3');
promptAudio.mandarinHowIsHe = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinHowIsHe.mp3');
promptAudio.mandarinHowIsShe = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinHowIsHe.mp3');
promptAudio.mandarinHowIsItDoing = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinHowIsItDoing.mp3');
promptAudio.mandarinImVeryGood = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinImVeryGood.mp3');
promptAudio.mandarinNotBad = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinNotBad.mp3');
promptAudio.mandarinImAlsoVeryGood = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinImAlsoVeryGood.mp3');
promptAudio.mandarinVeryNiceToMeetYou = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinVeryNiceToMeetYou.mp3');
promptAudio.mandarinWhereAreYouFrom = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinWhereAreYouFrom.mp3');
promptAudio.mandarinImFromAmerica = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinImFromAmerica.mp3');
promptAudio.mandarinWhatDoYouLikeToDo = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinWhatDoYouLikeToDo.mp3');
promptAudio.mandarinWhatPartOfChina = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinWhatPartOfChina.mp3');
promptAudio.mandarinWhereDoYouLive = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinWhereDoYouLive.mp3');
promptAudio.mandarinILiveInVietnam = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinILiveInVietnam.mp3');
promptAudio.mandarinMeToo = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinMeToo.mp3');
promptAudio.mandarinILikeProgramming = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinILikeProgramming.mp3');
promptAudio.mandarinIAlsoLikeFitness = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinIAlsoLikeFitness.mp3');
promptAudio.mandarinWhatIsYourJob = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinWhatIsYourJob.mp3');
promptAudio.mandarinIAmATeacher = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinIAmATeacher.mp3');
promptAudio.mandarinAnythingElse = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinAnythingElse.mp3');
promptAudio.mandarinILikeWatchingMovies = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinILikeWatchingMovies.mp3');
promptAudio.mandarinILikeRockClimbing = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinILikeRockClimbing.mp3');
promptAudio.mandarinWhatIsYourName = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinWhatIsYourName.mp3');
promptAudio.mandarinMyNameIsSteven = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinMyNameIsSteven.mp3');
promptAudio.mandarinHowOldAreYou = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinHowOldAreYou.mp3');
promptAudio.mandarinIAm37YearsOld = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinIAm37YearsOld.mp3');


//polite mandarin phrases group 1
promptAudio.mandarinPlease = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinPlease.mp3');
promptAudio.mandarinSorry = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinSorry.mp3');
promptAudio.mandarinExcuseMeQuestionAskingContext = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinExcuseMeQuestionContext.mp3');
promptAudio.mandarinWaitAMoment = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinWaitAMoment.mp3');
promptAudio.mandarinThankYou = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinThankYou.mp3');
promptAudio.mandarinAnyTime = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinAnyTime.mp3');
promptAudio.mandarinYoureWelcome = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinYoureWelcome.mp3');
promptAudio.mandarinExcuseMePassingThroughContext = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinExcuseMePassingThroughContext.mp3');
promptAudio.mandarinIAppreciateThat = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinIAppreciateThat.mp3');
promptAudio.mandarinYouHaveWorkedHard = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinYouWorkedHard.mp3');

//polite mandarin phrases group 2
promptAudio.mandarinLongTimeNoSee = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinLongTimeNoSee.mp3');
promptAudio.mandarinIllLetYouGo = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinIllLetYouGo.mp3');
promptAudio.mandarinPleaseAdviseMe = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinPleaseAdvise.mp3');
promptAudio.mandarinIRespectfullyWait = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinIRespectfullyWait.mp3');
promptAudio.mandarinMyHumbleOpinion = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinInMyHumbleOpinion.mp3');
promptAudio.mandarinExcuseMeForSayingThis = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinExcuseMeForSayingThis.mp3');
promptAudio.mandarinItsOK = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinItsOK.mp3');
promptAudio.mandarinItsMyDuty = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinItsMyDuty.mp3');
promptAudio.mandarinSorryForMyLowSkill = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinSorryForMyLowSkill.mp3');

//common words
promptAudio.mandarinToBe = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinToBe.mp3');
promptAudio.mandarinOf = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinOf.mp3');
promptAudio.mandarinNot = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinNot.mp3');
promptAudio.mandarinLe = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinLe.mp3');
promptAudio.mandarinPerson = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinPerson.mp3');
promptAudio.mandarinI = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinI.mp3');
promptAudio.mandarinYou = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinYou.mp3');
promptAudio.mandarinAt = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinAt.mp3');
promptAudio.mandarinHave = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinHave.mp3');
promptAudio.mandarinIn = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinIn.mp3');

promptAudio.mandarinBuy = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinBuy.mp3');
promptAudio.mandarinSell = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinSell.mp3');

promptAudio.mandarinMom = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinMom.mp3');
promptAudio.mandarinHorse = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinHorse.mp3');

promptAudio.mandarinThisOne = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinThisOne.mp3');
promptAudio.mandarinThatOne = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinThatOne.mp3');
promptAudio.mandarinTheseOnes = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinTheseOnes.mp3');
promptAudio.mandarinThoseOnes = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinThoseOnes.mp3');

promptAudio.mandarinHe = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinHe.mp3');
promptAudio.mandarinCouch = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinCouch.mp3')
promptAudio.mandarinTower = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinTower.mp3');

promptAudio.mandarinThisArea = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinThisArea.mp3');
promptAudio.mandarinThatArea = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinThatArea.mp3');

promptAudio.mandarinSleep = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinSleep.mp3');
promptAudio.mandarinDumplings = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinDumplings.mp3');

promptAudio.mandarinToday = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinToday.mp3');
promptAudio.mandarinTomorrow = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinTomorrow.mp3');
promptAudio.mandarinYesterday = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinYesterday.mp3');

promptAudio.mandarinBlack = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinBlack.mp3');//黑色
promptAudio.mandarinWhite = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinWhite.mp3');//白色
promptAudio.mandarinGray = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinGray.mp3');//灰色
promptAudio.mandarinRed = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinRed.mp3');//红色
promptAudio.mandarinBrown = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinBrown.mp3');//棕色
promptAudio.mandarinYellow = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinYellow.mp3');//黄色
promptAudio.mandarinGreen = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinGreen.mp3');//绿色
promptAudio.mandarinBlue = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinBlue.mp3');//蓝色
promptAudio.mandarinPurple = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinPurple.mp3');//紫色
promptAudio.mandarinPink = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinPink.mp3');//粉

promptAudio.mandarin0 = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarin0.mp3');
promptAudio.mandarin1 = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarin1.mp3');
promptAudio.mandarin2 = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarin2.mp3');
promptAudio.mandarin3 = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarin3.mp3');
promptAudio.mandarin4 = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarin4.mp3');
promptAudio.mandarin5 = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarin5.mp3');
promptAudio.mandarin6 = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarin6.mp3');
promptAudio.mandarin7 = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarin7.mp3');
promptAudio.mandarin8 = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarin8.mp3');
promptAudio.mandarin9 = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarin9.mp3');

promptAudio.mandarinHello = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinHello.mp3');
promptAudio.mandarinImGoodAndYou = new promptSound('audio/PromptsAndAnswers/Mandarin/mandarinImGoodAndYou.mp3');


//central vietnamese
promptAudio.centralVietnameseHelloMan = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/centralVietnameseHelloMan.mp3');
promptAudio.centralVietnameseHelloWoman = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/centralVietnameseHelloWoman.mp3');
promptAudio.centralVietnameseWhatsYourNameGeneral = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/centralVietnameseWhatsYourNameGeneral.mp3');
promptAudio.centralVietnameseWhatsYourNameBrother = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/centralVietnameseWhatsYourNameBrother.mp3');
promptAudio.centralVietnameseWhatsYourNameBaby = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/centralVietnameseWhatsYourNameBaby.mp3');
promptAudio.centralVietnameseMyNameIsSteven = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/centralVietnameseMyNameIsSteven.mp3');
promptAudio.centralVietnameseWhereAreYouFrom = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/centralVietnameseWhereAreYouFrom.mp3');
promptAudio.centralVietnameseIAmFromAmerica = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/centralVietnameseIAmFromAmerica.mp3');
promptAudio.centralVietnameseWhatDoYouLikeToEat = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/centralVietnameseWhatDoYouLikeToEat.mp3');
promptAudio.centralVietnameseILikeToEatVegetarian = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/centralVietnameseILikeToEatVegetarian.mp3');
promptAudio.centralVietnameseGoodBye = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/centralVietnameseGoodbye.mp3');
promptAudio.centralVietnameseVeryNiceToMeetYou = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/centralVietnameseVeryNiceToMeetYou.mp3');
promptAudio.centralVietnameseHowAreYouGeneral = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/centralVietnameseHowAreYouGeneral.mp3');
promptAudio.centralVietnameseGoodAndYouGeneral = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/centralVietnameseGoodAndYouGeneral.mp3');
promptAudio.centralVietnameseExcuseMe = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/centralVietnameseExcuseMe.mp3');
promptAudio.centralVietnamesePoliteHello = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/centralVietnamesePoliteHello.mp3');

promptAudio.centralVietnameseStraightToneA = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseStraightToneA.mp3');
promptAudio.centralVietnameseFallingToneA = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseFallingToneA.mp3');
promptAudio.centralVietnameseRisingToneA = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseRisingToneA.mp3');
promptAudio.centralVietnameseRisingStutterToneA = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseRisingStutterToneA.mp3');
promptAudio.centralVietnameseLowStaccatoToneA = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseLowStaccatoToneA.mp3');
promptAudio.centralVietnameseRisingHatAU = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseRisingHatAU.mp3');
 promptAudio.centralVietnameseStraightI = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseI.mp3');
promptAudio.centralVietnameseHatE = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseHatE.mp3');
promptAudio.centralVietnameseE = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseE.mp3');
promptAudio.centralVietnameseFallingI = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseFallingI.mp3');
promptAudio.centralVietnameseU = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseU.mp3');
promptAudio.centralVietnameseHatO = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseHatO.mp3');
promptAudio.centralVietnameseO = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseO.mp3');
promptAudio.centralVietnameseQuestionU = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseQuestionU.mp3');
promptAudio.centralVietnameseQuestionO = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseQuestionO.mp3');
promptAudio.centralVietnameseFallingE = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseFallingE.mp3');
promptAudio.centralVietnameseFallingO = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseFallingO.mp3');
promptAudio.centralVietnameseFallingU = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseFallingU.mp3');
promptAudio.centralVietnameseStutterE = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseStutterE.mp3');
promptAudio.centralVietnameseStutterI = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseStutterI.mp3');
promptAudio.centralVietnameseStutterO = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseStutterO.mp3');
promptAudio.centralVietnameseStutterU = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseStutterU.mp3');
promptAudio.centralVietnameseYoYoA = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseYoYoA.mp3');
promptAudio.centralVietnameseYoYoE = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseYoYoE.mp3');
promptAudio.centralVietnameseYoYoI = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseYoYoI.mp3');
promptAudio.centralVietnameseYoYoO = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseYoYoO.mp3');
promptAudio.centralVietnameseYoYoU = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseYoYoU.mp3');
promptAudio.centralVietnameseRisingE = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseRisingE.mp3');
promptAudio.centralVietnameseRisingO = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseRisingO.mp3');
promptAudio.centralVietnameseRisingI = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseRisingI.mp3');
promptAudio.centralVietnameseRisingU = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseRisingU.mp3');
promptAudio.centralVietnameseStaccatoE = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseStaccatoE.mp3');
promptAudio.centralVietnameseStaccatoO = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseStaccatoO.mp3');
promptAudio.centralVietnameseStaccatoI = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseStaccatoI.mp3');
promptAudio.centralVietnameseStaccatoU = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseStaccatoU.mp3');
promptAudio.centralVietnameseHookO = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseHookO.mp3');
promptAudio.centralVietnameseHalfPipeA = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseHalfPipeA.mp3');
promptAudio.centralVietnameseRisingHatA = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseRisingHatA.mp3');
promptAudio.centralVietnameseFallingHatA = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseFallingHatA.mp3');
promptAudio.centralVietnameseYoYoHatA = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseYoYoHatA.mp3');
promptAudio.centralVietnameseStutterHatA = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseStutterHatA.mp3');
promptAudio.centralVietnameseStaccatoHatA = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseStaccatoHatA.mp3');
promptAudio.centralVietnameseFallingHatE = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseFallingHatE.mp3');
promptAudio.centralVietnameseYoYoHatE = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseYoYoHatE.mp3');
promptAudio.centralVietnameseStutterHatE = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseStutterHatE.mp3');
promptAudio.centralVietnameseStaccatoHatE = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseStaccatoHatE.mp3');
promptAudio.centralVietnameseRisingHatO = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseRisingHatO.mp3');
promptAudio.centralVietnameseFallingHatO = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseFallingHatO.mp3');
promptAudio.centralVietnameseYoYoHatO = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseYoYoHatO.mp3');
promptAudio.centralVietnameseStutterHatO = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseStutterHatO.mp3');

//consonants
promptAudio.centralVietnameseB = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseB.mp3');
promptAudio.centralVietnameseC = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseC.mp3');
promptAudio.centralVietnameseD = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseD.mp3');
promptAudio.centralVietnameseTh = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseTh.mp3');
promptAudio.centralVietnameseNg = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseNg.mp3');
promptAudio.centralVietnameseLinedD = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseLinedD.mp3');
promptAudio.centralVietnameseG = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseG.mp3');
promptAudio.centralVietnameseH = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseH.mp3');
promptAudio.centralVietnameseK = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseK.mp3');
promptAudio.centralVietnameseL = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseL.mp3');
promptAudio.centralVietnameseM = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseM.mp3');
promptAudio.centralVietnameseN = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseN.mp3');
promptAudio.centralVietnameseP = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseP.mp3');
promptAudio.centralVietnameseQ = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseQ.mp3');
promptAudio.centralVietnameseR = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseR.mp3');
promptAudio.centralVietnameseS = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseS.mp3');
promptAudio.centralVietnameseT = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseT.mp3');
promptAudio.centralVietnameseV = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseV.mp3');
promptAudio.centralVietnameseX = new promptSound('audio/PromptsAndAnswers/CentralVietnamese/phonics/centralVietnameseX.mp3');

promptAudio.pinyinA = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinA.mp3');
promptAudio.pinyinO = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinO.mp3');
promptAudio.pinyinE = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinE.mp3');
promptAudio.pinyinI = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinI.mp3');
promptAudio.pinyinU = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinU.mp3');
promptAudio.pinyinEr = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinEr.mp3');
promptAudio.pinyinB = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinB.mp3');
promptAudio.pinyinP = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinP.mp3');
promptAudio.pinyinN = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinN.mp3');
promptAudio.pinyinM = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinM.mp3');
promptAudio.pinyinF = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinF.mp3');
promptAudio.pinyinD = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinD.mp3');
promptAudio.pinyinT = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinT.mp3');
promptAudio.pinyinL = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinL.mp3');
promptAudio.pinyinC = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinC.mp3');
promptAudio.pinyinS = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinS.mp3');
promptAudio.pinyinH = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinH.mp3');
promptAudio.pinyinK = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinK.mp3');
promptAudio.pinyinG = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinG.mp3');
promptAudio.pinyinG = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinG.mp3');
promptAudio.pinyinSi = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinSi.mp3');
promptAudio.pinyinZi = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinZi.mp3');
promptAudio.pinyinSh = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinSh.mp3');
promptAudio.pinyinCh = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinCh.mp3');
promptAudio.pinyinZh = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinZh.mp3');
promptAudio.pinyinR = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinR.mp3');
promptAudio.pinyinShi = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinShi.mp3');
promptAudio.pinyinChi = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinChi.mp3');
promptAudio.pinyinZhi = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinZhi.mp3');
promptAudio.pinyinRi = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinRi.mp3');
promptAudio.pinyinX = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinX.mp3');
promptAudio.pinyinQ = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinQ.mp3');
promptAudio.pinyinJ = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinJ.mp3');
promptAudio.pinyinAo = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinAo.mp3');
promptAudio.pinyinAi = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinAi.mp3');
promptAudio.pinyinEi = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinEi.mp3');
promptAudio.pinyinUo = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinUo.mp3');
promptAudio.pinyinUa = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinUa.mp3');
promptAudio.pinyinIa = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinIa.mp3');
promptAudio.pinyinIe = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinIe.mp3');
promptAudio.pinyinUe = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinUe.mp3');
promptAudio.pinyinIao = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinIao.mp3');
promptAudio.pinyinIou = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinIou.mp3');
promptAudio.pinyinUai = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinUai.mp3');
promptAudio.pinyinUei = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinUei.mp3');


promptAudio.pinyinWa = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinWa.mp3');
promptAudio.pinyinYa = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinYa.mp3');
promptAudio.pinyinWo = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinWo.mp3');
promptAudio.pinyinYe = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinYe.mp3');
promptAudio.pinyinYi = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinYi.mp3');
promptAudio.pinyinWu = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinWu.mp3');
promptAudio.pinyinYu = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinYu.mp3');
promptAudio.pinyinYue = new promptSound('audio/PromptsAndAnswers/Mandarin/Phonics/pinyinYue.mp3');


promptAudio.englishBee = new promptSound('audio/PromptsAndAnswers/bee.mp3');
promptAudio.englishFlower = new promptSound('audio/PromptsAndAnswers/flower.mp3');

// A-Z in English
promptAudio.a = new promptSound('audio/letters/a.mp3');
promptAudio.b = new promptSound('audio/letters/b.mp3');
promptAudio.c = new promptSound('audio/letters/c.mp3');
promptAudio.d = new promptSound('audio/letters/d.mp3');
promptAudio.e = new promptSound('audio/letters/e.mp3');
promptAudio.f = new promptSound('audio/letters/f.mp3');
promptAudio.g = new promptSound('audio/letters/g.mp3');
promptAudio.h = new promptSound('audio/letters/h.mp3');
promptAudio.i = new promptSound('audio/letters/i.mp3');
promptAudio.j = new promptSound('audio/letters/j.mp3');
promptAudio.k = new promptSound('audio/letters/k.mp3');
promptAudio.l = new promptSound('audio/letters/l.mp3');
promptAudio.m = new promptSound('audio/letters/m.mp3');
promptAudio.n = new promptSound('audio/letters/n.mp3');
promptAudio.o = new promptSound('audio/letters/o.mp3');
promptAudio.p = new promptSound('audio/letters/p.mp3');
promptAudio.q = new promptSound('audio/letters/q.mp3');
promptAudio.r = new promptSound('audio/letters/r.mp3');
promptAudio.s = new promptSound('audio/letters/s.mp3');
promptAudio.t = new promptSound('audio/letters/t.mp3');
promptAudio.u = new promptSound('audio/letters/u.mp3');
promptAudio.v = new promptSound('audio/letters/v.mp3');
promptAudio.w = new promptSound('audio/letters/w.mp3');
promptAudio.x = new promptSound('audio/letters/x.mp3');
promptAudio.y = new promptSound('audio/letters/y.mp3');
promptAudio.z = new promptSound('audio/letters/z.mp3');

promptAudio.balloonPop = new promptSound('audio/balloonPop.mp3');
promptAudio.bubbleWrapPop = new promptSound('audio/bubbleWrapPop.mp3');


gameAudio = {};

var genAudio = {};
genAudio.transitionMusic1 = new MusicTrack("audio/backgroundTracks/levelTransitionSound.mp3", 5);
genAudio.transitionMusic2 = new MusicTrack("audio/backgroundTracks/Transition2.mp3", 5.5);
genAudio.transitionMusic3 = new MusicTrack("audio/backgroundTracks/Transition3.mp3", 4);
genAudio.playTransitionMusic = function() {
	musicManager.addTrack(randItem([genAudio.transitionMusic1,genAudio.transitionMusic2,genAudio.transitionMusic3]));
	musicManager.moveToLastTrack();
	musicManager.playNextTrack();
	musicManager.addTrack(gameClassManager.currentGame.backgroundMusic);
	if (SKIP_TRANSITIONS) {
		
		fullGameStateMachine.loadCurrentState(fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame);
		promptersManager.promptThePlayer();
		if (gameClassManager.currentGame.startGameSpecialCode) {
			gameClassManager.currentGame.startGameSpecialCode();
		}
		gameCanvasContext.globalAlpha = 1;
		return;
	}
	musicManager.onEndFunction = function() {
		fullGameStateMachine.loadCurrentState(fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame);
		promptersManager.promptThePlayer();
		if (gameClassManager.currentGame.startGameSpecialCode) {
			gameClassManager.currentGame.startGameSpecialCode();
		}
		gameCanvasContext.globalAlpha = 1;
	}
}
genAudio.titleMusic = new MusicTrack('audio/backgroundTracks/titleScreenMusic.mp3', 6.21);
genAudio.playTitleMusic = function() {
	musicManager.addTrack(genAudio.titleMusic);
	musicManager.moveToLastTrack();
	musicManager.playNextTrack();
}

genAudio.click = new sfxOneShot("audio/UI_01.mp3");
genAudio.playClick = function() {
	genAudio.click.play();
}
genAudio.positive = new sfxOneShot("audio/Positive_01.mp3");
genAudio.playPositive = function() {
	genAudio.positive.play();
}
genAudio.negative = new sfxOneShot("audio/Negative_01.mp3");
genAudio.playNegative = function() {
	genAudio.negative.play();
}

function randItem(array) {
	return array[Math.floor(Math.random() * array.length)];
}
function HelperPrompt()
{
  this.isOn = false;

  this.wrongWord = '';

  this.draw = function()
  {
    gameCanvasContext.fillStyle = 'white';
    gameCanvasContext.fillRect(0,0, gameCanvas.width,gameCanvas.height);
    gameCanvasContext.fillStyle = 'black';
    customFontFillText('The game suggests that you practice: ', 20, 15, 50,gameCanvas.height/2 - 30);
    customFontFillText(this.wrongWord, 30, 20, gameCanvas.width/2 - 100,gameCanvas.height/2);
  }

  this.popUp = function(gotWrong)
  {
    this.isOn = true;
    this.wrongWord = gotWrong;
  }
}

let helperPrompt = new HelperPrompt();
let womanPromptAndAnswer = {};
let womenPromptAndAnswer = {};
let manPromptAndAnswer = {};
let menPromptAndAnswer = {};
let hePromptAndAnswer = {};
let shePromptAndAnswer = {};
let beePromptAndAnswer = {};
let flowerPromptAndAnswer = {};

let womanVersusWomenPairGrouping = {};
let manVersusMenPairGrouping = {};
let heVersusShePairGrouping = {};
let flowerVersusBeePairGrouping = {};

let mandarinBuyPromptAndAnswer = {};//'buy' in English
let mandarinSellPromptAndAnswer = {};//'sell' in English
let mandarinBuyVersusMandarinSellPairGrouping = {};

let mandarinMomPromptAndAnswer = {};
let mandarinHorsePromptAndAnswer = {};
let mandarinMomVersusHorsePairGrouping = {};

let mandarinTodayPromptAndAnswer = {};
let mandarinTomorrowPromptAndAnswer = {};
let mandarinYesterdayPromptAndAnswer = {};

let mandarinTodayVersusTomorrowPairGrouping = {};
let mandarinTodayVersusYesterdayPairGrouping = {};
let mandarinYesterdayVersusTomorrowPairGrouping = {};

let mandarinBlackPromptAndAnswer = {};
let mandarinWhitePromptAndAnswer = {};
let mandarinGrayPromptAndAnswer = {};
let mandarinRedPromptAndAnswer = {};
let mandarinBrownPromptAndAnswer = {};
let mandarinYellowPromptAndAnswer = {};
let mandarinBluePromptAndAnswer = {};
let mandarinPurplePromptAndAnswer = {};
let mandarinPinkPromptAndAnswer = {};
let mandarinGreenPromptAndAnswer = {};
let mandarinColorsGrouping = {};

let mandarin0PromptAndAnswer = {};
let mandarin1PromptAndAnswer = {};
let mandarin2PromptAndAnswer = {};
let mandarin3PromptAndAnswer = {};
let mandarin4PromptAndAnswer = {};
let mandarin5PromptAndAnswer = {};
let mandarin6PromptAndAnswer = {};
let mandarin7PromptAndAnswer = {};
let mandarin8PromptAndAnswer = {};
let mandarin9PromptAndAnswer = {};
let mandarinNumbersGrouping = {};

let mandarinPleasePromptAndAnswer = {};
let mandarinSorryPromptAndAnswer = {};
let mandarinExcuseMeQuestionAskingContextPromptAndAnswer = {};
let mandarinWaitAMomentPromptAnswer = {};
let mandarinThankYouPromptAndAnswer = {};
let mandarinAnyTimePromptAndAnswer = {};
let mandarinYoureWelcomePromptAndAnswer = {};
let mandarinExcuseMePassingThroughContextPromptAndAnswer = {};
let mandarinIAppreciateThatPromptAndAnswer = {};
let mandarinYouHaveWorkedHardPromptAndAnswer = {};

//polite phrases 2
let mandarinLongTimeNoSeePromptAndAnswer = {};
let mandarinIllLetYouGoPromptAndAnswer = {};
let mandarinPleaseAdviseMePromptAndAnswer = {};
let mandarinIRespectfullyWaitPromptAndAnswer = {};
let mandarinInMyHumbleOpinionPromptAndAnswer = {};
let mandarinExcuseMeForSayingThisPromptAndAnswer = {};
let mandarinItsOKPromptAndAnswer = {};
let mandarinItsMyDutyPromptAndAnswer = {};
let mandarinExcuseMyLowSkillPromptAndAnswer = {};

//mandarin common words 1
let mandarinToBePromptAndAnswer = {};
let mandarinOfPromptAndAnswer = {};
let mandarinNotPromptAndAnswer = {};
let mandarinOccurPromptAndAnswer = {};
let mandarinPersonPromptAndAnswer = {};
let mandarinIPromptAndAnswer = {};
let mandarinYouPromptAndAnswer = {};
let mandarinHavePromptAndAnswer = {};
let mandarinInPromptAndAnswer = {};


function PromptAndAnswerClass(nameString, textAssociation, imageAssociation, audioAssociation)
{
  this.name = nameString;
  this.textAssociation = textAssociation;
  this.textAssociation.datatype = 'string';
  this.imageAssociation = imageAssociation;
  this.imageAssociation.datatype = 'image';
  this.audioAssociation = audioAssociation;
  this.audioAssociation.datatype = 'audio';

  this.answerHolder = undefined;

  this.arrayOfPossiblePrompts = [this.textAssociation, this.imageAssociation, this.audioAssociation];
  this.arrayOfPossibleAnswers = [this.textAssociation, this.imageAssociation, this.audioAssociation];

  this.xCoordinate = undefined;
  this.yCoordinate = undefined;
  this.xDirection = undefined;
  this.xSpeed = undefined;
  this.ySpeed = undefined;

  this.whackAnAnswerPositionName = undefined;
  this.whackAnAnswerXStartingPosition = undefined;
  this.whackAnAnswerYStartingPosition = undefined;
  this.whackAnAnswerGridIndex = undefined;

  this.oscillationVelocity = undefined;
  this.radians = 0;
  this.circlePathVelocity = 0.25;

  this.width = undefined;
  this.height = undefined;

  this.containsTheCurrentCorrectAnswer = undefined;

  this.shouldBeFlashing = false;
  this.globalCompositeOperationForCanvasContext = 'source-over';
}//end of prompt and answer class


function initializePromptAndAnswerObjects()
{

  //English section
  womanPromptAndAnswer = new PromptAndAnswerClass('woman', 'woman', 'images\\sprites\\PromptsAndAnswers\\woman.png', promptAudio.woman);
  womenPromptAndAnswer = new PromptAndAnswerClass('women', 'women', 'images\\sprites\\PromptsAndAnswers\\women.png', promptAudio.women);

  manPromptAndAnswer = new PromptAndAnswerClass('man', 'man', 'images\\sprites\\PromptsAndAnswers\\man.png', promptAudio.man);
  menPromptAndAnswer = new PromptAndAnswerClass("men", "men", 'images\\sprites\\PromptsAndAnswers\\men.png', promptAudio.men);

  hePromptAndAnswer = new PromptAndAnswerClass('he', 'he', 'images\\sprites\\PromptsAndAnswers\\man.png', promptAudio.he);
  shePromptAndAnswer = new PromptAndAnswerClass('she', 'she', 'images\\sprites\\PromptsAndAnswers\\woman.png', promptAudio.she);

  beePromptAndAnswer = new PromptAndAnswerClass('bee', 'bee', "images\\sprites\\PromptsAndAnswers\\bee.png", promptAudio.englishBee);
  flowerPromptAndAnswer = new PromptAndAnswerClass('flower', 'flower', "images\\sprites\\PromptsAndAnswers\\flower.png", promptAudio.englishFlower);

  //Mandarin section
  mandarinBuyPromptAndAnswer = new PromptAndAnswerClass('mandarin buy','买', "images\\sprites\\PromptsAndAnswers\\Mandarin\\mandarinBuy.png", promptAudio.mandarinBuy);
  mandarinSellPromptAndAnswer = new PromptAndAnswerClass('mandarin sell','卖', "images\\sprites\\PromptsAndAnswers\\Mandarin\\mandarinSell.png", promptAudio.mandarinSell);

  mandarinMomPromptAndAnswer = new PromptAndAnswerClass('mandarin mom', '妈', "images\\sprites\\PromptsAndAnswers\\Mandarin\\mom.png", promptAudio.mandarinMom);
  mandarinHorsePromptAndAnswer = new PromptAndAnswerClass('mandarin horse', '马', "images\\sprites\\PromptsAndAnswers\\Mandarin\\horse.png", promptAudio.mandarinHorse);

  mandarinThisOnePromptAndAnswer = new PromptAndAnswerClass('mandarin this one', '这个', "images\\sprites\\PromptsAndAnswers\\Mandarin\\thisOne.png", promptAudio.mandarinThisOne);
  mandarinThatOnePromptAndAnswer = new PromptAndAnswerClass('mandarin that one', '那个', "images\\sprites\\PromptsAndAnswers\\Mandarin\\thatOne.png", promptAudio.mandarinThatOne);
  mandarinTheseOnesPromptAndAnswer = new PromptAndAnswerClass('mandarin these ones', '这些', "images\\sprites\\PromptsAndAnswers\\Mandarin\\theseOnes.png", promptAudio.mandarinTheseOnes);
  mandarinThoseOnesPromptAndAnswer = new PromptAndAnswerClass('mandarin those ones', '那些', "images\\sprites\\PromptsAndAnswers\\Mandarin\\thoseOnes.png", promptAudio.mandarinThoseOnes);

  mandarinHePromptAndAnswer = new PromptAndAnswerClass('mandarin he', '他', 'images\\sprites\\PromptsAndAnswers\\man.png', promptAudio.mandarinHe);
  mandarinCouchPromptAndAnswer = new PromptAndAnswerClass("mandarin couch", '榻', "images\\sprites\\PromptsAndAnswers\\Mandarin\\couch.png", promptAudio.mandarinCouch);
  mandarinTowerPromptAndAnswer = new PromptAndAnswerClass("mandarin tower", '塔', "images\\sprites\\PromptsAndAnswers\\Mandarin\\tower.png", promptAudio.mandarinTower);

  mandarinThisAreaPromptAndAnswer = new PromptAndAnswerClass('mandarin this area', '这里', "images\\sprites\\PromptsAndAnswers\\Mandarin\\here.png", promptAudio.mandarinThisArea);
  mandarinThatAreaPromptAndAnswer = new PromptAndAnswerClass("mandarin that area", '那里', "images\\sprites\\PromptsAndAnswers\\Mandarin\\there.png", promptAudio.mandarinThatArea);

  mandarinSleepPromptAndAnswer = new PromptAndAnswerClass('mandarin sleep', '睡觉', "images\\sprites\\PromptsAndAnswers\\Mandarin\\sleep.png", promptAudio.mandarinSleep);
  mandarinDumplingsPromptAndAnswer = new PromptAndAnswerClass('mandarin dumplings', '水饺', "images\\sprites\\PromptsAndAnswers\\Mandarin\\dumplings.png", promptAudio.mandarinDumplings);

  mandarinTodayPromptAndAnswer = new PromptAndAnswerClass("mandarin today", '今天', "images\\sprites\\PromptsAndAnswers\\Mandarin\\blankCalendarPage.png", promptAudio.mandarinToday);
  mandarinTomorrowPromptAndAnswer = new PromptAndAnswerClass("mandarin tomorrow", '明天', "images\\sprites\\PromptsAndAnswers\\Mandarin\\blankCalendarPage.png", promptAudio.mandarinTomorrow);
  mandarinYesterdayPromptAndAnswer = new PromptAndAnswerClass('mandarin yesterday', '昨天', "images\\sprites\\PromptsAndAnswers\\Mandarin\\blankCalendarPage.png", promptAudio.mandarinYesterday);

  mandarinBlackPromptAndAnswer = new PromptAndAnswerClass("mandarin black", '黑色', "images\\sprites\\PromptsAndAnswers\\Mandarin\\black.png", promptAudio.mandarinBlack);
  mandarinWhitePromptAndAnswer = new PromptAndAnswerClass("mandarin white", '白色', "images\\sprites\\PromptsAndAnswers\\Mandarin\\white.png", promptAudio.mandarinWhite);
  mandarinGrayPromptAndAnswer = new PromptAndAnswerClass("mandarin gray", '灰色', "images\\sprites\\PromptsAndAnswers\\Mandarin\\gray.png", promptAudio.mandarinGray);
  mandarinRedPromptAndAnswer = new PromptAndAnswerClass("mandarin red", '红色', "images\\sprites\\PromptsAndAnswers\\Mandarin\\red.png", promptAudio.mandarinRed);
  mandarinBrownPromptAndAnswer = new PromptAndAnswerClass("mandarin brown", '棕色', "images\\sprites\\PromptsAndAnswers\\Mandarin\\brown.png", promptAudio.mandarinBrown);
  mandarinYellowPromptAndAnswer = new PromptAndAnswerClass("mandarin yellow", '黄色', "images\\sprites\\PromptsAndAnswers\\Mandarin\\yellow.png", promptAudio.mandarinYellow);
  mandarinPurplePromptAndAnswer = new PromptAndAnswerClass("mandarin purple", '紫色', "images\\sprites\\PromptsAndAnswers\\Mandarin\\purple.png", promptAudio.mandarinPurple);
  mandarinPinkPromptAndAnswer = new PromptAndAnswerClass("mandarin pink", '粉', "images\\sprites\\PromptsAndAnswers\\Mandarin\\pink.png", promptAudio.mandarinPink);
  mandarinGreenPromptAndAnswer = new PromptAndAnswerClass("mandarin green", '绿色', "images\\sprites\\PromptsAndAnswers\\Mandarin\\green.png", promptAudio.mandarinGreen);
  mandarinBluePromptAndAnswer = new PromptAndAnswerClass("mandarin blue", '蓝色', "images\\sprites\\PromptsAndAnswers\\Mandarin\\blue.png", promptAudio.mandarinBlue);

  mandarin0PromptAndAnswer = new PromptAndAnswerClass("mandarin 0", '零', number0, promptAudio.mandarin0);
  mandarin1PromptAndAnswer = new PromptAndAnswerClass("mandarin 1", '一', number1, promptAudio.mandarin1);
  mandarin2PromptAndAnswer = new PromptAndAnswerClass("mandarin 2", '二', number2, promptAudio.mandarin2);
  mandarin3PromptAndAnswer = new PromptAndAnswerClass("mandarin 3", '三', number3, promptAudio.mandarin3);
  mandarin4PromptAndAnswer = new PromptAndAnswerClass("mandarin 4", '四', number4, promptAudio.mandarin4);
  mandarin5PromptAndAnswer = new PromptAndAnswerClass("mandarin 5", '五', number5, promptAudio.mandarin5);
  mandarin6PromptAndAnswer = new PromptAndAnswerClass("mandarin 6", '六', number6, promptAudio.mandarin6);
  mandarin7PromptAndAnswer = new PromptAndAnswerClass("mandarin 7", '七', number7, promptAudio.mandarin7);
  mandarin8PromptAndAnswer = new PromptAndAnswerClass("mandarin 8", '八', number8, promptAudio.mandarin8);
  mandarin9PromptAndAnswer = new PromptAndAnswerClass("mandarin 9", '九', number9, promptAudio.mandarin9);

  //polite phrases 1
  mandarinPleasePromptAndAnswer = new PromptAndAnswerClass('mandarin please', '请', "images\\sprites\\PromptsAndAnswers\\Mandarin\\please.png", promptAudio.mandarinPlease);
  mandarinSorryPromptAndAnswer = new PromptAndAnswerClass('mandarin sorry', '抱歉', "images\\sprites\\PromptsAndAnswers\\Mandarin\\sorry.png", promptAudio.mandarinSorry);
  mandarinExcuseMeQuestionAskingContextPromptAndAnswer = new PromptAndAnswerClass('mandarin excuse me question', '请问', "images\\sprites\\PromptsAndAnswers\\Mandarin\\excuseMeQuestionAskingContext.png", promptAudio.mandarinExcuseMeQuestionAskingContext);
  mandarinWaitAMomentPromptAnswer = new PromptAndAnswerClass('mandarin wait a moment', '稍等', 'images\\sprites\\PromptsAndAnswers\\Mandarin\\oneMoment.png', promptAudio.mandarinWaitAMoment);
  mandarinThankYouPromptAndAnswer = new PromptAndAnswerClass('mandarin thank you', '谢谢', "images\\sprites\\PromptsAndAnswers\\Mandarin\\thankYou.png", promptAudio.mandarinThankYou);
  mandarinAnyTimePromptAndAnswer = new PromptAndAnswerClass('mandarin any time', '随时 ', "images\\sprites\\PromptsAndAnswers\\Mandarin\\anyTime2.png", promptAudio.mandarinAnyTime);
  mandarinYoureWelcomePromptAndAnswer = new PromptAndAnswerClass('mandarin youre welcome', '别客气', "images\\sprites\\PromptsAndAnswers\\Mandarin\\youreWelcome.png", promptAudio.mandarinYoureWelcome);
  mandarinExcuseMePassingThroughContextPromptAndAnswer = new PromptAndAnswerClass('mandarin excuse me passing through', '借过', "images\\sprites\\PromptsAndAnswers\\Mandarin\\excuseMePassingThroughContext.png", promptAudio.mandarinExcuseMePassingThroughContext);
  mandarinIAppreciateThatPromptAndAnswer = new PromptAndAnswerClass('mandarin I appreciate that', '我很感激', "images\\sprites\\PromptsAndAnswers\\Mandarin\\iAppreciateThat.png", promptAudio.mandarinIAppreciateThat);
  mandarinYouHaveWorkedHardPromptAndAnswer = new PromptAndAnswerClass('mandarin you have worked hard', '您辛苦', "images\\sprites\\PromptsAndAnswers\\Mandarin\\youHaveWorkedHard.png", promptAudio.mandarinYouHaveWorkedHard);

  //polite phrases 2
  mandarinLongTimeNoSeePromptAndAnswer = new PromptAndAnswerClass('mandarin long time no see', '久违 ', "images\\sprites\\PromptsAndAnswers\\Mandarin\\longTimeNoSee.png", promptAudio.mandarinLongTimeNoSee);
  mandarinIllLetYouGoPromptAndAnswer = new PromptAndAnswerClass('mandarin Ill let you go', '您失陪', "images\\sprites\\PromptsAndAnswers\\Mandarin\\illLetYouGo.png", promptAudio.mandarinIllLetYouGo);
  mandarinPleaseAdviseMePromptAndAnswer = new PromptAndAnswerClass('mandarin please advise me', '您指教', "images\\sprites\\PromptsAndAnswers\\Mandarin\\pleaseAdviseMe.png", promptAudio.mandarinPleaseAdviseMe);
  mandarinIRespectfullyWaitPromptAndAnswer = new PromptAndAnswerClass('mandarin I respectfully wait', '我恭候', "images\\sprites\\PromptsAndAnswers\\Mandarin\\iRespectfullyWait.png", promptAudio.mandarinIRespectfullyWait);
  mandarinInMyHumbleOpinionPromptAndAnswer = new PromptAndAnswerClass('mandarin in my humble opinion', ' 依本人拙见', "images\\sprites\\PromptsAndAnswers\\Mandarin\\myHumbleOpinion.png", promptAudio.mandarinMyHumbleOpinion);
  mandarinExcuseMeForSayingThisPromptAndAnswer = new PromptAndAnswerClass('mandarin excuse me for saying this', '冒昧 ', 'images\\sprites\\PromptsAndAnswers\\Mandarin\\excuseMeForSayingThis.png', promptAudio.mandarinExcuseMeForSayingThis);
  mandarinItsOKPromptAndAnswer = new PromptAndAnswerClass('mandarin its OK', '没关系', "images\\sprites\\PromptsAndAnswers\\Mandarin\\itsOK.png", promptAudio.mandarinItsOK);
  mandarinItsMyDutyPromptAndAnswer = new PromptAndAnswerClass('mandarin its my duty', '我应该的 ', "images\\sprites\\PromptsAndAnswers\\Mandarin\\itsMyDuty.png", promptAudio.mandarinItsMyDuty);
  mandarinExcuseMyLowSkillPromptAndAnswer = new PromptAndAnswerClass('mandarin excuse my low skill', '献丑', "images\\sprites\\PromptsAndAnswers\\Mandarin\\excuseMyLowSkill.png", promptAudio.mandarinSorryForMyLowSkill);

  //common words
  mandarinToBePromptAndAnswer = new PromptAndAnswerClass('mandarin to be', '是 ', "images\\sprites\\PromptsAndAnswers\\Mandarin\\toBeImage.png", promptAudio.mandarinToBe);
  mandarinOfPromptAndAnswer = new PromptAndAnswerClass('mandarin of', '的 ', "images\\sprites\\PromptsAndAnswers\\Mandarin\\of.png", promptAudio.mandarinOf);
  mandarinNotPromptAndAnswer = new PromptAndAnswerClass('mandarin not', '不 ', "images\\sprites\\PromptsAndAnswers\\Mandarin\\notImage.png", promptAudio.mandarinNot);
  mandarinOccurPromptAndAnswer = new PromptAndAnswerClass('mandarin occur/le', '了 ', "images\\sprites\\PromptsAndAnswers\\Mandarin\\leImage.png", promptAudio.mandarinLe);
  mandarinPersonPromptAndAnswer =  new PromptAndAnswerClass('mandarin person', '人	 ', "images\\sprites\\PromptsAndAnswers\\Mandarin\\personImage.png", promptAudio.mandarinPerson);
  mandarinIPromptAndAnswer =  new PromptAndAnswerClass('mandarin I', '我	 ', "images\\sprites\\PromptsAndAnswers\\Mandarin\\mandarinMeMyIImage.png", promptAudio.mandarinI);
  mandarinYouPromptAndAnswer =  new PromptAndAnswerClass('mandarin You', '你', "images\\sprites\\PromptsAndAnswers\\Mandarin\\you.png", promptAudio.mandarinYou);
  mandarinAtPromptAndAnswer = new PromptAndAnswerClass('mandarin At', '在', "images\\sprites\\PromptsAndAnswers\\Mandarin\\at.png", promptAudio.mandarinAt);
  mandarinHavePromptAndAnswer = new PromptAndAnswerClass('mandarin Have', '有', "images\\sprites\\PromptsAndAnswers\\Mandarin\\have.png", promptAudio.mandarinHave);
  mandarinInPromptAndAnswer = new PromptAndAnswerClass('mandarin In', '中', "images\\sprites\\PromptsAndAnswers\\Mandarin\\in.png", promptAudio.mandarinIn);

  //Vietnamese Section
}

function populatePromptAndAnswerArrays()
{
  promptsAndAnswersManager.arrayOfLanguagePromptAndAnswerGroupings = [];

  promptsAndAnswersManager.arrayOfLogicalEnglishPromptAnswerGroupings = [];
  promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings = [];
  promptsAndAnswersManager.arrayOfLogicalVietnamesePromptAnswerGroupings = [];

  womanVersusWomenPairGrouping = {name: 'woman vs women', arrayOfObjects: []};
  manVersusMenPairGrouping = {name: 'man vs men', arrayOfObjects: []};
  heVersusShePairGrouping = {name: 'he vs she', arrayOfObjects: []};

  flowerVersusBeePairGrouping = {name: 'flower vs bee', arrayOfObjects: []};

  mandarinBuyVersusMandarinSellPairGrouping = {name: 'mandarin buy vs sell', arrayOfObjects:[]};
  mandarinMomVersusHorsePairGrouping = {name: 'mandarin mom vs horse', arrayOfObjects:[]};
  mandarinThisVersusThatPairGrouping = {name: 'mandarin this vs that', arrayOfObjects:[]};
  mandarinTheseVersusThosePairGrouping = {name: 'mandarin these vs those', arrayOfObjects:[]};
  mandarinHeVersusCouchPairGrouping = {name: 'mandarin he vs couch', arrayOfObjects:[]};
  mandarinHeVersusTowerPairGrouping = {name: 'mandarin he vs tower', arrayOfObjects:[]};
  mandarinHereVersusTherePairGrouping = {name: 'mandarin here vs there', arrayOfObjects:[]};
  mandarinSleepVersusDumplingsPairGrouping = {name: 'mandarin sleep vs dumplings', arrayOfObjects:[]};
  mandarinTodayVersusTomorrowPairGrouping = {name: 'mandarin today vs tomorrow', arrayOfObjects:[]};
  mandarinTodayVersusYesterdayPairGrouping = {name: 'mandarin today vs yesterday', arrayOfObjects:[]};
  mandarinYesterdayVersusTomorrowPairGrouping = {name: 'mandarin yesterday vs tomorrow', arrayOfObjects:[]};
  mandarinColorsGrouping = {name: 'mandarin colors', arrayOfObjects:[]};
  mandarinNumbersGrouping = {name: 'mandarin numbers', arrayOfObjects:[]};
  mandarinPolitePhrasesGroup1 = {name: 'mandarin polite phrases group 1', arrayOfObjects:[]};
  mandarinPolitePhrasesGroup2 = {name: 'mandarin polite phrases group 2', arrayOfObjects:[]};
  mandarinCommonWordsGroup1 = {name: 'mandarin common words group 1', arrayOfObjects:[]};

  //English
  womanVersusWomenPairGrouping.arrayOfObjects.push(womanPromptAndAnswer);
  womanVersusWomenPairGrouping.arrayOfObjects.push(womenPromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalEnglishPromptAnswerGroupings.push(womanVersusWomenPairGrouping);

  manVersusMenPairGrouping.arrayOfObjects.push(manPromptAndAnswer);
  manVersusMenPairGrouping.arrayOfObjects.push(menPromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalEnglishPromptAnswerGroupings.push(manVersusMenPairGrouping);

  heVersusShePairGrouping.arrayOfObjects.push(hePromptAndAnswer);
  heVersusShePairGrouping.arrayOfObjects.push(shePromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalEnglishPromptAnswerGroupings.push(heVersusShePairGrouping);

  flowerVersusBeePairGrouping.arrayOfObjects.push(flowerPromptAndAnswer);
  flowerVersusBeePairGrouping.arrayOfObjects.push(beePromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalEnglishPromptAnswerGroupings.push(flowerVersusBeePairGrouping);

  promptsAndAnswersManager.arrayOfLanguagePromptAndAnswerGroupings.push(promptsAndAnswersManager.arrayOfLogicalEnglishPromptAnswerGroupings);

  //mandarin
  mandarinBuyVersusMandarinSellPairGrouping.arrayOfObjects.push(mandarinBuyPromptAndAnswer);
  mandarinBuyVersusMandarinSellPairGrouping.arrayOfObjects.push(mandarinSellPromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings.push(mandarinBuyVersusMandarinSellPairGrouping);

  mandarinMomVersusHorsePairGrouping.arrayOfObjects.push(mandarinMomPromptAndAnswer);
  mandarinMomVersusHorsePairGrouping.arrayOfObjects.push(mandarinHorsePromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings.push(mandarinMomVersusHorsePairGrouping);

  mandarinThisVersusThatPairGrouping.arrayOfObjects.push(mandarinThisOnePromptAndAnswer);
  mandarinThisVersusThatPairGrouping.arrayOfObjects.push(mandarinThatOnePromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings.push(mandarinThisVersusThatPairGrouping);

  mandarinTheseVersusThosePairGrouping.arrayOfObjects.push(mandarinTheseOnesPromptAndAnswer);
  mandarinTheseVersusThosePairGrouping.arrayOfObjects.push(mandarinThoseOnesPromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings.push(mandarinTheseVersusThosePairGrouping);

  mandarinHeVersusCouchPairGrouping.arrayOfObjects.push(mandarinHePromptAndAnswer);
  mandarinHeVersusCouchPairGrouping.arrayOfObjects.push(mandarinCouchPromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings.push(mandarinHeVersusCouchPairGrouping);

  mandarinHeVersusTowerPairGrouping.arrayOfObjects.push(mandarinHePromptAndAnswer);
  mandarinHeVersusTowerPairGrouping.arrayOfObjects.push(mandarinTowerPromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings.push(mandarinHeVersusTowerPairGrouping);

  mandarinHereVersusTherePairGrouping.arrayOfObjects.push(mandarinThisAreaPromptAndAnswer);
  mandarinHereVersusTherePairGrouping.arrayOfObjects.push(mandarinThatAreaPromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings.push(mandarinHereVersusTherePairGrouping);

  mandarinSleepVersusDumplingsPairGrouping.arrayOfObjects.push(mandarinSleepPromptAndAnswer);
  mandarinSleepVersusDumplingsPairGrouping.arrayOfObjects.push(mandarinDumplingsPromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings.push(mandarinSleepVersusDumplingsPairGrouping);

  mandarinTodayVersusTomorrowPairGrouping.arrayOfObjects.push(mandarinTodayPromptAndAnswer);
  mandarinTodayVersusTomorrowPairGrouping.arrayOfObjects.push(mandarinTomorrowPromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings.push(mandarinTodayVersusTomorrowPairGrouping);

  mandarinTodayVersusYesterdayPairGrouping.arrayOfObjects.push(mandarinTodayPromptAndAnswer);
  mandarinTodayVersusYesterdayPairGrouping.arrayOfObjects.push(mandarinYesterdayPromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings.push(mandarinTodayVersusYesterdayPairGrouping);

  mandarinYesterdayVersusTomorrowPairGrouping.arrayOfObjects.push(mandarinYesterdayPromptAndAnswer);
  mandarinYesterdayVersusTomorrowPairGrouping.arrayOfObjects.push(mandarinTomorrowPromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings.push(mandarinYesterdayVersusTomorrowPairGrouping);

  mandarinColorsGrouping.arrayOfObjects.push(mandarinBlackPromptAndAnswer);
  mandarinColorsGrouping.arrayOfObjects.push(mandarinWhitePromptAndAnswer);
  mandarinColorsGrouping.arrayOfObjects.push(mandarinGrayPromptAndAnswer);
  mandarinColorsGrouping.arrayOfObjects.push(mandarinRedPromptAndAnswer);
  mandarinColorsGrouping.arrayOfObjects.push(mandarinBrownPromptAndAnswer);
  mandarinColorsGrouping.arrayOfObjects.push(mandarinYellowPromptAndAnswer);
  mandarinColorsGrouping.arrayOfObjects.push(mandarinPurplePromptAndAnswer);
  mandarinColorsGrouping.arrayOfObjects.push(mandarinPinkPromptAndAnswer);
  mandarinColorsGrouping.arrayOfObjects.push(mandarinGreenPromptAndAnswer);
  mandarinColorsGrouping.arrayOfObjects.push(mandarinBluePromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings.push(mandarinColorsGrouping);

  mandarinNumbersGrouping.arrayOfObjects.push(mandarin0PromptAndAnswer);
  mandarinNumbersGrouping.arrayOfObjects.push(mandarin1PromptAndAnswer);
  mandarinNumbersGrouping.arrayOfObjects.push(mandarin2PromptAndAnswer);
  mandarinNumbersGrouping.arrayOfObjects.push(mandarin3PromptAndAnswer);
  mandarinNumbersGrouping.arrayOfObjects.push(mandarin4PromptAndAnswer);
  mandarinNumbersGrouping.arrayOfObjects.push(mandarin5PromptAndAnswer);
  mandarinNumbersGrouping.arrayOfObjects.push(mandarin6PromptAndAnswer);
  mandarinNumbersGrouping.arrayOfObjects.push(mandarin7PromptAndAnswer);
  mandarinNumbersGrouping.arrayOfObjects.push(mandarin8PromptAndAnswer);
  mandarinNumbersGrouping.arrayOfObjects.push(mandarin9PromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings.push(mandarinNumbersGrouping);

  mandarinPolitePhrasesGroup1.arrayOfObjects.push(mandarinPleasePromptAndAnswer);
  mandarinPolitePhrasesGroup1.arrayOfObjects.push(mandarinSorryPromptAndAnswer);
  mandarinPolitePhrasesGroup1.arrayOfObjects.push(mandarinExcuseMeQuestionAskingContextPromptAndAnswer);
  mandarinPolitePhrasesGroup1.arrayOfObjects.push(mandarinWaitAMomentPromptAnswer);
  mandarinPolitePhrasesGroup1.arrayOfObjects.push(mandarinThankYouPromptAndAnswer);
  mandarinPolitePhrasesGroup1.arrayOfObjects.push(mandarinAnyTimePromptAndAnswer);
  mandarinPolitePhrasesGroup1.arrayOfObjects.push(mandarinYoureWelcomePromptAndAnswer);
  mandarinPolitePhrasesGroup1.arrayOfObjects.push(mandarinExcuseMePassingThroughContextPromptAndAnswer);
  mandarinPolitePhrasesGroup1.arrayOfObjects.push(mandarinIAppreciateThatPromptAndAnswer);
  mandarinPolitePhrasesGroup1.arrayOfObjects.push(mandarinYouHaveWorkedHardPromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings.push(mandarinPolitePhrasesGroup1);

  mandarinPolitePhrasesGroup2.arrayOfObjects.push(mandarinLongTimeNoSeePromptAndAnswer);
  mandarinPolitePhrasesGroup2.arrayOfObjects.push(mandarinIllLetYouGoPromptAndAnswer);
  mandarinPolitePhrasesGroup2.arrayOfObjects.push(mandarinPleaseAdviseMePromptAndAnswer);
  mandarinPolitePhrasesGroup2.arrayOfObjects.push(mandarinIRespectfullyWaitPromptAndAnswer);
  mandarinPolitePhrasesGroup2.arrayOfObjects.push(mandarinInMyHumbleOpinionPromptAndAnswer);
  mandarinPolitePhrasesGroup2.arrayOfObjects.push(mandarinExcuseMeForSayingThisPromptAndAnswer);
  mandarinPolitePhrasesGroup2.arrayOfObjects.push(mandarinItsOKPromptAndAnswer);
  mandarinPolitePhrasesGroup2.arrayOfObjects.push(mandarinItsMyDutyPromptAndAnswer);
  mandarinPolitePhrasesGroup2.arrayOfObjects.push(mandarinYouHaveWorkedHardPromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings.push(mandarinPolitePhrasesGroup2);

  mandarinCommonWordsGroup1.arrayOfObjects.push(mandarinToBePromptAndAnswer);
  mandarinCommonWordsGroup1.arrayOfObjects.push(mandarinOfPromptAndAnswer);
  mandarinCommonWordsGroup1.arrayOfObjects.push(mandarinNotPromptAndAnswer);
  mandarinCommonWordsGroup1.arrayOfObjects.push(mandarinOccurPromptAndAnswer);
  mandarinCommonWordsGroup1.arrayOfObjects.push(mandarinPersonPromptAndAnswer);
  mandarinCommonWordsGroup1.arrayOfObjects.push(mandarinIPromptAndAnswer);
  mandarinCommonWordsGroup1.arrayOfObjects.push(mandarinYouPromptAndAnswer);
  mandarinCommonWordsGroup1.arrayOfObjects.push(mandarinAtPromptAndAnswer);
  mandarinCommonWordsGroup1.arrayOfObjects.push(mandarinHavePromptAndAnswer);
  mandarinCommonWordsGroup1.arrayOfObjects.push(mandarinInPromptAndAnswer);
  promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings.push(mandarinCommonWordsGroup1);

  promptsAndAnswersManager.arrayOfLanguagePromptAndAnswerGroupings.push(promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings);

  //vietnamese
  // centralVietnameseCasualConversationPatternsGroup1.arrayOfObjects.push(centralVietnameseWhatsYourNameQandA);
  promptsAndAnswersManager.arrayOfLanguagePromptAndAnswerGroupings.push(promptsAndAnswersManager.arrayOfLogicalVietnamesePromptAnswerGroupings);
}
function PromptersManager()
{
  this.instantiatePrompters = function()
  {
    textPrompter = new TextPrompter();
    imagePrompter = new ImagePrompter();
    audioPrompter = new AudioPrompter();
    imageAndAudioPrompterForCVCs = new ImageAndAudioPrompterForCVCs();
  }

  this.currentPrompter = undefined;
  this.loadCurrentPrompter = function(prompterToLoad)
  {
    this.currentPrompter = prompterToLoad;
  }


  this.loadAppropriatePrompterBasedOnCurrentPromptsDataType = function()
  {
    // console.log(promptsAndAnswersManager.dataTypeOfCurrentPrompt.charAt(0));
    if (promptsAndAnswersManager.dataTypeOfCurrentPrompt === 'string')
    {
      
      this.loadCurrentPrompter(textPrompter);

    } else if (promptsAndAnswersManager.dataTypeOfCurrentPrompt === 'IMG')
    {
     this.loadCurrentPrompter(imagePrompter);
   } else if (promptsAndAnswersManager.dataTypeOfCurrentPrompt === 'AUDIO')
   {
     this.loadCurrentPrompter(audioPrompter);
   }
  }

  this.shouldBeDrawingAPrompt = false;
  this.promptThePlayer = function()
  {
      if (typeof(this.currentPrompter) != 'undefined') {
		  this.currentPrompter.promptThePlayer();
	  }
  }

  this.promptAudioAnswersWhenAppropriate = function()
  {
    let randomNumber = Math.random();
    this.playAudioAnswersBackToBack(randomNumber);

  }//end of prompt audio answers when appropriate

  this.playAudioAnswersBackToBack = function(randomNumber)
  {

    this.flashInterval = undefined;
    this.flashInterval = new frameInterval(this.toggleAudioAnswersFlashWhenPlaying,100);

    if (randomNumber < 0.5)
    {
      promptsAndAnswersManager.currentCorrectAnswer.play();
      promptsAndAnswersManager.currentCorrectAnswer.shouldBeFlashing = true;
      promptsAndAnswersManager.currentCorrectAnswer.sfx.onended = function()
      {
        promptsAndAnswersManager.currentCorrectAnswer.shouldBeFlashing = false;
        promptsAndAnswersManager.currentIncorrectAnswer.play();
        promptsAndAnswersManager.currentIncorrectAnswer.shouldBeFlashing = true;
        promptsAndAnswersManager.currentIncorrectAnswer.sfx.onended = function()
        {
          promptsAndAnswersManager.currentCorrectAnswer.sfx.onended = undefined;
          promptsAndAnswersManager.currentIncorrectAnswer.sfx.onended = undefined;
          promptsAndAnswersManager.currentIncorrectAnswer.shouldBeFlashing = false;
          promptsAndAnswersManager.currentCorrectAnswer.shouldBeFlashing = false;
          promptersManager.flashInterval.stop();
          musicManager.endDuck();
        }//clear both onended functions to account for unintended play calls
      }
    } else
    {
      promptsAndAnswersManager.currentIncorrectAnswer.play();
      promptsAndAnswersManager.currentIncorrectAnswer.shouldBeFlashing = true;
      promptsAndAnswersManager.currentIncorrectAnswer.sfx.onended = function()
      {
        promptsAndAnswersManager.currentIncorrectAnswer.shouldBeFlashing = false;
        promptsAndAnswersManager.currentCorrectAnswer.play();
        promptsAndAnswersManager.currentCorrectAnswer.shouldBeFlashing = true;
        promptsAndAnswersManager.currentCorrectAnswer.sfx.onended = function()
        {
          promptsAndAnswersManager.currentCorrectAnswer.sfx.onended = undefined;
          promptsAndAnswersManager.currentIncorrectAnswer.sfx.onended = undefined;
          promptsAndAnswersManager.currentCorrectAnswer.shouldBeFlashing = false;
          promptsAndAnswersManager.currentIncorrectAnswer.shouldBeFlashing = false;
          promptersManager.flashInterval.stop();
          musicManager.endDuck();
        }//clear both onended functions to account for unintended play calls
      }//end of incorrect answer audio being played first
    }//end of else for coin flip
  }

  this.globalCompositeOperationForCanvasContext = 'source-over';
  this.highlightedAnswerCurrentAlpha = 1;
  this.toggleAudioAnswersFlashWhenPlaying = function()
  {
    if (this.globalCompositeOperationForCanvasContext !== 'lighten')
    {
      this.globalCompositeOperationForCanvasContext = 'lighten';
    } else {
      this.globalCompositeOperationForCanvasContext = 'source-over';
    }

    if (promptersManager.highlightedAnswerCurrentAlpha === 1)
    {
      promptersManager.highlightedAnswerCurrentAlpha = 0;
    } else if (promptersManager.highlightedAnswerCurrentAlpha === 0){
      promptersManager.highlightedAnswerCurrentAlpha = 1;
    }
  }

  this.flashInterval = undefined;

  this.drawPromptsWhenAppropriate = function()
  {
    if (this.shouldBeDrawingAPrompt)
    {
      this.currentPrompter.updatePromptImage();
      this.currentPrompter.drawThePrompt();
    }
  }

}//end of prompters manager

// let promptersManager = new PromptersManager();
var promptersManager = new PromptersManager();
function AudioPrompter()
{
  this.name = 'audio prompter';
  this.currentAudioPrompt = undefined;
  this.image = "images\\placeholderPlayButtonImage.png";

  this.draw = function()
  {
    drawFromSheet(this.image, gameCanvas.width/2 - this.image.width/2,gameCanvas.height/2 - this.image.height/2);
    //gameCanvasContext.drawImage(this.image, gameCanvas.width/2 - this.image.width/2,gameCanvas.height/2 - this.image.height/2);
  }

  this.loadCurrentAudioPrompt = function(audioTagToLoad)
  {
    this.currentAudioPrompt = audioTagToLoad;
  }

  this.togglePromptingBoolean = function()
  {
    if (promptersManager.shouldBeDrawingAPrompt)
    {
      promptersManager.shouldBeDrawingAPrompt = false;
      this.currentWidth = 150;
      this.currentHeight = 150;
    } else {
      promptersManager.shouldBeDrawingAPrompt = true;
      this.currentHeight = 150;
      this.currentHeight = 150;
    }
  }

  this.backgroundColor = 'rgb(224,224,224)';
  this.currentWidth = 150;
  this.currentHeight = 150;

  this.updatePromptImage = function()
  {
    this.currentWidth += gameClassManager.currentGame.FRAME_RATE/5;
    this.currentHeight += gameClassManager.currentGame.FRAME_RATE/5;
  }

  this.drawThePrompt = function()
  {
    if (this.image !== undefined)
    {
      gameCanvasContext.fillStyle = this.backgroundColor;
      gameCanvasContext.fillRect(gameCanvas.width/2 - this.currentWidth/2,gameCanvas.height/2 - this.currentHeight/2,
                                 this.currentWidth,this.currentHeight);

     customFontFillText(["What do you hear", symbolQuestionMarkImage],
                         this.currentWidth*0.15 /*font size*/,this.currentWidth*0.055 /*spacing*/,
                         gameCanvas.width/2 - this.currentWidth/2 + this.currentHeight*0.0125,//xCoordinate
                         gameCanvas.height/2 - this.currentHeight/2);//yCoordinate
      //(img,
      //sourceImageStartingX,SourceImageStartingY,SourceImageWidthToCrop,SourceImageHeightToCrop,
      //targetCanvasXCoordinateToStartDrawing,targetCanvasYCoordinateToStartDrawing,
      //widthOfImageToDrawOnTargetCanvas,heightOfImageToDrawOnTargetCanvas);
      drawFromSheet(this.image, gameCanvas.width/2 - this.currentWidth/2 + this.currentWidth*0.15,
      gameCanvas.height/2 - this.currentHeight/2 + this.currentHeight*0.25,
      this.currentWidth*0.7,this.currentHeight*0.65);
      // gameCanvasContext.drawImage(this.image,
      //                      0,0, 1000,750,
      //                      gameCanvas.width/2 - this.currentWidth/2 + this.currentWidth*0.15,
      //                      gameCanvas.height/2 - this.currentHeight/2 + this.currentHeight*0.25,
      //                      this.currentWidth*0.7,this.currentHeight*0.65);
    }
  }


  this.promptThePlayer = function()
  {
    this.currentAudioPrompt.play();
    this.togglePromptingBoolean();
    setTimeout(this.togglePromptingBoolean,2000);
  }
}

let audioPrompter;
function TextPrompter()
{
  this.name = 'text prompter';
  this.currentText = undefined;
  this.loadCurrentText = function(textToLoad)
  {
    this.currentText = textToLoad;
  }

  this.currentTextPixelSize = 30;

  this.backgroundColor = 'rgb(224,224,224)';
  this.currentWidth = 150;
  this.currentHeight = 150;

  this.updatePromptImage = function()
  {
    this.currentWidth += gameClassManager.currentGame.FRAME_RATE/5;
    this.currentHeight += gameClassManager.currentGame.FRAME_RATE/5;
    this.currentTextPixelSize += 1;
  }

  this.drawThePrompt = function()
  {
    gameCanvasContext.fillStyle = this.backgroundColor;
    gameCanvasContext.fillRect(gameCanvas.width/2 - this.currentWidth/2,gameCanvas.height/2 - this.currentHeight/2,
                               this.currentWidth,this.currentHeight);

   customFontFillText(["What is this", symbolQuestionMarkImage],
                       this.currentWidth*0.15 /*font size*/,this.currentWidth*0.06 /*spacing*/,
                       gameCanvas.width/2 - this.currentWidth/2 + this.currentWidth*0.1,//xCoordinate
                       gameCanvas.height/2 - this.currentHeight/2);//yCoordinate

    if (this.currentText !== undefined)
    {
      // customFontFillText(this.currentText, this.currentWidth*0.45 /*font size*/,this.currentWidth*0.2 /*spacing*/,
      // gameCanvas.width/2 - this.currentWidth/2 + this.currentWidth*0.1,//xCoordinate
      // gameCanvas.height/2 - this.currentHeight/2 + this.currentHeight*0.25//yCoordinate
      // );
      gameCanvasContext.fillStyle = 'black';
      gameCanvasContext.font = this.currentTextPixelSize + 'px Helvetica';
      gameCanvasContext.fillText(this.currentText,
      gameCanvas.width/2 - this.currentWidth*0.175, /* - this.currentWidth/2 + this.currentWidth*0.1*///xCoordinate
      gameCanvas.height/2/* - this.currentHeight/2 + this.currentHeight*0.25*///yCoordinate
      )
    }
  }

  this.togglePromptingBoolean = function()
  {
    if (promptersManager.shouldBeDrawingAPrompt)
    {
      promptersManager.shouldBeDrawingAPrompt = false;
      this.currentHeight = 150;
      this.currentHeight = 150;
      this.currentTextPixelSize = 30;
      if (promptsAndAnswersManager.currentAnswerDataType === "AUDIO")
      {
        promptersManager.promptAudioAnswersWhenAppropriate();
      }
    } else {
      promptersManager.shouldBeDrawingAPrompt = true;
      this.currentHeight = 150;
      this.currentHeight = 150;
      this.currentTextPixelSize = 30;
    }
  }

  this.promptThePlayer = function()
  {
    this.togglePromptingBoolean();
    setTimeout(this.togglePromptingBoolean,2000);
  }
}

let textPrompter;
function ImagePrompter()
{
  this.name = 'image prompter';
  this.image = undefined;
  this.loadCurrentImage = function(imageToLoad)
  {
    console.log("this.loadCurrentImage " + this.image);
    this.image = imageToLoad;
  }

  this.backgroundColor = 'rgb(224,224,224)';
  this.currentWidth = 150;
  this.currentHeight = 150;

  this.updatePromptImage = function()
  {
    this.currentWidth += gameClassManager.currentGame.FRAME_RATE/5;
    this.currentHeight += gameClassManager.currentGame.FRAME_RATE/5;
  }

  this.drawThePrompt = function()
  {
    if (this.image !== undefined)
    {
      gameCanvasContext.fillStyle = this.backgroundColor;
      gameCanvasContext.fillRect(gameCanvas.width/2 - this.currentWidth/2,gameCanvas.height/2 - this.currentHeight/2,
                                 this.currentWidth,this.currentHeight);

     customFontFillText(["What do you see", symbolQuestionMarkImage],
                         this.currentWidth*0.15 /*font size*/,this.currentWidth*0.055 /*spacing*/,
                         gameCanvas.width/2 - this.currentWidth/2  + this.currentWidth*0.0175,//xCoordinate
                         gameCanvas.height/2 - this.currentHeight/2);//yCoordinate
      //(img,
      //sourceImageStartingX,SourceImageStartingY,SourceImageWidthToCrop,SourceImageHeightToCrop,
      //targetCanvasXCoordinateToStartDrawing,targetCanvasYCoordinateToStartDrawing,
      //widthOfImageToDrawOnTargetCanvas,heightOfImageToDrawOnTargetCanvas);
      drawFromSheet(this.image,
                    gameCanvas.width/2 - this.currentWidth/2 + this.currentWidth*0.225,gameCanvas.height/2 - this.currentHeight/2 + this.currentHeight*0.2,
                    this.currentWidth*0.6,this.currentHeight*0.7);
      // gameCanvasContext.drawImage(this.image,
      //                      0,0, 1000,750,
      //                      gameCanvas.width/2 - this.currentWidth/2 + this.currentWidth*0.225,
      //                      gameCanvas.height/2 - this.currentHeight/2 + this.currentHeight*0.2,
      //                      this.currentWidth*0.6,this.currentHeight*0.7);
    }

    dateAndTime.checkForNecessityOfUsingDatesForImagePrompter();
    if (dateAndTime.shouldDrawADate)
    {
      customFontFillText( (dateAndTime.dateToDraw.month + 1).toString(), this.currentWidth*0.1 /*font size*/, this.currentWidth*0.055 /*spacing*/,
                         gameCanvas.width/2 - 20, /*- this.currentWidth/2  + this.currentWidth*0.0175,*///xCoordinate)
                         gameCanvas.height/2 - this.currentHeight/2 + this.currentHeight*0.3);/* - this.currentHeight/2 + this.currentHeight*0.1);*///yCoordinate

      customFontFillText(dateAndTime.dateToDraw.day.toString(), this.currentWidth*0.15 /*font size*/,this.currentWidth*0.055 /*spacing*/,
                         gameCanvas.width/2 - 20,//xCoordinate)
                         gameCanvas.height/2);//yCoordinate
    }
  }

  this.togglePromptingBoolean = function()
  {
    if (promptersManager.shouldBeDrawingAPrompt)
    {
      promptersManager.shouldBeDrawingAPrompt = false;
      this.currentWidth = 150;
      this.currentHeight = 150;
      if (promptsAndAnswersManager.currentAnswerDataType === "AUDIO")
      {
        promptersManager.promptAudioAnswersWhenAppropriate();
      }
    } else {
      promptersManager.shouldBeDrawingAPrompt = true;
      this.currentHeight = 150;
      this.currentHeight = 150;
    }
  }

  this.promptThePlayer = function()
  {
    this.togglePromptingBoolean();
    setTimeout(this.togglePromptingBoolean,2000);
  }
}

let imagePrompter;
function ImageAndAudioPrompterForCVCs()
{
  this.name = 'Image And Audio Prompter';
  this.audio = undefined;
  this.image = undefined;

  this.loadCurrentImage = function(imageToLoad)
  {
    this.image = imageToLoad;
  }

  this.loadCurrentAudio = function(audioToLoad)
  {
    this.audio = audioToLoad;
  }

  this.backgroundColor = 'white';
  this.currentWidth = 150;
  this.currentHeight = 150;

  this.updatePromptImage = function()
  {
    this.currentWidth += gameClassManager.currentGame.FRAME_RATE/5;
    this.currentHeight += gameClassManager.currentGame.FRAME_RATE/5;
  }

  this.drawThePrompt = function()
  {
    if (this.image !== undefined)
    {


      gameCanvasContext.fillStyle = this.backgroundColor;
      gameCanvasContext.fillRect(gameCanvas.width/2 - this.currentWidth/2,gameCanvas.height/2 - this.currentHeight/2,
                                 this.currentWidth,this.currentHeight);

     customFontFillText(["Spell this"],
                         this.currentWidth*0.15 /*font size*/,this.currentWidth*0.055 /*spacing*/,
                         gameCanvas.width/2 - this.currentWidth/2  + this.currentWidth*0.0175,//xCoordinate
                         gameCanvas.height/2 - this.currentHeight/2);//yCoordinate
      //(img,
      //sourceImageStartingX,SourceImageStartingY,SourceImageWidthToCrop,SourceImageHeightToCrop,
      //targetCanvasXCoordinateToStartDrawing,targetCanvasYCoordinateToStartDrawing,
      //widthOfImageToDrawOnTargetCanvas,heightOfImageToDrawOnTargetCanvas);
      
      drawFromSheet(this.image,
                            gameCanvas.width/2 - this.currentWidth/2 + this.currentWidth*0.225,
                           gameCanvas.height/2 - this.currentHeight/2 + this.currentHeight*0.2,
                           this.currentWidth*0.6,this.currentHeight*0.7);
      /*gameCanvasContext.drawImage(this.image,
                           0,0, 1000,750,
                           gameCanvas.width/2 - this.currentWidth/2 + this.currentWidth*0.225,
                           gameCanvas.height/2 - this.currentHeight/2 + this.currentHeight*0.2,
                           this.currentWidth*0.6,this.currentHeight*0.7);*/
    }
  }

  this.togglePromptingBoolean = function()
  {
    if (promptersManager.shouldBeDrawingAPrompt)
    {
      promptersManager.shouldBeDrawingAPrompt = false;
      this.currentWidth = 150;
      this.currentHeight = 150;
    } else {
      promptersManager.shouldBeDrawingAPrompt = true;
      this.currentHeight = 150;
      this.currentHeight = 150;
    }
  }

  this.promptThePlayer = function()
  {
    this.togglePromptingBoolean();
    this.audio.play();
    setTimeout(this.togglePromptingBoolean,2000);
  }
}

let imageAndAudioPrompterForCVCs;
function PromptsAndAnswersManager()
{
  this.arrayOfLanguagePromptAndAnswerGroupings = [];

  this.arrayOfLogicalEnglishPromptAnswerGroupings = [];
  this.arrayOfLogicalMandarinPromptAnswerGroupings = [];
  this.arrayOfLogicalVietnamesePromptAnswerGroupings = [];

  this.customizedLanguageArray = [];

  this.currentArrayOfLogicalPromptAnswerGroupings = undefined;

  this.arrayOfCVCPromptAnswerGroupings = [];

  this.currentLogicalPromptAndAnswerGroup = undefined;

  this.assignCurrentLanguageArray = function()
  {
    this.currentArrayOfLogicalPromptAnswerGroupings = this.arrayOfLanguagePromptAndAnswerGroupings[languageSelectionScreen.languageNum];
  }

  this.pickARandomLogicalPromptAnswerGroup = function()
  {

    let randomIndexForArrayOfGroups = getRandomIntInclusive(0,promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings.length - 1);
    this.currentLogicalPromptAndAnswerGroup = promptsAndAnswersManager.currentArrayOfLogicalPromptAnswerGroupings[randomIndexForArrayOfGroups];
    // console.log('*****');
    // console.log('this.currentLogicalPromptAndAnswerGroup.name: ' + this.currentLogicalPromptAndAnswerGroup.name);
  }

  this.correctTargetPromptAndAnswerPairing = {};
  this.pickATargetPromptAndAnswerPairing = function()
  {
    if(typeof this.currentLogicalPromptAndAnswerGroup === 'undefined') {
      //console.log("PromptsAndAnswersManager not set up yet -- how do we fill this in with functional (even placeholder) data when this happens?");
      return;
    }
    let randomIndexFromCurrentPromptAndAnswerGroup = getRandomIntInclusive(0,this.currentLogicalPromptAndAnswerGroup.arrayOfObjects.length - 1);
    this.correctTargetPromptAndAnswerPairing = this.currentLogicalPromptAndAnswerGroup.arrayOfObjects[randomIndexFromCurrentPromptAndAnswerGroup];
    // console.log('this.correctTargetPromptAndAnswerPairing: ' + this.correctTargetPromptAndAnswerPairing.name);
    // console.log('this.currentLogicalPromptAndAnswerGroup.arrayOfObjects: ' + this.currentLogicalPromptAndAnswerGroup.arrayOfObjects);
  }

  this.assignAnswerHolderToAnswer = function(answer)
  {
    if (typeof gameClassManager.currentGame.assignAnswerHolder === 'undefined')
    {
      return;
    }
    answer.answerHolder = gameClassManager.currentGame.assignAnswerHolder();
  }

  this.currentPrompt = {};
  this.pickARandomPromptFromTargetPromptAndAnswerPairing = function()
  {
    if(typeof this.correctTargetPromptAndAnswerPairing === 'undefined' ||
        typeof this.correctTargetPromptAndAnswerPairing.arrayOfPossiblePrompts === 'undefined') {
        //console.log("correctTargetPromptAndAnswerPairing not set up yet");
        return;
      }
    let randomIndexForArrayOfPossiblePrompts = getRandomIntInclusive(0,this.correctTargetPromptAndAnswerPairing.arrayOfPossiblePrompts.length - 1);
    this.currentPrompt = this.correctTargetPromptAndAnswerPairing.arrayOfPossiblePrompts[randomIndexForArrayOfPossiblePrompts];
    // console.log('this.currentPrompt: ' + this.currentPrompt);
  }


  this.dataTypeOfCurrentPrompt = undefined;
  this.defineDataTypeOfCurrentPrompt = function()
  {
    if (typeof this.currentPrompt === 'undefined') {
        //console.log("currentPrompt not set up yet");
        return;
    }
    if (typeof this.currentPrompt === 'string' && this.currentPrompt.indexOf("\\")!=-1) // before megasheet // was this.currentPrompt.nodeName === 'IMG'
    {
      console.log("type IMG clue detected");
      this.dataTypeOfCurrentPrompt = 'IMG';
      imagePrompter.loadCurrentImage(this.currentPrompt);
    }
    else if (typeof this.currentPrompt === 'string')
    {
      this.dataTypeOfCurrentPrompt = 'string';
      textPrompter.loadCurrentText(this.currentPrompt);
    }
    else if (this.currentPrompt.type === 'AUDIO')
    {
      this.dataTypeOfCurrentPrompt = 'AUDIO';
      audioPrompter.loadCurrentAudioPrompt(this.currentPrompt);
    }
    else
    {
      console.log("unknown data type for current prompt");
    }
    // console.log('this.dataTypeOfCurrentPrompt: ' + this.dataTypeOfCurrentPrompt);
  }


  this.currentCorrectAnswer = {};
  this.removedPromptMatchToReinsertLater = undefined;
  this.assignAnAnswerBasedOnPrompt = function()
  {
    if (typeof this.correctTargetPromptAndAnswerPairing === 'undefined' ||
        typeof this.correctTargetPromptAndAnswerPairing.arrayOfPossibleAnswers === 'undefined'
    ) {
        //console.log("correctTargetPromptAndAnswerPairing not set up.");
        return;
    }

    let randomIndexForPossibleAnswersArray = undefined;

    for (let arrayOfAnswersIndex = 0; arrayOfAnswersIndex < this.correctTargetPromptAndAnswerPairing.arrayOfPossibleAnswers.length; arrayOfAnswersIndex++)
    {
      if (this.correctTargetPromptAndAnswerPairing.arrayOfPossibleAnswers[arrayOfAnswersIndex] === this.currentPrompt)
      {
        this.removedPromptMatchToReinsertLater = this.correctTargetPromptAndAnswerPairing.arrayOfPossibleAnswers.splice(arrayOfAnswersIndex,1);
        randomIndexForPossibleAnswersArray = getRandomIntInclusive(0, this.correctTargetPromptAndAnswerPairing.arrayOfPossibleAnswers.length - 1);
        this.currentCorrectAnswer = this.correctTargetPromptAndAnswerPairing.arrayOfPossibleAnswers[randomIndexForPossibleAnswersArray];
      }//end of checking for prompt/answer overlap
    }//end of for loop through temporary answers array
    //console.log('this.correctTargetPromptAndAnswerPairing.arrayOfPossibleAnswers: ' + this.correctTargetPromptAndAnswerPairing.arrayOfPossibleAnswers);
    // console.log('this.currentCorrectAnswer: ' + this.currentCorrectAnswer);
  }//end of answer assignment


  this.currentAnswerDataType = undefined;
  this.definecurrentAnswerDataType = function()
  {

    if (typeof this.currentCorrectAnswer === 'undefined') {
        //console.log("currentCorrectAnswer not set up.");
        return;
    }

/*
if (
    {
      console.log("type IMG clue detected");
      this.dataTypeOfCurrentPrompt = 'IMG';
      imagePrompter.loadCurrentImage(this.currentPrompt);
    }
    else
*/

    if (typeof this.currentCorrectAnswer === 'string' && this.currentCorrectAnswer.indexOf("\\")!=-1) { // before megasheet // was this.currentPrompt.nodeName === 'IMG'
      this.currentAnswerDataType = 'IMG';
    } else if (typeof this.currentCorrectAnswer === 'string')
    {
      this.currentAnswerDataType = 'string';
        let correctAnswerWidth = promptsAndAnswersManager.getCorrectAnswerWidthFromFontStyle(
            gameClassManager.currentGame.textAnswerFontStyle
        );

        //console.log('correctAnswerWidth: ' + correctAnswerWidth);
        gameClassManager.currentGame.correctTextAnswerHolderWidth = correctAnswerWidth + 20;
        //console.log('gameClassManager.currentGame.correctTextAnswerHolderWidth: ' + gameClassManager.currentGame.correctTextAnswerHolderWidth);

    } else if (this.currentCorrectAnswer.type === 'AUDIO')
    {
      this.currentAnswerDataType = 'AUDIO';
    }
    // console.log('this.currentAnswerDataType: ' + this.currentAnswerDataType);
  }


  this.incorrectTargetPromptAndAnswerPairing = {};
  this.removedCorrectAnswerToReinsertLater = undefined;
  this.defineIncorrectTargetPromptAndAnswerPairing = function()
  {
    if (typeof this.currentLogicalPromptAndAnswerGroup === 'undefined') {
        //console.log("currentLogicalPromptAndAnswerGroup not set up.");
        return;
    }

    // console.log('this.currentLogicalPromptAndAnswerGroup: ' + this.currentLogicalPromptAndAnswerGroup.name);
    for (let logicalPromptAndAnswerGroupIndex = 0; logicalPromptAndAnswerGroupIndex < this.currentLogicalPromptAndAnswerGroup.arrayOfObjects.length; logicalPromptAndAnswerGroupIndex++)
    {
      if (this.correctTargetPromptAndAnswerPairing === this.currentLogicalPromptAndAnswerGroup.arrayOfObjects[logicalPromptAndAnswerGroupIndex])
      {
        // console.log('inside splice call for editable group');
        this.removedCorrectAnswerToReinsertLater = this.currentLogicalPromptAndAnswerGroup.arrayOfObjects.splice(logicalPromptAndAnswerGroupIndex,1);
        // console.log('this.removedCorrectAnswerToReinsertLater[0].name: ' + this.removedCorrectAnswerToReinsertLater[0].name);
      }
    }

    let randomIndexForEditedPromptAndAnswerGroup = getRandomIntInclusive(0,this.currentLogicalPromptAndAnswerGroup.arrayOfObjects.length - 1);
    this.incorrectTargetPromptAndAnswerPairing = this.currentLogicalPromptAndAnswerGroup.arrayOfObjects[randomIndexForEditedPromptAndAnswerGroup];
  }

  this.reinsertAnswersIntoEditedArrayForNextShuffle = function()
  {
    if (!this.correctTargetPromptAndAnswerPairing || !this.correctTargetPromptAndAnswerPairing.arrayOfPossibleAnswers) return; // can be undefined here!

    this.correctTargetPromptAndAnswerPairing.arrayOfPossibleAnswers.push(this.removedPromptMatchToReinsertLater[0]);
    // console.log('this.removedPromptMatchToReinsertLater: ' + this.removedPromptMatchToReinsertLater[0].name);
    this.currentLogicalPromptAndAnswerGroup.arrayOfObjects.push(this.removedCorrectAnswerToReinsertLater[0]);
    // console.log('this.removedCorrectAnswerToReinsertLater.name: ' + this.removedCorrectAnswerToReinsertLater[0].name);
  }

  this.defineWidthAndHeightForTargetAnswers = function()
  {
    if (this.currentAnswerDataType === "AUDIO")
    {
      this.correctTargetPromptAndAnswerPairing.width = drawAnswersManager.audioImageAnswerWidth;
      this.incorrectTargetPromptAndAnswerPairing.width = drawAnswersManager.audioImageAnswerWidth;
      this.correctTargetPromptAndAnswerPairing.height = drawAnswersManager.audioImageAnswerHeight;
      this.incorrectTargetPromptAndAnswerPairing.height = drawAnswersManager.audioImageAnswerHeight;
    }
    else if (this.currentAnswerDataType === "IMG")
    {
      this.correctTargetPromptAndAnswerPairing.width = drawAnswersManager.imageAnswerWidth;
      this.incorrectTargetPromptAndAnswerPairing.width = drawAnswersManager.imageAnswerWidth;
      this.correctTargetPromptAndAnswerPairing.height = drawAnswersManager.imageAnswerHeight;
      this.incorrectTargetPromptAndAnswerPairing.height = drawAnswersManager.imageAnswerHeight;
    }
    else if (this.currentAnswerDataType === 'string')
    {
      // this.correctTargetPromptAndAnswerPairing.width = this.getCorrectAnswerWidthFromFontStyle(drawAnswersManager.fontStyle);
      // this.incorrectTargetPromptAndAnswerPairing.width = this.getIncorrectAnswerWidthFromFontStyle(drawAnswersManager.fontStyle);
      // this.correctTargetPromptAndAnswerPairing.height = 20;//measureText does not provide height
      // this.incorrectTargetPromptAndAnswerPairing.height = 20;//measureText does not provide height
    }
  }

  this.currentIncorrectAnswer = {};
  this.assignCurrentIncorrectAnswer = function()
  {
    //console.log('inside assignCurrentIncorrectAnswer()');
    if (typeof this.incorrectTargetPromptAndAnswerPairing === 'undefined' ||
        typeof this.incorrectTargetPromptAndAnswerPairing.arrayOfPossibleAnswers === 'undefined'
    ) {
        //console.log("this.incorrectTargetPromptAndAnswerPairing not set up");
        return;
    }

    let randomIndexForEditedPromptAndAnswerGroup = getRandomIntInclusive(0,this.incorrectTargetPromptAndAnswerPairing.arrayOfPossibleAnswers.length - 1);

    for (let arrayOfPossibleAnswersIndex = 0; arrayOfPossibleAnswersIndex < this.incorrectTargetPromptAndAnswerPairing.arrayOfPossibleAnswers.length; arrayOfPossibleAnswersIndex++)
    {
        let currentIncorrectAnswerDataType = undefined;
        if (typeof this.incorrectTargetPromptAndAnswerPairing.arrayOfPossibleAnswers[arrayOfPossibleAnswersIndex] === 'string'
            && this.incorrectTargetPromptAndAnswerPairing.arrayOfPossibleAnswers[arrayOfPossibleAnswersIndex].indexOf("\\")!=-1)
        {
          console.log('image filepath detected');
          currentIncorrectAnswerDataType = 'IMG';
          if (currentIncorrectAnswerDataType !== undefined)
          {
            if (this.currentAnswerDataType === currentIncorrectAnswerDataType)
            {
              this.currentIncorrectAnswer = this.incorrectTargetPromptAndAnswerPairing.arrayOfPossibleAnswers[arrayOfPossibleAnswersIndex];
            }
          }
        }
        else if (typeof this.incorrectTargetPromptAndAnswerPairing.arrayOfPossibleAnswers[arrayOfPossibleAnswersIndex] === 'string')
        {
          console.log('string type detected');
          currentIncorrectAnswerDataType = 'string';
          if (currentIncorrectAnswerDataType !== undefined)
          {
            if (this.currentAnswerDataType === currentIncorrectAnswerDataType)
            {
              this.currentIncorrectAnswer = this.incorrectTargetPromptAndAnswerPairing.arrayOfPossibleAnswers[arrayOfPossibleAnswersIndex];
            }
          }

            gameClassManager.currentGame.incorrectTextAnswerHolderWidth =
            promptsAndAnswersManager.getIncorrectAnswerWidthFromFontStyle(
                gameClassManager.currentGame.textAnswerFontStyle
            ) + 20;

        }
        else if (this.incorrectTargetPromptAndAnswerPairing.arrayOfPossibleAnswers[arrayOfPossibleAnswersIndex].type === 'AUDIO')
        {
          currentIncorrectAnswerDataType = 'AUDIO';
          if (currentIncorrectAnswerDataType !== undefined)
          {
            if (this.currentAnswerDataType === currentIncorrectAnswerDataType)
            {
              this.currentIncorrectAnswer = this.incorrectTargetPromptAndAnswerPairing.arrayOfPossibleAnswers[arrayOfPossibleAnswersIndex];
            }
          }
        }
    }
    // console.log('this.currentIncorrectAnswer: ' + this.currentIncorrectAnswer);
  }

  this.getTextWidthFromFontStyle = function(text, fontStyle){
    gameCanvasContext.save();
    gameCanvasContext.font = fontStyle;
    var textWidth = gameCanvasContext.measureText(text).width;
    gameCanvasContext.restore();
    return textWidth;
  }

  this.getCorrectAnswerWidthFromFontStyle = function(fontStyle){
    if (this.currentAnswerDataType != 'string'){
      //console.log("This answer is not a string, cannot measure for text width");
      return;
    }

    return this.getTextWidthFromFontStyle(this.currentCorrectAnswer, fontStyle);
  }

  this.getIncorrectAnswerWidthFromFontStyle = function(fontStyle){
    if (this.currentAnswerDataType != 'string'){
      // console.log("This answer is not a string, cannot measure for text width");
      return;
    }

    return this.getTextWidthFromFontStyle(this.currentIncorrectAnswer, fontStyle);
  }

  this.checkIfObjectsAreTooCloseToEachOther = function(
    firstObjectX,firstObjectY, secondObjectX,secondObjectY, minDistanceFromEachOther)
  {
  return (
      Math.abs(firstObjectX - secondObjectX) < minDistanceFromEachOther &&
      Math.abs(firstObjectY - secondObjectY) < minDistanceFromEachOther
    )
  }

  this.checkIfObjectsXCoordinatesAreTooCloseToEachOther = function(firstObjectX,secondObjectX, minDistanceFromEachOther)
  {
    return (Math.abs(firstObjectX - secondObjectX) < minDistanceFromEachOther)
  }

  this.pickRandomCoordinatesWithinCanvasAndAwayFromCharacter = function()
  {
    let randomXCoordinate = undefined;
    let randomYCoordinate = undefined;
    let currentPlayerCharacter = gameClassManager.currentGame.playerCharacter;
    //console.log('currentPlayerCharacter.name: ' + currentPlayerCharacter.name);
    randomXCoordinate = getRandomIntWithExclusionaryRange(0,gameCanvas.width - 100, currentPlayerCharacter.x - 40,currentPlayerCharacter.x + 60);
    randomYCoordinate = getRandomIntWithExclusionaryRange(0,gameCanvas.height - 100, currentPlayerCharacter.y - 40,currentPlayerCharacter.y + 60);
    return {randomXCoordinate,randomYCoordinate};
  }

  this.defineXAndYCoordinatesForTargets = function()
  {
    if (gameClassManager.currentGame.name === 'Snake Game' || gameClassManager.currentGame.name === 'birdGame'
        || gameClassManager.currentGame.name === 'spaceShooter')
    {
      let correctAnswerCoordinates = this.pickRandomCoordinatesWithinCanvasAndAwayFromCharacter();
      let incorrectAnswerCoordinates = this.pickRandomCoordinatesWithinCanvasAndAwayFromCharacter();
      let currentPlayerCharacter = gameClassManager.currentGame.playerCharacter;
      while(
        this.checkIfObjectsAreTooCloseToEachOther(
          incorrectAnswerCoordinates.randomXCoordinate,incorrectAnswerCoordinates.randomYCoordinate,
          correctAnswerCoordinates.randomXCoordinate,correctAnswerCoordinates.randomYCoordinate, 300)

          ||

        this.checkIfObjectsAreTooCloseToEachOther(
          incorrectAnswerCoordinates.randomXCoordinate,incorrectAnswerCoordinates.randomYCoordinate,
          currentPlayerCharacter.x,currentPlayerCharacter.y, 60)
      )
      {
        incorrectAnswerCoordinates = this.pickRandomCoordinatesWithinCanvasAndAwayFromCharacter();
      }
      this.correctTargetPromptAndAnswerPairing.xCoordinate = correctAnswerCoordinates.randomXCoordinate;
      this.correctTargetPromptAndAnswerPairing.yCoordinate = correctAnswerCoordinates.randomYCoordinate;

      this.incorrectTargetPromptAndAnswerPairing.xCoordinate = incorrectAnswerCoordinates.randomXCoordinate;
      this.incorrectTargetPromptAndAnswerPairing.yCoordinate = incorrectAnswerCoordinates.randomYCoordinate;
    }
    else if (gameClassManager.currentGame.name === 'airGrabGame')
    {
      let correctAnswerCoordinates = {x:getRandomIntInclusive(120,480),y:getRandomIntInclusive(120,520)};
      let incorrectAnswerCoordinates = {x:getRandomIntInclusive(120,480),y:getRandomIntInclusive(120,520)};

      this.correctTargetPromptAndAnswerPairing.xCoordinate = correctAnswerCoordinates.x;
      this.correctTargetPromptAndAnswerPairing.yCoordinate = correctAnswerCoordinates.y;

      this.incorrectTargetPromptAndAnswerPairing.xCoordinate = incorrectAnswerCoordinates.x;
      this.incorrectTargetPromptAndAnswerPairing.yCoordinate = incorrectAnswerCoordinates.y;
    }
    else if (gameClassManager.currentGame.name === 'laneGame')
    {
      let randomNumber = Math.random();
      if (randomNumber < 0.5)
      {
        this.correctTargetPromptAndAnswerPairing.xCoordinate = laneGame.carLeftLanePosition - 25;
        this.correctTargetPromptAndAnswerPairing.yCoordinate = -75;
        this.incorrectTargetPromptAndAnswerPairing.xCoordinate = laneGame.carRightLanePosition - 25;
        this.incorrectTargetPromptAndAnswerPairing.yCoordinate = -75;
      }
      else
      {
        this.correctTargetPromptAndAnswerPairing.xCoordinate = laneGame.carRightLanePosition - 25;
        this.correctTargetPromptAndAnswerPairing.yCoordinate = -75;
        this.incorrectTargetPromptAndAnswerPairing.xCoordinate = laneGame.carLeftLanePosition - 25;
        this.incorrectTargetPromptAndAnswerPairing.yCoordinate = -75;
      }
    }
    else if (gameClassManager.currentGame.name === 'jumperGame')
    {
      let audioAnswerOffset = -110;
      let imageAnswerOffset = -120;
      let stringAnswerOffset = -40;
      let currentOffset = undefined;

      if (this.currentAnswerDataType === 'AUDIO')
      {
        currentOffset = audioAnswerOffset;
      }
      else if (this.currentAnswerDataType === 'IMG')
      {
        currentOffset = imageAnswerOffset;
      }
      else if (this.currentAnswerDataType === 'string')
      {
        currentOffset = stringAnswerOffset;
      }


      this.correctTargetPromptAndAnswerPairing.xCoordinate =
      getRandomIntWithExclusionaryRange(0,gameCanvas.width - 100,
      Math.floor(gameClassManager.currentGame.playerCharacter.x - 40),Math.floor(gameClassManager.currentGame.playerCharacter.x + 100));
      let randomPlatformIndex = (getRandomIntInclusive(1,7)*100) + currentOffset;
      this.correctTargetPromptAndAnswerPairing.yCoordinate = randomPlatformIndex;


      this.incorrectTargetPromptAndAnswerPairing.xCoordinate =
      getRandomIntWithExclusionaryRange(0,gameCanvas.width - 100,
      Math.floor(gameClassManager.currentGame.playerCharacter.x - 40),Math.floor(gameClassManager.currentGame.playerCharacter.x + 100));
      randomPlatformIndex = (getRandomIntInclusive(1,7)*100) + currentOffset;
      this.incorrectTargetPromptAndAnswerPairing.yCoordinate = randomPlatformIndex;



      while(
        this.checkIfObjectsAreTooCloseToEachOther(
          this.incorrectTargetPromptAndAnswerPairing.xCoordinate,this.incorrectTargetPromptAndAnswerPairing.yCoordinate,
          this.correctTargetPromptAndAnswerPairing.xCoordinate,this.correctTargetPromptAndAnswerPairing.yCoordinate, 100)

          ||

        this.checkIfObjectsAreTooCloseToEachOther(
          this.incorrectTargetPromptAndAnswerPairing.xCoordinate,this.incorrectTargetPromptAndAnswerPairing.yCoordinate,
          gameClassManager.currentGame.playerCharacter.x,gameClassManager.currentGame.playerCharacter.y, 100)
      )
      {
        this.incorrectTargetPromptAndAnswerPairing.xCoordinate =
        getRandomIntWithExclusionaryRange(0,gameCanvas.width - 100,
        Math.floor(gameClassManager.currentGame.playerCharacter.x - 40),Math.floor(gameClassManager.currentGame.playerCharacter.x + 100));
        randomPlatformIndex = (getRandomIntInclusive(1,7)*100) + currentOffset;
        this.incorrectTargetPromptAndAnswerPairing.yCoordinate = randomPlatformIndex;
      }


    }
    else if (gameClassManager.currentGame.name === 'finder game')
    {
      let fiftyFiftyResult = Math.random();
      if (fiftyFiftyResult <= 0.5)
      {
        this.incorrectTargetPromptAndAnswerPairing.xCoordinate = 0;
        this.incorrectTargetPromptAndAnswerPairing.yCoordinate = 50;

        this.correctTargetPromptAndAnswerPairing.xCoordinate = 0;
        this.correctTargetPromptAndAnswerPairing.yCoordinate = gameCanvas.height/2 + 50;
      }
      else if (fiftyFiftyResult > 0.5)
      {
        this.correctTargetPromptAndAnswerPairing.xCoordinate = 0;
        this.correctTargetPromptAndAnswerPairing.yCoordinate = 50;

        this.incorrectTargetPromptAndAnswerPairing.xCoordinate = 0;
        this.incorrectTargetPromptAndAnswerPairing.yCoordinate = gameCanvas.height/2 + 50;
      }
    }
    else if (gameClassManager.currentGame.name === 'frogRiverGame')
    {
      let answerCount = frogRiverGame.answerCount;
      let additive = frogRiverGame.additiveToAnswers;

      let randomNumber = Math.random();
      if (randomNumber < 0.5)
      {
        frogRiverGame.lilyPadManager.arrayOfLilyPads[answerCount + additive].answer = this.correctTargetPromptAndAnswerPairing;
        frogRiverGame.lilyPadManager.arrayOfLilyPads[answerCount + additive + 1].answer = this.incorrectTargetPromptAndAnswerPairing;

        this.correctTargetPromptAndAnswerPairing.xCoordinate = frogRiverGame.lilyPadManager.arrayOfLilyPads[answerCount + additive].xCoordinate;
        this.correctTargetPromptAndAnswerPairing.yCoordinate = frogRiverGame.lilyPadManager.arrayOfLilyPads[answerCount + additive].yCoordinate;
        this.incorrectTargetPromptAndAnswerPairing.xCoordinate = frogRiverGame.lilyPadManager.arrayOfLilyPads[answerCount + additive + 1].xCoordinate;
        this.incorrectTargetPromptAndAnswerPairing.yCoordinate = frogRiverGame.lilyPadManager.arrayOfLilyPads[answerCount + additive + 1].yCoordinate;
      }
      else
      {
        frogRiverGame.lilyPadManager.arrayOfLilyPads[answerCount + additive].answer = this.incorrectTargetPromptAndAnswerPairing;
        frogRiverGame.lilyPadManager.arrayOfLilyPads[answerCount + additive + 1].answer = this.correctTargetPromptAndAnswerPairing;

        this.incorrectTargetPromptAndAnswerPairing.xCoordinate = frogRiverGame.lilyPadManager.arrayOfLilyPads[answerCount + additive + 1].xCoordinate;
        this.incorrectTargetPromptAndAnswerPairing.yCoordinate = frogRiverGame.lilyPadManager.arrayOfLilyPads[answerCount + additive + 1].yCoordinate;
        this.correctTargetPromptAndAnswerPairing.xCoordinate = frogRiverGame.lilyPadManager.arrayOfLilyPads[answerCount + additive].xCoordinate;
        this.correctTargetPromptAndAnswerPairing.yCoordinate = frogRiverGame.lilyPadManager.arrayOfLilyPads[answerCount + additive].yCoordinate;
      }

      // Center the y coordinate
      var lilyPadHeight = frogRiverGame.lilyPadManager.arrayOfLilyPads[0].height;
      var yCoordinateOffset = lilyPadHeight / 2;

      if (this.currentAnswerDataType === 'string'){
        yCoordinateOffset += frogRiverGame.textAnswerFontSize / 4;
      }
      else if (this.currentAnswerDataType === 'IMG'){
        yCoordinateOffset -= frogRiverGame.imageAnswerHeight / 2;
      }
      else if (this.currentAnswerDataType === 'AUDIO'){
        yCoordinateOffset -= frogRiverGame.audioImageAnswerWidth / 2;
      }

      this.incorrectTargetPromptAndAnswerPairing.yCoordinate += yCoordinateOffset;
      this.correctTargetPromptAndAnswerPairing.yCoordinate += yCoordinateOffset;

    }
    else if (gameClassManager.currentGame.name === 'Pass or Block Game')
    {
      this.correctTargetPromptAndAnswerPairing.xCoordinate = getRandomIntInclusive(0,gameCanvas.width - 100);
      this.incorrectTargetPromptAndAnswerPairing.xCoordinate = getRandomIntInclusive(0,gameCanvas.width - 100);
      while(
        this.checkIfObjectsXCoordinatesAreTooCloseToEachOther(this.correctTargetPromptAndAnswerPairing.xCoordinate,this.incorrectTargetPromptAndAnswerPairing.xCoordinate, 130)
      )
      {
        this.incorrectTargetPromptAndAnswerPairing.xCoordinate = getRandomIntInclusive(0,gameCanvas.width - 100);
      }


      this.correctTargetPromptAndAnswerPairing.yCoordinate = 0;
      this.incorrectTargetPromptAndAnswerPairing.yCoordinate = 0;
    }
    else if(gameClassManager.currentGame.name === "flowerGame"){
      let randomNumber = Math.random();
      if (randomNumber < 0.5)
      {
        this.correctTargetPromptAndAnswerPairing.xCoordinate = flowerGame.seedOneXCoordinate -25;
        this.correctTargetPromptAndAnswerPairing.yCoordinate = -10;
        this.incorrectTargetPromptAndAnswerPairing.xCoordinate = flowerGame.seedTwoXCoordinate-25;
        this.incorrectTargetPromptAndAnswerPairing.yCoordinate = -10;


      }
      else
      {
        this.correctTargetPromptAndAnswerPairing.xCoordinate = flowerGame.seedTwoXCoordinate-25;
        this.correctTargetPromptAndAnswerPairing.yCoordinate = -10;
        this.incorrectTargetPromptAndAnswerPairing.xCoordinate = flowerGame.seedOneXCoordinate-25;
        this.incorrectTargetPromptAndAnswerPairing.yCoordinate = -10;
      }
    }
    else if(gameClassManager.currentGame.name === "MazeGame"){
      this.correctTargetPromptAndAnswerPairing.xCoordinate = getRandomIntInclusive(0,gameCanvas.width - 1);
      this.correctTargetPromptAndAnswerPairing.yCoordinate = getRandomIntInclusive(0,gameCanvas.height - 1);
      this.incorrectTargetPromptAndAnswerPairing.xCoordinate = getRandomIntInclusive(0,gameCanvas.width - 1);
      this.incorrectTargetPromptAndAnswerPairing.yCoordinate = getRandomIntInclusive(0,gameCanvas.height - 1);
    }
	else if (gameClassManager.currentGame == runnerGame)
	{
	  const pairingsCoords = runnerGame.getPromptAndAnswerPairingsCoordinates();
	  this.correctTargetPromptAndAnswerPairing.xCoordinate = pairingsCoords.correct.x;
	  this.correctTargetPromptAndAnswerPairing.yCoordinate = pairingsCoords.correct.y;
	  this.incorrectTargetPromptAndAnswerPairing.xCoordinate = pairingsCoords.incorrect.x;
	  this.incorrectTargetPromptAndAnswerPairing.yCoordinate = pairingsCoords.incorrect.y;
	}
  else if (gameClassManager.currentGame === nighttimeGame)
  {
    let fiftyFiftyResult = Math.random();
    let ghost1 = gameClassManager.currentGame.ghost1;
    let ghost2 = gameClassManager.currentGame.ghost2;
    {
      if (fiftyFiftyResult <= 0.5)
      {
        ghost1.isCorrectAnswer = true;
        this.correctTargetPromptAndAnswerPairing.xCoordinate = ghost1.answerX;
        this.correctTargetPromptAndAnswerPairing.yCoordinate = ghost1.answerY;

        ghost2.isCorrectAnswer = false;
        this.incorrectTargetPromptAndAnswerPairing.xCoordinate = ghost2.answerX;
        this.incorrectTargetPromptAndAnswerPairing.yCoordinate = ghost2.answerY;
      }
      else if (fiftyFiftyResult > 0.5)
      {
        ghost2.isCorrectAnswer = true;
        this.correctTargetPromptAndAnswerPairing.xCoordinate = ghost2.answerX;
        this.correctTargetPromptAndAnswerPairing.yCoordinate = ghost2.answerY;

        ghost1.isCorrectAnswer = false;
        this.incorrectTargetPromptAndAnswerPairing.xCoordinate = ghost1.answerX;
        this.incorrectTargetPromptAndAnswerPairing.yCoordinate = ghost1.answerY;
      }
    }
  }
  else if (gameClassManager.currentGame.name === 'frog crate game')
  {
    let fiftyFiftyResult = Math.random();
    let fly1 = gameClassManager.currentGame.fly1;
    let fly2 = gameClassManager.currentGame.fly2;
    {
      if (fiftyFiftyResult <= 0.5)
      {
        fly1.isCorrectAnswer = true;
        this.correctTargetPromptAndAnswerPairing.xCoordinate = fly1.answerX;
        this.correctTargetPromptAndAnswerPairing.yCoordinate = fly1.answerY;

        fly2.isCorrectAnswer = false;
        this.incorrectTargetPromptAndAnswerPairing.xCoordinate = fly2.answerX;
        this.incorrectTargetPromptAndAnswerPairing.yCoordinate = fly2.answerY;
      }
      else if (fiftyFiftyResult > 0.5)
      {
        fly2.isCorrectAnswer = true;
        this.correctTargetPromptAndAnswerPairing.xCoordinate = fly2.answerX;
        this.correctTargetPromptAndAnswerPairing.yCoordinate = fly2.answerY;

        fly1.isCorrectAnswer = false;
        this.incorrectTargetPromptAndAnswerPairing.xCoordinate = fly1.answerX;
        this.incorrectTargetPromptAndAnswerPairing.yCoordinate = fly1.answerY;
      }
    }
  }
  else if (gameClassManager.currentGame.name === 'egg catch game')
  {
    let fiftyFiftyResult = Math.random();
    let chicken1 = gameClassManager.currentGame.chicken1;
    let chicken2 = gameClassManager.currentGame.chicken2;

    if (fiftyFiftyResult < 0.5)
    {
      this.correctTargetPromptAndAnswerPairing.xCoordinate = chicken1.eggStartingX;
      this.correctTargetPromptAndAnswerPairing.yCoordinate = chicken1.eggStartingY;
      this.incorrectTargetPromptAndAnswerPairing.xCoordinate = chicken2.eggStartingX;
      this.incorrectTargetPromptAndAnswerPairing.yCoordinate = chicken2.eggStartingY;
    }
    else if (fiftyFiftyResult >= 0.5)
    {
      this.correctTargetPromptAndAnswerPairing.xCoordinate = chicken2.eggStartingX;
      this.correctTargetPromptAndAnswerPairing.yCoordinate = chicken2.eggStartingY;
      this.incorrectTargetPromptAndAnswerPairing.xCoordinate = chicken1.eggStartingX;
      this.incorrectTargetPromptAndAnswerPairing.yCoordinate = chicken1.eggStartingY;
    }
  }
    else if (gameClassManager.currentGame.name === 'whack an answer game')
    {
      let randomGridIndex1 = getRandomIntInclusive(0,8);
      let randomGridIndex2 = getRandomIntInclusive(0,8);
      while (randomGridIndex1 === randomGridIndex2)
      {
        randomGridIndex2 = getRandomIntInclusive(0,8);
      }

      this.correctTargetPromptAndAnswerPairing.whackAnAnswerGridIndex = randomGridIndex1;
      this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerGridIndex = randomGridIndex2;

      let randomDirectionNumber = Math.random();
      if (randomDirectionNumber >= 0.75)
      {
        this.correctTargetPromptAndAnswerPairing.whackAnAnswerPositionName = 'left';
      }
      else if (randomDirectionNumber >= 0.5 && randomDirectionNumber < 0.75)
      {
        this.correctTargetPromptAndAnswerPairing.whackAnAnswerPositionName = 'below';
      }
      else if (randomDirectionNumber >= 0.25 && randomDirectionNumber < 0.5)
      {
        this.correctTargetPromptAndAnswerPairing.whackAnAnswerPositionName = 'right';
      }
      else if (randomDirectionNumber < 0.25)
      {
        this.correctTargetPromptAndAnswerPairing.whackAnAnswerPositionName = 'above';
      }

      randomDirectionNumber = Math.random();
      console.log('randomDirectionNumber: ' + randomDirectionNumber);

      if (randomDirectionNumber >= 0.75)
      {
        this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerPositionName = 'left';
      }
      else if (randomDirectionNumber >= 0.5 && randomDirectionNumber < 0.75)
      {
        this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerPositionName = 'below';
      }
      else if (randomDirectionNumber >= 0.25 && randomDirectionNumber < 0.5)
      {
        this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerPositionName = 'right';
      }
      else if (randomDirectionNumber < 0.25)
      {
        this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerPositionName = 'above';
      }

      let correctAnswerXOffSet = undefined;
      let correctAnswerYOffSet = undefined;
      let incorrectAnswerXOffSet = undefined;
      let incorrectAnswerYOffSet = undefined;

      if (this.currentAnswerDataType === "AUDIO" &&
          this.correctTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'left')
      {
        correctAnswerXOffSet = -55;
        correctAnswerYOffSet = 20;
      }
      else if (this.currentAnswerDataType === "AUDIO" &&
               this.correctTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'above')
      {
        correctAnswerXOffSet = 35;
        correctAnswerYOffSet = -75;
      }
      else if (this.currentAnswerDataType === "AUDIO" &&
               this.correctTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'right')
      {
        correctAnswerXOffSet = 140;
        correctAnswerYOffSet = 30;
      }
      else if (this.currentAnswerDataType === "AUDIO" &&
               this.correctTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'below')
      {
        correctAnswerXOffSet = 35;
        correctAnswerYOffSet = 125;
      }
      else if (this.currentAnswerDataType === "IMG" &&
               this.correctTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'left')
      {
        correctAnswerXOffSet = -45;
        correctAnswerYOffSet = 30;
      }
      else if (this.currentAnswerDataType === "IMG" &&
               this.correctTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'above')
      {
        correctAnswerXOffSet = 25;
        correctAnswerYOffSet = -75;
      }
      else if (this.currentAnswerDataType === "IMG" &&
               this.correctTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'right')
      {
        correctAnswerXOffSet = 145;
        correctAnswerYOffSet = 25;
      }
      else if (this.currentAnswerDataType === "IMG" &&
               this.correctTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'below')
      {
        correctAnswerXOffSet = 30;
        correctAnswerYOffSet = 125;
      }
      else if (this.currentAnswerDataType === "string" &&
               this.correctTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'left')
      {
        correctAnswerXOffSet = -35;
        correctAnswerYOffSet = 85;
      }
      else if (this.currentAnswerDataType === "string" &&
               this.correctTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'above')
      {
        correctAnswerXOffSet = 50;
        correctAnswerYOffSet = -30;
      }
      else if (this.currentAnswerDataType === "string" &&
               this.correctTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'right')
      {
        correctAnswerXOffSet = 150;
        correctAnswerYOffSet = 80;
      }
      else if (this.currentAnswerDataType === "string" &&
               this.correctTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'below')
      {
        correctAnswerXOffSet = 60;
        correctAnswerYOffSet = 175;
      }


      if (this.currentAnswerDataType === "AUDIO" &&
          this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'left')
      {
        incorrectAnswerXOffSet = -55;
        incorrectAnswerYOffSet = 20;
      }
      else if (this.currentAnswerDataType === "AUDIO" &&
               this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'above')
      {
        incorrectAnswerXOffSet = 35;
        incorrectAnswerYOffSet = -75;
      }
      else if (this.currentAnswerDataType === "AUDIO" &&
               this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'right')
      {
        incorrectAnswerXOffSet = 140;
        incorrectAnswerYOffSet = 30;
      }
      else if (this.currentAnswerDataType === "AUDIO" &&
               this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'below')
      {
        incorrectAnswerXOffSet = 35;
        incorrectAnswerYOffSet = 125;
      }
      else if (this.currentAnswerDataType === "IMG" &&
               this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'left')
      {
        incorrectAnswerXOffSet = -45;
        incorrectAnswerYOffSet = 30;
      }
      else if (this.currentAnswerDataType === "IMG" &&
               this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'above')
      {
        incorrectAnswerXOffSet = 25;
        incorrectAnswerYOffSet = -75;
      }
      else if (this.currentAnswerDataType === "IMG" &&
               this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'right')
      {
        incorrectAnswerXOffSet = 145;
        incorrectAnswerYOffSet = 25;
      }
      else if (this.currentAnswerDataType === "IMG" &&
               this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'below')
      {
        incorrectAnswerXOffSet = 30;
        incorrectAnswerYOffSet = 125;
      }
      else if (this.currentAnswerDataType === "string" &&
               this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'left')
      {
        incorrectAnswerXOffSet = -35;
        incorrectAnswerYOffSet = 80;
      }
      else if (this.currentAnswerDataType === "string" &&
               this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'above')
      {
        incorrectAnswerXOffSet = 50;
        incorrectAnswerYOffSet = -30;
      }
      else if (this.currentAnswerDataType === "string" &&
               this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'right')
      {
        incorrectAnswerXOffSet = 150;
        incorrectAnswerYOffSet = 80;
      }
      else if (this.currentAnswerDataType === "string" &&
               this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerPositionName === 'below')
      {
        incorrectAnswerXOffSet = 60;
        incorrectAnswerYOffSet = 175;
      }


      this.correctTargetPromptAndAnswerPairing.oscillationVelocity = getRandomArbitrary(0.1,0.3);
      this.incorrectTargetPromptAndAnswerPairing.oscillationVelocity = getRandomArbitrary(0.1,0.3);

      this.correctTargetPromptAndAnswerPairing.whackAnAnswerXStartingPosition = gameClassManager.currentGame.background.grid[randomGridIndex1].x + correctAnswerXOffSet;
      this.correctTargetPromptAndAnswerPairing.xCoordinate = this.correctTargetPromptAndAnswerPairing.whackAnAnswerXStartingPosition;
      this.correctTargetPromptAndAnswerPairing.whackAnAnswerYStartingPosition = gameClassManager.currentGame.background.grid[randomGridIndex1].y + correctAnswerYOffSet;
      this.correctTargetPromptAndAnswerPairing.yCoordinate = this.correctTargetPromptAndAnswerPairing.whackAnAnswerYStartingPosition;

      this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerXStartingPosition = gameClassManager.currentGame.background.grid[randomGridIndex2].x + incorrectAnswerXOffSet;
      this.incorrectTargetPromptAndAnswerPairing.xCoordinate = this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerXStartingPosition;
      this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerYStartingPosition = gameClassManager.currentGame.background.grid[randomGridIndex2].y + incorrectAnswerYOffSet;
      this.incorrectTargetPromptAndAnswerPairing.yCoordinate = this.incorrectTargetPromptAndAnswerPairing.whackAnAnswerYStartingPosition;
    }
    else if (gameClassManager.currentGame.name === "flying bee game")
    {
      let leftBoundaryX = 150;
      let leftBoundaryY = 550;
      let rightBoundaryX = 475;
      let rightBoundaryTopY = 50;
      let rightBoundaryBottomY = 435;
      let fiftyFiftyResult = Math.random();

      if (gameClassManager.currentGame.answersOnLeftSide === true)
      {
        this.correctTargetPromptAndAnswerPairing.xCoordinate = getRandomArbitrary(0,leftBoundaryX);
        this.correctTargetPromptAndAnswerPairing.yCoordinate = getRandomArbitrary(0,leftBoundaryY);

        this.incorrectTargetPromptAndAnswerPairing.xCoordinate = getRandomArbitrary(0,leftBoundaryX);
        this.incorrectTargetPromptAndAnswerPairing.yCoordinate = getRandomArbitrary(0,leftBoundaryY);
        while(
          this.checkIfObjectsAreTooCloseToEachOther
                (
                  this.correctTargetPromptAndAnswerPairing.xCoordinate,this.correctTargetPromptAndAnswerPairing.yCoordinate,
                  this.incorrectTargetPromptAndAnswerPairing.xCoordinate,this.incorrectTargetPromptAndAnswerPairing.yCoordinate,
                  100
                )
              )
            {
              this.incorrectTargetPromptAndAnswerPairing.xCoordinate = getRandomArbitrary(0,leftBoundaryX);
              this.incorrectTargetPromptAndAnswerPairing.yCoordinate = getRandomArbitrary(0,leftBoundaryY);
            }
      }
      else if (gameClassManager.currentGame.answersOnRightSide === true)
      {
        this.correctTargetPromptAndAnswerPairing.xCoordinate = getRandomArbitrary(rightBoundaryX,gameCanvas.width - 50);
        this.correctTargetPromptAndAnswerPairing.yCoordinate = getRandomArbitrary(rightBoundaryTopY,rightBoundaryBottomY);

        this.incorrectTargetPromptAndAnswerPairing.xCoordinate = getRandomArbitrary(rightBoundaryX,gameCanvas.width - 50);
        this.incorrectTargetPromptAndAnswerPairing.yCoordinate = getRandomArbitrary(rightBoundaryTopY,rightBoundaryBottomY);
        while
        (
          this.checkIfObjectsAreTooCloseToEachOther
                (
                  this.correctTargetPromptAndAnswerPairing.xCoordinate,this.correctTargetPromptAndAnswerPairing.yCoordinate,
                  this.incorrectTargetPromptAndAnswerPairing.xCoordinate,this.incorrectTargetPromptAndAnswerPairing.yCoordinate,
                  100
                )
        )
            {
              this.incorrectTargetPromptAndAnswerPairing.xCoordinate = getRandomArbitrary(rightBoundaryX,gameCanvas.width - 50);
              this.incorrectTargetPromptAndAnswerPairing.yCoordinate = getRandomArbitrary(rightBoundaryTopY,rightBoundaryBottomY);
            }
      }

      gameClassManager.currentGame.toggleAnswerPlacements();
    }
    else if(gameClassManager.currentGame.name === "fishingGame"){
      this.correctTargetPromptAndAnswerPairing.xCoordinate = getRandomArbitrary(0,gameCanvas.width - 1);
      this.correctTargetPromptAndAnswerPairing.yCoordinate = getRandomArbitrary(WATER_HEIGHT,gameCanvas.height - 1);
      this.incorrectTargetPromptAndAnswerPairing.xCoordinate = getRandomArbitrary(0,gameCanvas.width - 1);
      this.incorrectTargetPromptAndAnswerPairing.yCoordinate = getRandomArbitrary(WATER_HEIGHT,gameCanvas.height - 1);
    }
  }

  this.setOrResetPromptsAndAnswers = function()
  {
    if (gameClassManager.currentGame === cVcShooterGame || gameClassManager.currentGame.name === 'hello world 2 game' ||
        gameClassManager.currentGame.name === 'hello world game' || gameClassManager.currentGame.name === 'dodge ball game' ||
        gameClassManager.currentGame.name === 'pinataGame' ||
        gameClassManager.currentGame.name === 'bubbleWrap' ||
        gameClassManager.currentGame.name === 'balloonPop')
    {
      return;
    }
    else
    {
      // console.log('inside setOrResetPromptsAndAnswers() of promptsAndAnswersManager');
      //this.assignCurrentLanguageArray();
      this.pickARandomLogicalPromptAnswerGroup();
      this.pickATargetPromptAndAnswerPairing();
      this.pickARandomPromptFromTargetPromptAndAnswerPairing();
      this.defineDataTypeOfCurrentPrompt();
      this.assignAnAnswerBasedOnPrompt();
      this.definecurrentAnswerDataType();
      this.defineIncorrectTargetPromptAndAnswerPairing();
      this.assignAnswerHolderToAnswer(this.correctTargetPromptAndAnswerPairing);
      this.assignAnswerHolderToAnswer(this.incorrectTargetPromptAndAnswerPairing);
      this.assignCurrentIncorrectAnswer();
      this.defineWidthAndHeightForTargetAnswers();
      this.defineXAndYCoordinatesForTargets();
      if (gameClassManager.currentGame.name === 'birdGame'){
        birdGame.assignLeftOrRightDirectionToAnswers();
      } else if (gameClassManager.currentGame.name === 'airGrabGame')
      {
        gameClassManager.currentGame.initializeAnswerSettings();
      }
      promptersManager.loadAppropriatePrompterBasedOnCurrentPromptsDataType();
      this.reinsertAnswersIntoEditedArrayForNextShuffle();
    }
  }


  this.arrayOfWrongAnswers = [];
  this.recordWrongAnswer = function()
  {
    this.arrayOfWrongAnswers.push(this.currentLogicalPromptAndAnswerGroup.name);

    var tally = [];
    for (let wrongAnswerIndex = 0; wrongAnswerIndex < this.arrayOfWrongAnswers.length; wrongAnswerIndex++)
    {
      if (tally[this.arrayOfWrongAnswers[wrongAnswerIndex]] === undefined)
      {
        tally[this.arrayOfWrongAnswers[wrongAnswerIndex]] = 0;
      }
      tally[this.arrayOfWrongAnswers[wrongAnswerIndex]]++;
      if (tally[this.arrayOfWrongAnswers[wrongAnswerIndex]] >= 3)
      {
        helperPrompt.popUp(this.arrayOfWrongAnswers[wrongAnswerIndex]);
        this.arrayOfWrongAnswers = [];
      }
    }
  }
}

let promptsAndAnswersManager = new PromptsAndAnswersManager();
function DrawAnswersManager()
{
  this.getTextLetterColor = function()
  {
    return gameClassManager.currentGame.LETTER_COLOR;
  }

  this.currentCorrectAnswerHolderX = undefined;
  this.currentCorrectAnswerHolderY = undefined;
  this.currentCorrectAnswerHolderWidth = undefined;
  this.currentCorrectAnswerHolderHeight = undefined;

  this.currentIncorrectAnswerHolderX = undefined;
  this.currentIncorrectAnswerHolderY = undefined;
  this.currentIncorrectAnswerHolderWidth = undefined;
  this.currentIncorrectAnswerHolderHeight = undefined;

  this.draw = function()
  {
    if (promptsAndAnswersManager.currentAnswerDataType === 'IMG')
    {
      // for (var arrayOfAnswersAnswerIndex = 0; arrayOfAnswersAnswerIndex < arrayOfAnswers.length; arrayOfAnswersAnswerIndex++)
      // {
      console.log('promptsAndAnswersManager.currentCorrectAnswer: ' + promptsAndAnswersManager.currentCorrectAnswer);
      console.log('promptsAndAnswersManager.currentIncorrectAnswer: ' + promptsAndAnswersManager.currentIncorrectAnswer);

      if (gameClassManager.currentGame.currentCorrectAnswerHolderWidth !== undefined)
      {
        gameClassManager.currentGame.currentAnswerHolderWidth = gameClassManager.currentGame.imageAnswerHolderWidth;
        gameClassManager.currentGame.currentAnswerHolderHeight = gameClassManager.currentGame.imageAnswerHolderHeight;
      }

      if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.answerHolder)
      {
        if (gameClassManager.currentGame.name === 'MazeGame')
        {
          this.currentCorrectAnswerHolderX = promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate;
          this.currentCorrectAnswerHolderY = promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate + 5;
          this.currentCorrectAnswerHolderWidth = gameClassManager.currentGame.imageAnswerHolderWidth;
          this.currentCorrectAnswerHolderHeight = gameClassManager.currentGame.imageAnswerHolderHeight;

          drawFromSheet(promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.answerHolder.image,
            this.currentCorrectAnswerHolderX,this.currentCorrectAnswerHolderY,
            this.currentCorrectAnswerHolderWidth,this.currentCorrectAnswerHolderHeight);
          // gameCanvasContext.drawImage(
          //   promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.answerHolder.image,
          //   this.currentCorrectAnswerHolderX,this.currentCorrectAnswerHolderY,
          //   this.currentCorrectAnswerHolderWidth,this.currentCorrectAnswerHolderHeight
          // );
        }
        else
        {
          this.currentCorrectAnswerHolderX = promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate - 40;
          this.currentCorrectAnswerHolderY = promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate - 40;
          this.currentCorrectAnswerHolderWidth = gameClassManager.currentGame.imageAnswerHolderWidth;
          this.currentCorrectAnswerHolderHeight = gameClassManager.currentGame.imageAnswerHolderHeight;

          drawFromSheet(promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.answerHolder.image,
            this.currentCorrectAnswerHolderX,this.currentCorrectAnswerHolderY,
            this.currentCorrectAnswerHolderWidth,this.currentCorrectAnswerHolderHeight);
          // gameCanvasContext.drawImage(
          //   promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.answerHolder.image,
          //   this.currentCorrectAnswerHolderX,this.currentCorrectAnswerHolderY,
          //   this.currentCorrectAnswerHolderWidth,this.currentCorrectAnswerHolderHeight
          // );
        }
      }

      if (promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.answerHolder)
      {
        if (gameClassManager.currentGame.name === 'MazeGame')
        {
          this.currentIncorrectAnswerHolderX = promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate;
          this.currentIncorrectAnswerHolderY = promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate + 5;
          this.currentIncorrectAnswerHolderWidth = gameClassManager.currentGame.imageAnswerHolderWidth;
          this.currentIncorrectAnswerHolderHeight = gameClassManager.currentGame.imageAnswerHolderHeight;

          drawFromSheet(promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.answerHolder.image,
            this.currentIncorrectAnswerHolderX,this.currentIncorrectAnswerHolderY,
            this.currentIncorrectAnswerHolderWidth,this.currentIncorrectAnswerHolderHeight);
          // gameCanvasContext.drawImage(
          //   promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.answerHolder.image,
          //   this.currentIncorrectAnswerHolderX,this.currentIncorrectAnswerHolderY,
          //   this.currentIncorrectAnswerHolderWidth,this.currentIncorrectAnswerHolderHeight
          // );
        }
        else
        {
          this.currentIncorrectAnswerHolderX = promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate - 40;
          this.currentIncorrectAnswerHolderY = promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate - 40;
          this.currentIncorrectAnswerHolderWidth = gameClassManager.currentGame.imageAnswerHolderWidth;
          this.currentIncorrectAnswerHolderHeight = gameClassManager.currentGame.imageAnswerHolderHeight;

          drawFromSheet(promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.answerHolder.image,
            this.currentIncorrectAnswerHolderX,this.currentIncorrectAnswerHolderY,
            this.currentIncorrectAnswerHolderWidth,this.currentIncorrectAnswerHolderHeight);
          // gameCanvasContext.drawImage(
          //   promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.answerHolder.image,
          //   this.currentIncorrectAnswerHolderX,this.currentIncorrectAnswerHolderY,
          //   this.currentIncorrectAnswerHolderWidth,this.currentIncorrectAnswerHolderHeight
          // );
        }
      }


        dateAndTime.checkForNecessityOfUsingDatesForDrawAnswersManager();

        console.log('promptsAndAnswersManager.currentCorrectAnswer: ' + promptsAndAnswersManager.currentCorrectAnswer);
        drawFromSheet(promptsAndAnswersManager.currentCorrectAnswer,
        promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate,
        promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate, this.imageWidth,this.imageHeight);
        // gameCanvasContext.drawImage(promptsAndAnswersManager.currentCorrectAnswer,
        // promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate,
        // promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate, this.imageWidth,this.imageHeight);

        if (dateAndTime.shouldDrawADateOnAnswers)
        {
          let correctDateToDraw = undefined;

          if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.name === 'mandarin today')
          {
            correctDateToDraw = dateAndTime.todaysDate;
          }
          else if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.name === 'mandarin tomorrow')
          {
            correctDateToDraw = dateAndTime.tomorrowsDate;
          }
          else if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.name === 'mandarin yesterday')
          {
            correctDateToDraw = dateAndTime.yesterdaysDate;
          }

          customFontFillText( (correctDateToDraw.month + 1).toString(), 25, 15,
          promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate + this.imageWidth/2 - 20,
          promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate + this.imageHeight*0.1)

            customFontFillText( (correctDateToDraw.day).toString(), 30, 15,
            promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate + this.imageWidth/2 - 20,
            promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate + this.imageHeight/2);
        }

        console.log('promptsAndAnswersManager.currentIncorrectAnswer.name: ' + promptsAndAnswersManager.currentIncorrectAnswer.name);
        drawFromSheet(promptsAndAnswersManager.currentIncorrectAnswer,
        promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate,
        promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate, this.imageWidth,this.imageHeight);
        // gameCanvasContext.drawImage(promptsAndAnswersManager.currentIncorrectAnswer,
        // promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate,
        // promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate, this.imageWidth,this.imageHeight);

        if (dateAndTime.shouldDrawADateOnAnswers)
        {
          let incorrectDateToDraw = undefined;
          if (promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.name === 'mandarin today')
          {
            incorrectDateToDraw = dateAndTime.todaysDate;
          }
          else if (promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.name === 'mandarin tomorrow')
          {
            incorrectDateToDraw = dateAndTime.tomorrowsDate;
          }
          else if (promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.name === 'mandarin yesterday')
          {
            incorrectDateToDraw = dateAndTime.yesterdaysDate;
          }

            customFontFillText( (incorrectDateToDraw.month + 1).toString(), 25, 15,
            promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate + this.imageWidth/2 - 20,
            promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate + this.imageHeight*0.1);

            customFontFillText( (incorrectDateToDraw.day).toString(), 30, 15,
            promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate + this.imageWidth/2 - 20,
            promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate + this.imageHeight/2);
        }

      //}
    } else if (promptsAndAnswersManager.currentAnswerDataType === 'string')
    {
      gameCanvasContext.fillStyle = this.getTextLetterColor();

      var correctAnswerWidth = promptsAndAnswersManager.getCorrectAnswerWidthFromFontStyle(
        gameClassManager.currentGame.textAnswerFontStyle
      )

      var incorrectAnswerWidth = promptsAndAnswersManager.getIncorrectAnswerWidthFromFontStyle(
        gameClassManager.currentGame.textAnswerFontStyle
      )

      // if (gameClassManager.currentGame.currentCorrectAnswerHolderWidth)
      // {
        gameClassManager.currentGame.currentCorrectAnswerHolderWidth = correctAnswerWidth;
        gameClassManager.currentGame.currentCorrectAnswerHolderHeight = 30;
        gameClassManager.currentGame.currentIncorrectAnswerHolderWidth = incorrectAnswerWidth;
        gameClassManager.currentGame.currentIncorrectAnswerHolderHeight = 30;
      // }
      if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.answerHolder)
      {
        this.currentCorrectAnswerHolderX = promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate - gameClassManager.currentGame.correctTextAnswerHolderWidth/4;
        this.currentCorrectAnswerHolderY = promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate - gameClassManager.currentGame.currentCorrectAnswerHolderHeight*1.2;
        this.currentCorrectAnswerHolderWidth = gameClassManager.currentGame.correctTextAnswerHolderWidth*1.5;
        this.currentCorrectAnswerHolderHeight = gameClassManager.currentGame.currentCorrectAnswerHolderHeight*1.75;

        drawFromSheet(promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.answerHolder.image,
          this.currentCorrectAnswerHolderX,this.currentCorrectAnswerHolderY,
          this.currentCorrectAnswerHolderWidth,this.currentCorrectAnswerHolderHeight);
        // gameCanvasContext.drawImage(
        //   promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.answerHolder.image,
        //   this.currentCorrectAnswerHolderX,this.currentCorrectAnswerHolderY,
        //   this.currentCorrectAnswerHolderWidth,this.currentCorrectAnswerHolderHeight
        // );
      }

      if (promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.answerHolder)
      {
        this.currentIncorrectAnswerHolderX = promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate - gameClassManager.currentGame.incorrectTextAnswerHolderWidth/4;
        this.currentIncorrectAnswerHolderY = promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate - gameClassManager.currentGame.currentIncorrectAnswerHolderHeight*1.2;
        this.currentIncorrectAnswerHolderWidth = gameClassManager.currentGame.currentIncorrectAnswerHolderWidth*1.5;
        this.currentIncorrectAnswerHolderHeight = gameClassManager.currentGame.currentIncorrectAnswerHolderHeight*1.75;

        drawFromSheet(promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.answerHolder.image,
          this.currentIncorrectAnswerHolderX,this.currentIncorrectAnswerHolderY,
          this.currentIncorrectAnswerHolderWidth,this.currentIncorrectAnswerHolderHeight);
        // gameCanvasContext.drawImage(
        //   promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.answerHolder.image,
        //   this.currentIncorrectAnswerHolderX,this.currentIncorrectAnswerHolderY,
        //   this.currentIncorrectAnswerHolderWidth,this.currentIncorrectAnswerHolderHeight
        // );
      }


      //draw correct answer
      // gameCanvasContext.font = '30px Helvetica';
      gameCanvasContext.font = this.textAnswerFontStyle;
      gameCanvasContext.fillText(promptsAndAnswersManager.currentCorrectAnswer,
      promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate,
      promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate);

      //collider box
      gameCanvasContext.strokeStyle = 'white';
      gameCanvasContext.strokeRect(promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate - 5,
                                  promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate-this.textAnswerFontSize,//fill text offset
                                  correctAnswerWidth + 10, this.textAnswerFontSize + 10);

      //draw incorrect answer
      gameCanvasContext.fillStyle = this.LETTER_COLOR;
      gameCanvasContext.fillText(promptsAndAnswersManager.currentIncorrectAnswer,
      promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate,
      promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate);

      //collider collider box
      gameCanvasContext.strokeStyle = 'white';
      gameCanvasContext.strokeRect(promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate - 5,
                                  promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate - this.textAnswerFontSize,//fill text offset
                                  incorrectAnswerWidth + 10 , this.textAnswerFontSize + 10);
      //}
    } else if (promptsAndAnswersManager.currentAnswerDataType === "AUDIO")
    {
      // for (var arrayOfAnswersAnswerIndex = 0; arrayOfAnswersAnswerIndex < arrayOfAnswers.length; arrayOfAnswersAnswerIndex++)
      // {

      if (gameClassManager.currentGame.currentCorrectAnswerHolderWidth !== undefined)
      {
        gameClassManager.currentGame.currentAnswerHolderWidth = gameClassManager.currentGame.audioImageAnswerHolderWidth*1.1;
        gameClassManager.currentGame.currentAnswerHolderHeight = gameClassManager.currentGame.audioImageAnswerHolderHeight*1.1;
      }

      if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.answerHolder)
      {
        this.currentCorrectAnswerHolderX = promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate - 15;
        this.currentCorrectAnswerHolderY = promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate - 20;
        this.currentCorrectAnswerHolderWidth = gameClassManager.currentGame.audioImageAnswerHolderWidth*1.1;
        this.currentCorrectAnswerHolderHeight = gameClassManager.currentGame.audioImageAnswerHolderHeight*1.1;

        drawFromSheet(promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.answerHolder.image,
          this.currentCorrectAnswerHolderX,this.currentCorrectAnswerHolderY,
          this.currentCorrectAnswerHolderWidth,this.currentCorrectAnswerHolderHeight);
        // gameCanvasContext.drawImage(
        //   promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.answerHolder.image,
        //   this.currentCorrectAnswerHolderX,this.currentCorrectAnswerHolderY,
        //   this.currentCorrectAnswerHolderWidth,this.currentCorrectAnswerHolderHeight
        // );
      }

      if (promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.answerHolder)
      {
        this.currentIncorrectAnswerHolderX = promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate - 15;
        this.currentIncorrectAnswerHolderY = promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate - 20;
        this.currentIncorrectAnswerHolderWidth = gameClassManager.currentGame.audioImageAnswerHolderWidth*1.1;
        this.currentIncorrectAnswerHolderHeight = gameClassManager.currentGame.audioImageAnswerHolderHeight*1.1;

        drawFromSheet(promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.answerHolder.image,
          this.currentIncorrectAnswerHolderX,this.currentIncorrectAnswerHolderY,
          this.currentIncorrectAnswerHolderWidth,this.currentIncorrectAnswerHolderHeight);
        // gameCanvasContext.drawImage(
        //   promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.answerHolder.image,
        //   this.currentIncorrectAnswerHolderX,this.currentIncorrectAnswerHolderY,
        //   this.currentIncorrectAnswerHolderWidth,this.currentIncorrectAnswerHolderHeight
        // );
      }


      this.audioImageWidth = gameClassManager.currentGame.audioImageAnswerWidth;
      this.audioImageHeight = gameClassManager.currentGame.audioImageAnswerHeight;

      if (promptsAndAnswersManager.currentCorrectAnswer.shouldBeFlashing)
      {
        gameCanvasContext.globalCompositeOperation = promptersManager.globalCompositeOperationForCanvasContext;
        gameCanvasContext.globalAlpha = promptersManager.highlightedAnswerCurrentAlpha;
      }
      //gameCanvasContext.globalAlpha = 0;
      drawFromSheet("images\\placeholderPlayButtonImage.png",
      promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate,
      promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate, this.audioImageWidth,this.audioImageHeight);

      // gameCanvasContext.drawImage(placeholderPlayButtonImage,
      // promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate,
      // promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate, this.audioImageWidth,this.audioImageHeight);
      gameCanvasContext.globalCompositeOperation = 'source-over';
      gameCanvasContext.globalAlpha = 1;

      if (promptsAndAnswersManager.currentIncorrectAnswer.shouldBeFlashing)
      {
        gameCanvasContext.globalCompositeOperation = promptersManager.globalCompositeOperationForCanvasContext;
        gameCanvasContext.globalAlpha = promptersManager.highlightedAnswerCurrentAlpha;
      }
      //gameCanvasContext.globalAlpha = 0;
      drawFromSheet("images\\placeholderPlayButtonImage.png",
      promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate,
      promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate, this.audioImageWidth,this.audioImageHeight);
      // gameCanvasContext.drawImage(placeholderPlayButtonImage,
      // promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate,
      // promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate, this.audioImageWidth,this.audioImageHeight);
      gameCanvasContext.globalCompositeOperation = 'source-over';
      gameCanvasContext.globalAlpha = 1;
      //}
    }
  }

  this.imageWidth = undefined;
  this.imageHeight = undefined;
  this.audioImageWidth = undefined;
  this.audioImageHeight = undefined;
  this.textAnswerFontStyle = undefined;

  this.initialize = function () {
    this.imageWidth  = gameClassManager.currentGame.imageAnswerWidth;
    this.imageHeight = gameClassManager.currentGame.imageAnswerHeight;
    this.audioImageWidth  = gameClassManager.currentGame.audioImageAnswerWidth;
    this.audioImageHeight = gameClassManager.currentGame.audioImageAnswerHeight;
    this.textAnswerFontStyle = gameClassManager.currentGame.textAnswerFontStyle;
  }
}

let drawAnswersManager = new DrawAnswersManager();
const NO_COLLISION = 0
const COLLISION_WITH_CORRECT_ANSWER   = 1
const COLLISION_WITH_INCORRECT_ANSWER = 2

function CollisionsWithAnswersManager()
{
    this.currentCollidedAnswer = undefined;
    this.currentCollidingObjectX = undefined;
    this.currentCollidingObjectY = undefined;

    this.initialize = function(game)
    {
        this.textAnswerFontSize  = game.textAnswerFontSize;
        this.textAnswerFontStyle = game.textAnswerFontStyle;
        this.imageAnswerWidth = game.imageAnswerWidth;
        this.imageAnswerHeight = game.imageAnswerHeight;
        this.audioImageAnswerWidth = game.audioImageAnswerWidth;
        this.audioImageAnswerHeight = game.audioImageAnswerHeight;
    }

    this.insideBoxColliderForStringAnswer = function(
        collidingObject, targetPromptAndAnswerPairing, answerWidth)
    {
        return (
            collidingObject.x < targetPromptAndAnswerPairing.xCoordinate - 5 + answerWidth &&
            collidingObject.x + collidingObject.width > targetPromptAndAnswerPairing.xCoordinate + 5  &&
            collidingObject.y < targetPromptAndAnswerPairing.yCoordinate + 10 &&
            collidingObject.y + collidingObject.height > targetPromptAndAnswerPairing.yCoordinate - 15
        );
    }

    this.insideBoxColliderForImageAnswers = function(
        collidingObject, targetPromptAndAnswerPairing, imageWidth, imageHeight)
    {
        let correctAnswerRightSide    = targetPromptAndAnswerPairing.xCoordinate + imageWidth;
        let correctAnswerLeftSide     = targetPromptAndAnswerPairing.xCoordinate;
        let correctAnswerBottomSide   = targetPromptAndAnswerPairing.yCoordinate + imageHeight;
        let correctAnswerTopSide      = targetPromptAndAnswerPairing.yCoordinate;
        let collidingObjectLeftSide   = collidingObject.x;
        let collidingObjectRightSide  = collidingObject.x + collidingObject.width;
        let collidingObjectTopSide    = collidingObject.y;
        let collidingObjectBottomSide = collidingObject.y + collidingObject.height;

        return (collidingObjectLeftSide < correctAnswerRightSide &&
                collidingObjectRightSide > correctAnswerLeftSide &&
                collidingObjectTopSide < correctAnswerBottomSide &&
                collidingObjectBottomSide > correctAnswerTopSide)
    }

    this.handleCollisionsWithStringAnswers = function(collidingObject)
    {
        // Get answers width
        correctAnswerWidth = promptsAndAnswersManager.getCorrectAnswerWidthFromFontStyle(
            this.textAnswerFontStyle
        );
        incorrectAnswerWidth = promptsAndAnswersManager.getIncorrectAnswerWidthFromFontStyle(
            this.textAnswerFontStyle
        );

        // Collision with correct answer?
        if (this.insideBoxColliderForStringAnswer(
            collidingObject,
            promptsAndAnswersManager.correctTargetPromptAndAnswerPairing,
            correctAnswerWidth
            )
        ){
            if (gameClassManager.currentGame.collisionVisualEffect)
            {
              gameClassManager.currentGame.collisionVisualEffect(
                drawAnswersManager.currentCorrectAnswerHolderX,
                drawAnswersManager.currentCorrectAnswerHolderY,
                drawAnswersManager.currentCorrectAnswerHolderWidth,
                drawAnswersManager.currentCorrectAnswerHolderHeight)
            }
            this.currentCollidedAnswer = promptsAndAnswersManager.correctTargetPromptAndAnswerPairing;
            this.currentCollidingObjectX = collidingObject.x;
            this.currentCollidingObjectY = collidingObject.y;
            return COLLISION_WITH_CORRECT_ANSWER;
        }

        // Collision with incorrect answer?
        else if (this.insideBoxColliderForStringAnswer(
            collidingObject,
            promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing,
            incorrectAnswerWidth
            )
        ){
          if (gameClassManager.currentGame.collisionVisualEffect)
          {
            gameClassManager.currentGame.collisionVisualEffect(
              drawAnswersManager.currentIncorrectAnswerHolderX,
              drawAnswersManager.currentIncorrectAnswerHolderY,
              drawAnswersManager.currentIncorrectAnswerHolderWidth,
              drawAnswersManager.currentIncorrectAnswerHolderHeight)
          }
          this.currentCollidedAnswer = promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing;
          this.currentCollidingObjectX = collidingObject.x;
          this.currentCollidingObjectY = collidingObject.y;
            return COLLISION_WITH_INCORRECT_ANSWER;
        }

        return NO_COLLISION;
    }

    this.handleCollisionsWithImageAnswers = function(collidingObject){

        // Collision with correct answer?
        if (this.insideBoxColliderForImageAnswers(
            collidingObject,
            promptsAndAnswersManager.correctTargetPromptAndAnswerPairing,
            this.imageAnswerWidth, this.imageAnswerHeight
            )
        )
        {
          if (gameClassManager.currentGame.collisionVisualEffect)
          {
            gameClassManager.currentGame.collisionVisualEffect(
              drawAnswersManager.currentCorrectAnswerHolderX,
              drawAnswersManager.currentCorrectAnswerHolderY,
              drawAnswersManager.currentCorrectAnswerHolderWidth,
              drawAnswersManager.currentCorrectAnswerHolderHeight)
          }
          this.currentCollidedAnswer = promptsAndAnswersManager.correctTargetPromptAndAnswerPairing;
          this.currentCollidingObjectX = collidingObject.x;
          this.currentCollidingObjectY = collidingObject.y;
            return COLLISION_WITH_CORRECT_ANSWER;
        }

        // Collision with incorrect answer?
        else if (this.insideBoxColliderForImageAnswers(
            collidingObject,
            promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing,
            this.imageAnswerWidth, this.imageAnswerHeight
            )
        )
        {
          if (gameClassManager.currentGame.collisionVisualEffect)
          {
            gameClassManager.currentGame.collisionVisualEffect(
              drawAnswersManager.currentIncorrectAnswerHolderX,
              drawAnswersManager.currentIncorrectAnswerHolderY,
              drawAnswersManager.currentIncorrectAnswerHolderWidth,
              drawAnswersManager.currentIncorrectAnswerHolderHeight)
          }
          this.currentCollidedAnswer = promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing;
          this.currentCollidingObjectX = collidingObject.x;
          this.currentCollidingObjectY = collidingObject.y;
            return COLLISION_WITH_INCORRECT_ANSWER;
        }

        return NO_COLLISION;
    }

    this.handleCollisionsWithAudioImageAnswers = function(collidingObject){

        // Collision with correct answer?
        if (this.insideBoxColliderForImageAnswers(
            collidingObject,
            promptsAndAnswersManager.correctTargetPromptAndAnswerPairing,
            this.audioImageAnswerWidth, this.audioImageAnswerHeight
            )
        )
        {
          if (gameClassManager.currentGame.collisionVisualEffect)
          {
            gameClassManager.currentGame.collisionVisualEffect(
              drawAnswersManager.currentCorrectAnswerHolderX,
              drawAnswersManager.currentCorrectAnswerHolderY,
              drawAnswersManager.currentCorrectAnswerHolderWidth,
              drawAnswersManager.currentCorrectAnswerHolderHeight)
          }
          this.currentCollidedAnswer = promptsAndAnswersManager.correctTargetPromptAndAnswerPairing;
          this.currentCollidingObjectX = collidingObject.x;
          this.currentCollidingObjectY = collidingObject.y;
            return COLLISION_WITH_CORRECT_ANSWER;
        }

        // Collision with incorrect answer?
        else if (this.insideBoxColliderForImageAnswers(
            collidingObject,
            promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing,
            this.audioImageAnswerWidth, this.audioImageAnswerHeight
            )
        )
        {
          if (gameClassManager.currentGame.collisionVisualEffect)
          {
            gameClassManager.currentGame.collisionVisualEffect(
              drawAnswersManager.currentIncorrectAnswerHolderX,
              drawAnswersManager.currentIncorrectAnswerHolderY,
              drawAnswersManager.currentIncorrectAnswerHolderWidth,
              drawAnswersManager.currentIncorrectAnswerHolderHeight)
          }
          this.currentCollidedAnswer = promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing;
          this.currentCollidingObjectX = collidingObject.x;
          this.currentCollidingObjectY = collidingObject.y;
          return COLLISION_WITH_INCORRECT_ANSWER;
        }

        return NO_COLLISION;
    }

    this.handleCollisionsWithAnswers = function(collidingObject)
    {
        // Verify if a collision with an answer happen
        if (promptsAndAnswersManager.currentAnswerDataType === 'string')
        {
            var collisionType = this.handleCollisionsWithStringAnswers(collidingObject);
        }
        else if (promptsAndAnswersManager.currentAnswerDataType === 'IMG')
        {
            var collisionType = this.handleCollisionsWithImageAnswers(collidingObject);
        }
        else if (promptsAndAnswersManager.currentAnswerDataType === 'AUDIO')
        {
            var collisionType = this.handleCollisionsWithAudioImageAnswers(collidingObject);
        }//end of else if for data type checks;

        // If a collision happens
        if (collisionType != NO_COLLISION)
        {
          if (gameClassManager.currentGame.name === 'spaceShooter')
          {
            gameClassManager.currentGame.spaceRockParticleManager.createAGroupOfParticles();
            gameClassManager.currentGame.rocketExplosionsManager.createAnExplosion();
          }
          if (gameClassManager.currentGame.name === 'finder game')
          {
            if (collisionType === COLLISION_WITH_CORRECT_ANSWER)
            {
              gameClassManager.currentGame.playerCharacter.x = gameClassManager.currentGame.playerCharacter.startingX;
              gameClassManager.currentGame.playerCharacter.y = gameClassManager.currentGame.playerCharacter.startingY;
              gameClassManager.currentGame.playerCharacter.numberOfKeys++;
            }
          }
          if (gameClassManager.currentGame.name === 'nighttime game')
          {
            if (collisionType === COLLISION_WITH_INCORRECT_ANSWER)
            {
              gameClassManager.currentGame.playerCharacter.laserShot.y =
              promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate + 75;
              gameClassManager.currentGame.playerCharacter.laserShot.height = gameCanvas.height -
              gameClassManager.currentGame.playerCharacter.laserShot.y - (gameCanvas.height - gameClassManager.currentGame.playerCharacter.ghostGunY);
            }
            else if (collisionType === COLLISION_WITH_CORRECT_ANSWER)
            {
              gameClassManager.currentGame.playerCharacter.laserShot.y =
              promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate + 75;
              gameClassManager.currentGame.playerCharacter.laserShot.height = gameCanvas.height -
              gameClassManager.currentGame.playerCharacter.laserShot.y - (gameCanvas.height - gameClassManager.currentGame.playerCharacter.ghostGunY);
            }
          }
          if (gameClassManager.currentGame.name === 'frog crate game')
          {
            let tongue = gameClassManager.currentGame.playerCharacter.tongue;
            let playerCharacter = gameClassManager.currentGame.playerCharacter;

            tongue.y = playerCharacter.y - 10;
            tongue.height = playerCharacter.y - tongue.y + 10;
            playerCharacter.tongueShouldBeStretchingOut = false;
            playerCharacter.tongueShouldBeReturningToMouth = false;
          }
          // if (gameClassManager.currentGame.collisionVisualEffect)
          // {
          //   gameClassManager.currentGame.collisionVisualEffect();
          // }
          if (gameClassManager.currentGame.collisionAudioEffect)
          {
            gameClassManager.currentGame.collisionAudioEffect(collisionType);
          }

          if (collisionType == COLLISION_WITH_CORRECT_ANSWER){
              this.processCollisionWithCorrectAnswer();
          }
          else if (collisionType == COLLISION_WITH_INCORRECT_ANSWER){
              this.processCollisionWithIncorrectAnswer();
          }

          this.processCollisionWithAnswer();
        }

        if ( (nextGame === SINGLE_PLAYER_RANDOM || nextGame === TWO_PLAYER_RANDOM) &&
                cycleCount === CYCLE_LIMIT_FOR_RANDOM_GAME_RELOAD )
        {
            loadRandomGame();
            cycleCount = 0;
        }
    }

    this.processCollisionWithAnswer = function (){
        if (nextGame === SINGLE_PLAYER_RANDOM ||
            nextGame === TWO_PLAYER_RANDOM)
        {
            cycleCount++;
        }
        promptersManager.currentPrompter.currentWidth = 150;
        promptersManager.currentPrompter.currentHeight = 150;
        this.resetAnswers();
        calculateAccuracy();
    }

    this.processCollisionWithCorrectAnswer = function(){
        genAudio.playPositive();
        amountCorrect++;
        if (gameClassManager.currentGame.name === 'birdGame')
        {
          if (gameClassManager.currentGame.amountCorrect <
              gameClassManager.currentGame.plane.bannerMessageCharacters.length)
              {
                gameClassManager.currentGame.amountCorrect++;
              }
        }
        if (gameClassManager.currentGame.name === 'laneGame')
        {
          if (gameClassManager.currentGame.amountCorrect <
              gameClassManager.currentGame.background.billboard.bannerMessageCharacters.length)
              {
                gameClassManager.currentGame.amountCorrect++;
              }
        }
    }

    this.processCollisionWithIncorrectAnswer = function(){
        promptsAndAnswersManager.recordWrongAnswer();
        genAudio.playNegative();
        amountIncorrect++;
    }

    this.resetAnswers = function()
    {
        //promptersManager.currentPrompter.currentWidth = 150;
        //promptersManager.currentPrompter.currentHeight = 150;
        promptsAndAnswersManager.setOrResetPromptsAndAnswers();
        promptersManager.loadAppropriatePrompterBasedOnCurrentPromptsDataType();
        promptersManager.promptThePlayer();
        if (gameClassManager.currentGame.playerCharacter != null) {
          gameClassManager.currentGame.playerCharacter.speedX = 0;
          gameClassManager.currentGame.playerCharacter.speedY = 0;
        }
    }
}
CollisionsWithAnswersManager.prototype = new CollisionsWithAnswersManager();
function LoadingAndSplashScreen()
{
  this.handleClickWhileLoading = function()
  {
    return;
  }

  this.handleClickAfterLoading = function()
  {
    fullGameStateMachine.loadCurrentState(fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.transitionToTitleScreen);
    transitionToTitleScreen.changeFullGameStateAfterTwoSeconds();
    genAudio.playClick();
    genAudio.playTitleMusic();

    gameInterval.start();

    promptersManager.instantiatePrompters();
    initializePromptAndAnswerObjects();
    populatePromptAndAnswerArrays();
    mandarinCustomizationScreen = new LanguageCustomizationScreen('mandarin customization screen', promptsAndAnswersManager.arrayOfLogicalMandarinPromptAnswerGroupings);
    //console.log('mandarinCustomizationScreen: ' + mandarinCustomizationScreen);
    mandarinCustomizationScreen.initializePromptAndAnswerGroupCheckBoxes();
    mandarinCustomizationScreen.initializeIndividualPromptsAndAnswerCheckBoxes();
    mandarinCustomizationScreen.initializeArrayOfDivs();

    englishCustomizationScreen = new LanguageCustomizationScreen('english customization screen', promptsAndAnswersManager.arrayOfLogicalEnglishPromptAnswerGroupings);
    //console.log('mandarinCustomizationScreen: ' + mandarinCustomizationScreen);
    englishCustomizationScreen.initializePromptAndAnswerGroupCheckBoxes();
    englishCustomizationScreen.initializeIndividualPromptsAndAnswerCheckBoxes();
    englishCustomizationScreen.initializeArrayOfDivs();

    centralVietnameseCustomizationScreen = new LanguageCustomizationScreen('central vietnamese customization screen', promptsAndAnswersManager.arrayOfLogicalVietnamesePromptAnswerGroupings);
    //console.log('mandarinCustomizationScreen: ' + mandarinCustomizationScreen);
    centralVietnameseCustomizationScreen.initializePromptAndAnswerGroupCheckBoxes();
    centralVietnameseCustomizationScreen.initializeIndividualPromptsAndAnswerCheckBoxes();
    centralVietnameseCustomizationScreen.initializeArrayOfDivs();
  }

  this.promptPlayerForClickAfterLoading = function()
  {
    this.drawLoadingOrSplashOrTitleScreenBackground();

    let sentenceArray1 = ['Downloading done', symbolPeriodImage];
    customFontFillText(sentenceArray1, 30, 20, 150, 250);

    let sentenceArray2 = ['Click to start', symbolPeriodImage];
    customFontFillText(sentenceArray2, 30, 20, 165, 350);
  }

  this.draw = function()
  {
    if (fullGameStateMachine.currentState === fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.loading)
    {
      this.drawLoadingOrSplashOrTitleScreenBackground();
      this.drawPleaseWaitForLoadingMessage();
    }
    else if (fullGameStateMachine.currentState === fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.clickToLaunch)
    {
      this.promptPlayerForClickAfterLoading();
    }
  }

  this.drawLoadingOrSplashOrTitleScreenBackground = function()
  {
    gameCanvasContext.fillStyle = 'orange';
    gameCanvasContext.fillRect(0,0, gameCanvas.width,gameCanvas.height);
    // fancyBG(titleFancySprites,titleFancySprites);
  }

  this.drawPleaseWaitForLoadingMessage = function()
  {
    this.drawLoadingOrSplashOrTitleScreenBackground();
    gameCanvasContext.fillStyle = 'lime';
    gameCanvasContext.font = '30px Helvetica';
    gameCanvasContext.fillText("The game is downloading. Please Wait.", 0,50);
  }
}

let loadingAndSplashScreen = new LoadingAndSplashScreen();
function TransitionToTitleScreen()
{
  //console.log('transitioning to title screen, should switch states in 2 second');

  this.changeFullGameStateAfterTwoSeconds = function()
  {
    setTimeout(function()
    {
      fullGameStateMachine.loadCurrentState(fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.titleScreen)
    }, TITLESCREEN_TRANSITION_TIME);
  };

  this.draw = function()
  {

    gameCanvasContext.fillStyle = 'orange';
    gameCanvasContext.fillRect(0,0, gameCanvas.width,gameCanvas.height);

    fancyBG();

    customFontFillText(['Welcome to '], gameCanvas.width*0.08, gameCanvas.width*0.075,
                        gameCanvas.width/2 - gameCanvas.width*0.4,gameCanvas.height/2 - 100);
    customFontFillText(['Bundle of 30 Language Games!'], gameCanvas.width*0.075, gameCanvas.width*0.035,
                        gameCanvas.width*0.01,gameCanvas.height/2 + 50);
  }


}

let transitionToTitleScreen = new TransitionToTitleScreen();
// normal, two second long transitions
var TRANSITION_SPEED_MULTIPLIER = 1;
var TITLESCREEN_TRANSITION_TIME = 2000;

const SKIP_TRANSITIONS = false; // instant, good for debugging

if (SKIP_TRANSITIONS) {
    TRANSITION_SPEED_MULTIPLIER = 10;
    TITLESCREEN_TRANSITION_TIME = 1;
    //console.log("SKIP_TRANSITIONS is true");
}

var levelIsTransitioning = false;
var transitionIsFadingIn = false;
var transitionIsFadingOut = false;

function MiniGameTransitioner()
{
  this.draw = function()
  {
    //fade stuff
    let transitionScreenVisualFadeLevel = gameCanvasContext.globalAlpha;

    if (transitionScreenVisualFadeLevel < 1 && transitionIsFadingIn)
    {
      transitionScreenVisualFadeLevel += 0.01 * TRANSITION_SPEED_MULTIPLIER;
      gameCanvasContext.globalAlpha = transitionScreenVisualFadeLevel;
      if (transitionScreenVisualFadeLevel > 0.9)
      {
        transitionIsFadingIn = false;
        transitionIsFadingOut = true;
      }
    } else if (transitionScreenVisualFadeLevel > 0 && transitionIsFadingOut)
    {
      transitionScreenVisualFadeLevel -= 0.01 * TRANSITION_SPEED_MULTIPLIER;
      gameCanvasContext.globalAlpha = transitionScreenVisualFadeLevel;
    }

    //background
    gameCanvasContext.fillStyle = 'orange';
    gameCanvasContext.fillRect(0,0, 640,700);
    fancyBG();

    //text
    this.drawTransitionText();

    if (SKIP_TRANSITIONS) {
        //console.log("Skipping transition!");
        transitionIsFadingIn = false;
        transitionIsFadingOut = false;
        transitionScreenVisualFadeLevel = 1;
        gameCanvasContext.globalAlpha = 1;
        levelIsTransitioning = false;
    }

  }

  this.initialize = function()
  {
    gameCanvasContext.globalAlpha = 0;
    transitionIsFadingIn = true;
    if (gameClassManager.currentGame && // this can sometimes be null
        gameClassManager.currentGame.drawTransitionText)
    {
      this.drawTransitionText = gameClassManager.currentGame.drawTransitionText;
    }
    else
    {
      this.drawTransitionText = (function () {
        customFontFillText(['placeholder transition text'], 30, 15, 50,300);
      });
    }
  }

  this.drawTransitionText = undefined;
}

let miniGameTransitioner = new MiniGameTransitioner();
//** To use the custom font fill text, please create an array where numbers and letters can be put in together in a string
//at one index,and then symbols and punctuation get their own index.
//Example: let yourSentenceArray = ['These are words and 1', symbolCommaImage, ' 2', symbolCommaImage, ' and 3 numbers', symbolPeriodImage];
//Here is the current list of symbols:
// upArrowImage
// rightArrowImage
// downArrowImage
// leftArrowImage
// symbolTildeImage ~
// symbolExclamationPointImage !
// symbolEmailAtImage @
// symbolHashImage #
// symbolDollarSignImage $
// symbolPercentImage %
// symbolEqualsImage =
// symbolQuestionMarkImage ?
// symbolPeriodImage .

function customFontFillText(arrayOfCharacterTypes, fontSize, spacing, xCoordinate,yCoordinate)
{

  let arrayOfCharacterObjectLiterals = [];

  for (let arrayOfCharactersTypesIndex = 0; arrayOfCharactersTypesIndex < arrayOfCharacterTypes.length; arrayOfCharactersTypesIndex++)
  {
    if (typeof arrayOfCharacterTypes[arrayOfCharactersTypesIndex] === 'string')
    {
      let string = arrayOfCharacterTypes[arrayOfCharactersTypesIndex];
      for (let stringIndex = 0; stringIndex < string.length; stringIndex++)
      arrayOfCharacterObjectLiterals.push({

                                           character: string.charAt(stringIndex),
                                           imageObjectBinding: undefined
                                         });
    } else
    {
      let specialCharacter = arrayOfCharacterTypes[arrayOfCharactersTypesIndex];
      arrayOfCharacterObjectLiterals.push({
                                           imageObjectBinding: specialCharacter
                                         });
    }

  }



  for (let arrayOfCharactersIndex = 0; arrayOfCharactersIndex < arrayOfCharacterObjectLiterals.length; arrayOfCharactersIndex++)
  {
    for (let arrayOfTextLettersIndex = 0; arrayOfTextLettersIndex < arrayOfTextLetters.length; arrayOfTextLettersIndex++)
    {
      if (arrayOfTextLetters[arrayOfTextLettersIndex] === arrayOfCharacterObjectLiterals[arrayOfCharactersIndex].character)
      {
        let characterObjectBindingName = 'small' + arrayOfCharacterObjectLiterals[arrayOfCharactersIndex].character;
        arrayOfCharacterObjectLiterals[arrayOfCharactersIndex].imageObjectBinding = window[characterObjectBindingName];
        arrayOfCharacterObjectLiterals[arrayOfCharactersIndex].sheetFilename = 
            "images\\Custom Font\\pngs\\small letters\\"
            +characterObjectBindingName
            +".png";
      }
      if (arrayOfTextLetters[arrayOfTextLettersIndex].toUpperCase() === arrayOfCharacterObjectLiterals[arrayOfCharactersIndex].character)
      {
        characterObjectBindingName = 'big' + arrayOfCharacterObjectLiterals[arrayOfCharactersIndex].character.toLowerCase();
        arrayOfCharacterObjectLiterals[arrayOfCharactersIndex].imageObjectBinding = window[characterObjectBindingName];
        arrayOfCharacterObjectLiterals[arrayOfCharactersIndex].sheetFilename = 
            "images\\Custom Font\\pngs\\big letters\\"
            +characterObjectBindingName
            +".png";
      }
    }

    for (let arrayOfTextNumbersIndex = 0; arrayOfTextNumbersIndex < arrayOfTextNumbers.length; arrayOfTextNumbersIndex++)
    {
      if (arrayOfTextNumbers[arrayOfTextNumbersIndex] === arrayOfCharacterObjectLiterals[arrayOfCharactersIndex].character)
      {
        characterObjectBindingName = 'number' + arrayOfCharacterObjectLiterals[arrayOfCharactersIndex].character;
        arrayOfCharacterObjectLiterals[arrayOfCharactersIndex].imageObjectBinding = window[characterObjectBindingName];
        arrayOfCharacterObjectLiterals[arrayOfCharactersIndex].sheetFilename = 
            "images\\Custom Font\\pngs\\numbers\\"
            +arrayOfCharacterObjectLiterals[arrayOfCharactersIndex].character//characterObjectBindingName
            +".png";
      }
    }//end of checking for number matches
  }// end of loop through characters

  for (let arrayOfCharactersIndex = 0; arrayOfCharactersIndex < arrayOfCharacterObjectLiterals.length; arrayOfCharactersIndex++)
  {
    // new way, using name lookup to spritesheet
    if (arrayOfCharacterObjectLiterals[arrayOfCharactersIndex].sheetFilename) {
        drawFromSheetSimple(arrayOfCharacterObjectLiterals[arrayOfCharactersIndex].sheetFilename,
            xCoordinate + arrayOfCharactersIndex*spacing,yCoordinate,
            fontSize,fontSize);
    } else {
        // old way, using many images: works fine
        if (arrayOfCharacterObjectLiterals[arrayOfCharactersIndex].imageObjectBinding === undefined) {
            continue;
        }
        gameCanvasContext.drawImage(arrayOfCharacterObjectLiterals[arrayOfCharactersIndex].imageObjectBinding,
        0,0, /*starting x and y coordinates of original png*/
        1000,750, /*original png width and height*/
        xCoordinate + arrayOfCharactersIndex*spacing,yCoordinate,/*x y on canvas, space each character by 20 pixels horizontally*/
        fontSize,fontSize/*width and height of drawing on canvas*/);
    }
  }

}//end of customFontFillText
function frameInterval(updateFunction, frameRate) {
    var timerObject = setInterval(updateFunction, frameRate);

    this.stop = function() {
        if (timerObject) {
            clearInterval(timerObject);
            timerObject = null;
        }
        return this;
    }

    // start timer using current settings (if it's not already running)
    this.start = function() {
        if (!timerObject) {
            this.stop();
            timerObject = setInterval(updateFunction, frameRate);
        }
        return this;
    }

    // start with new interval, stop current interval
    this.reset = function(newRate) {
        frameRate = newRate;
        return this.stop().start();
    }
}

var gameInterval, letterSpawnInterval;
var accuracy = 0;
var amountCorrect = 0;
var amountIncorrect = 0;

function calculateAccuracy()
{
    accuracy = 100 * ( amountCorrect/(amountCorrect + amountIncorrect) );
    accuracy = Math.floor(accuracy);
}

function drawStats()
{
  statsCanvasContext.font = '30px Helvetica';
  statsCanvasContext.fillStyle = 'black';
  statsCanvasContext.fillText("Correct: " + amountCorrect, statsCanvas.width/2 - 60+1, statsCanvas.height/2 - 180+1);
  statsCanvasContext.fillText("Incorrect: " + amountIncorrect, statsCanvas.width/2 - 60+1, statsCanvas.height/2 + 12+1);
  statsCanvasContext.fillText("Accuracy: " + accuracy + "%", statsCanvas.width/2 - 65+1, statsCanvas.height/2 + 204+1);
  statsCanvasContext.fillStyle = '#FFEEBB';
  statsCanvasContext.fillText("Correct: " + amountCorrect, statsCanvas.width/2 - 60, statsCanvas.height/2 - 180);
  statsCanvasContext.fillText("Incorrect: " + amountIncorrect, statsCanvas.width/2 - 60, statsCanvas.height/2 + 12);
  statsCanvasContext.fillText("Accuracy: " + accuracy + "%", statsCanvas.width/2 - 65, statsCanvas.height/2 + 204);
}

function drawStatsBackground()
{
  statsCanvasContext.fillStyle = 'purple';
  statsCanvasContext.fillRect(0,0, statsCanvas.width,statsCanvas.height);

  drawFromSheet("images\\Backgrounds\\scoreboard_overlay.png",0,0, useStatsCanvas = true);
  //statsCanvasContext.drawImage("images\\Backgrounds\\scoreboard_overlay.png",0,0);
}
var debugOn = false;

function drawDebugStuff()
{

  if (fullGameStateMachine.currentState === fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.titleScreen ||
      fullGameStateMachine.currentState === fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame ||
    fullGameStateMachine.currentState === fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.mandarinCustomizationScreen)
  {

    gameCanvasContext.fillStyle = 'black';
    gameCanvasContext.fillText(inputManager.mouseCoordinates.x + "," + inputManager.mouseCoordinates.y,
                                inputManager.mouseCoordinates.x,inputManager.mouseCoordinates.y);
  } else if (fullGameStateMachine.playingAGameState)
  {
    drawLetterCoordinates();
    drawPlayerCoordinates();
    drawLetterColliders();
  }
}

function drawLetterCoordinates()
{
  for (let letterIndex = 0; letterIndex < arrayOfAnswers.length; letterIndex++)
  {
    gameCanvasContext.fillStyle = 'black';
    gameCanvasContext.fillText(arrayOfAnswers[letterIndex].xCoordinate + ',' + arrayOfAnswers[letterIndex].yCoordinate,
                              arrayOfAnswers[letterIndex].xCoordinate, arrayOfAnswers[letterIndex].yCoordinate - 27);
  }
}

function drawPlayerCoordinates()
{
  gameCanvasContext.fillStyle = 'black';
  gameCanvasContext.font = '27px Helvetica';
  gameCanvasContext.fillText(gameClassManager.currentGame.playerCharacter.x + ',' + gameClassManager.currentGame.playerCharacter.y, gameClassManager.currentGame.playerCharacter.x,gameClassManager.currentGame.playerCharacter.y);
}

function drawLetterColliders()
{
  for(let letterIndex = 0; letterIndex < arrayOfAnswers.length; letterIndex++)
  {
    gameCanvasContext.strokeStyle = 'black';
    gameCanvasContext.strokeRect(arrayOfAnswers[letterIndex].xCoordinate,arrayOfAnswers[letterIndex].yCoordinate - 20,
                                27,27);
  }
}
function GameClass()
{
  this.pregameSpecialCode = function()
  {
    //console.log("no pregame special code is used by this game");
  };
  this.postLoadInit = function()
  {
    //console.log("no post load special code is used by this game");
  };

  this.initialize = function()
  {
    //console.log('inside initialization of GameClass');
    if (gameClassManager.currentGame.playerCharacter === undefined)
    {
      if (gameClassManager.currentGame !== memoryGame)
      {
        gameClassManager.currentGame.defineAndInitializePlayerCharacter();
      }
    }
    if (gameClassManager.currentGame.pregameSpecialCode !== undefined)
    {
      gameClassManager.currentGame.pregameSpecialCode();
    }
    gameInterval.reset(this.FRAME_RATE);
    drawAnswersManager.initialize();
  };

  this.FRAME_RATE = 30;
  this.gameFrameRate = undefined;//number

  this.imageAnswerWidth = 100;
  this.imageAnswerHeight = 100;
  this.audioImageAnswerWidth = 100;
  this.audioImageAnswerHeight = 100;

  this.textAnswerFontSize  = 30;
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';

  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/titleScreenMusic.mp3', 6.1);

  this.collisionsWithAnswersManager = undefined;

  this.backButtonColor = "yellow";

  this.update = function(){};
  this.draw = function(){};
}

function GameClassManager()
{
  this.currentGame = undefined;
  this.loadCurrentGame = function(gameToLoad)
  {

    // If the game has some code to execute after it's done, execute it
    // Check here to make sure it executes even when SINGLE_PLAYER_RANDOM changes the game
    if (this.currentGame !== undefined && this.currentGame.postGameSpecialCode) {
      this.currentGame.postGameSpecialCode();
    }

    //console.log('inside loadCurrentGame()');
    this.currentGame = gameToLoad;

    // this is undefined when the user clicks empty space in the menu screen
    if(typeof this.currentGame === "undefined") {
        //console.log("Ignoring a click on the background of the menu.");
        return;
    }

    if(typeof this.currentGame.pregameSpecialCode !== 'undefined') {
      this.currentGame.pregameSpecialCode();
      //this.initializeCurrentGame();
    } else {
      //console.log("no pregameSpecialCode function for this game type");
    }
    fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame.associatedObject = gameToLoad;
    //console.log('this.currentGame.name: ' + this.currentGame.name);
  }

  this.initializeCurrentGame = function()
  {
    this.currentGame.initialize();

    if (this.currentGame.superInitialize !== undefined)
    {
      this.currentGame.superInitialize();
    }

    if (this.currentGame.collisionsWithAnswersManager == undefined){
      this.currentGame.collisionsWithAnswersManager = new CollisionsWithAnswersManager();
    }

    this.currentGame.collisionsWithAnswersManager.initialize(this.currentGame);
  }

  this.currentFrameRate = 1000/30;
}

let gameClassManager = new GameClassManager();
function BackButton()
{
  this.x = gameCanvas.width - gameCanvas.width/6;
  this.y = gameCanvas.height - gameCanvas.height/12;

  this.width = gameCanvas.width/6;
  this.height = gameCanvas.height/12;

  this.draw = function()
  {
    if (fullGameStateMachine.currentState === fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame)
    {
      //rectangle
      gameCanvasContext.fillStyle = gameClassManager.currentGame.backButtonColor;
      gameCanvasContext.fillRect(this.x,this.y, this.width,this.height);

      //text
      //gameCanvasContext.fillStyle = gameClassManager.currentGame.backButtonTextColor;
      customFontFillText('Back', 27, 15, 555,660);
    }
  }

  this.insideClickCoordinates = function()
  {
    return (inputManager.mouseCoordinates.x > this.x && inputManager.mouseCoordinates.x < gameCanvas.width &&
        inputManager.mouseCoordinates.y > this.y && inputManager.mouseCoordinates.y < gameCanvas.height)
  }

  this.handleClick = function()
  {
    if (inputManager.mouseCoordinates.x > this.x && inputManager.mouseCoordinates.x < gameCanvas.width &&
        inputManager.mouseCoordinates.y > this.y && inputManager.mouseCoordinates.y < gameCanvas.height)
        {
          if (gameClassManager.currentGame.name === 'whack an answer game')
          {
            document.body.style.cursor = 'default';
          }
          else if (gameClassManager.currentGame.name === 'egg catch game')
          {
            clearInterval(gameClassManager.currentGame.intervalCluck1);
            clearInterval(gameClassManager.currentGame.intervalCluck2);
            clearInterval(gameClassManager.currentGame.intervalCluck3);
          }
          else if (gameClassManager.currentGame.name === 'spaceShooter')
          {
            clearInterval(gameClassManager.currentGame.shipSmokerInterval);
          }
          fullGameStateMachine.loadCurrentState(fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.transitionToTitleScreen);
          transitionToTitleScreen.changeFullGameStateAfterTwoSeconds();
          genAudio.playClick();
          
          if (window.promptersManager && promptersManager.currentPrompter) { // can be undefined here
            promptersManager.currentPrompter.currentWidth = 150;
            promptersManager.currentPrompter.currentHeight = 150;
          }
          
          //gameClassManager.currentGame = undefined;
          //playerShouldBePlayingPinata = false;
          arrayOfAnswers = [];
          promptsAndAnswersManager.setOrResetPromptsAndAnswers();
          if (gameClassManager.currentGame.postGameSpecialCode)
          {
            gameClassManager.currentGame.postGameSpecialCode();
          }
          genAudio.playTitleMusic();
        }
  }
}
function ReplayPromptButton()
{
  this.x = 0;
  this.y = gameCanvas.height - gameCanvas.height/12;

  this.width = gameCanvas.width/6;
  this.height = gameCanvas.height/12;

  this.draw = function()
  {
    if (fullGameStateMachine.currentState === fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame)
    {
      //rectangle
      gameCanvasContext.fillStyle = gameClassManager.currentGame.backButtonColor;
      gameCanvasContext.fillRect(this.x,this.y, this.width,this.height);

      //text
      //gameCanvasContext.fillStyle = gameClassManager.currentGame.backButtonTextColor;
      customFontFillText('Replay', 23, 15, 0,642);
      customFontFillText('Prompt', 23, 15, 0,670);
    }
  }

  this.insideClickCoordinates = function()
  {
    return (inputManager.mouseCoordinates.x > this.x && inputManager.mouseCoordinates.x < gameCanvas.width &&
        inputManager.mouseCoordinates.y > this.y && inputManager.mouseCoordinates.y < gameCanvas.height)
  }

  this.handleClick = function()
  {
    if (inputManager.mouseCoordinates.x > this.x && inputManager.mouseCoordinates.x < this.width &&
        inputManager.mouseCoordinates.y > this.y && inputManager.mouseCoordinates.y < gameCanvas.height)
        {
          if (gameClassManager.currentGame.name === 'hello world game')
          {
            gameClassManager.currentGame.conversationAudioManager.promptAudio.play();
            gameClassManager.currentGame.NPCSpeechBubble.isBeingHeard = true;
          }
          else if (gameClassManager.currentGame.name === 'hello world 2 game')
          {
            gameClassManager.currentGame.imagePrompter.currentWidth = 150;
            gameClassManager.currentGame.imagePrompter.currentHeight = 150;
            gameClassManager.currentGame.imagePrompter.promptThePlayer();
          }
          else
          {
            if (window.promptersManager && promptersManager.currentPrompter) { // can be undefined here
                promptersManager.currentPrompter.currentWidth = 150;
                promptersManager.currentPrompter.currentHeight = 150;
                promptersManager.promptThePlayer();
            }
          }
        }
  }
}
var gameCanvas, gameCanvasContext, statsCanvas, statsCanvasContext, backButton;


window.onload = function()
{


  gameCanvas = document.getElementById("gameCanvas");
  gameCanvas.style.display = "inline";
  gameCanvasContext = gameCanvas.getContext('2d');

  gameCanvasContext.mozImageSmoothingEnabled = false;
  gameCanvasContext.imageSmoothingEnabled = false;
  gameCanvasContext.msImageSmoothingEnabled = false;
  gameCanvasContext.imageSmoothingEnabled = false;

  statsCanvas = document.getElementById("statsCanvas");
  statsCanvas.style.display = 'inline';
  statsCanvasContext = statsCanvas.getContext('2d');
  loadImages();
  loadingAndSplashScreen.drawPleaseWaitForLoadingMessage();

  document.addEventListener('keydown',inputManager.keyDown);
  document.addEventListener('keyup',inputManager.keyUp);
  document.addEventListener('click', inputManager.gameCanvasClick, false);
  gameCanvas.addEventListener('mousemove', inputManager.calculateMousePosition);
  gameInterval = new frameInterval(advanceGameFrame, gameClassManager.currentFrameRate);

  backButton = new BackButton();
  replayPromptButton = new ReplayPromptButton();
  modeSelectScreen = new ModeSelectScreen();
  modeSelectScreen.initialize();
  fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.modeSelectScreen.associatedObject = modeSelectScreen;
  languageSelectionScreen = new LanguageSelectionScreen();
  fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.languageSelectionScreen.associatedObject = languageSelectionScreen;

}

function advanceGameFrame()
{
  updateEverythingInTheGame();
  drawEverythingInTheGame();
}


//update section
function updateEverythingInTheGame()
{
  if (gameClassManager.currentGame !== undefined &&
      fullGameStateMachine.currentState === fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame)
  {
    gameClassManager.currentGame.update();
  }

  musicManager.update();


}
//end of update section

//draw section
function drawEverythingInTheGame()
{

  if (helperPrompt.isOn)
  {
    helperPrompt.draw();
    return;
  }

  if (fullGameStateMachine.currentState.associatedObject) // can sometimes be undefined
    fullGameStateMachine.currentState.associatedObject.draw();

  backButton.draw();
  replayPromptButton.draw();
  drawStatsBackground();
  drawStats();

  if (debugOn)
  {
    drawDebugStuff();
  }
}
//end of draw section
function FullGameStateMachineClass()
{
  this.FULL_GAME_ENUMERABLE_STATES =
  {
    loading: {status:'loading full game', associatedObject:loadingAndSplashScreen},
    clickToLaunch: {status:'waiting for user click to launch full game', associatedObject: loadingAndSplashScreen},
    transitionToTitleScreen: {status:'transitioning to title screen', associatedObject: transitionToTitleScreen},
    titleScreen: {status:'title screen', associatedObject: titleScreen},
    modeSelectScreen: {status:'mode select screen', associatedObject: modeSelectScreen},
    languageSelectionScreen: {status: 'language select screen', associatedObject: languageSelectionScreen},
    mandarinCustomizationScreen: {status: 'mandarin customization screen', associatedObject: mandarinCustomizationScreen},
    englishCustomizationScreen: {status: 'english customization screen', associatedObject: englishCustomizationScreen},
    transitionToMiniGame: {status: 'transitioning to mini game', associatedObject: miniGameTransitioner},
    playingMiniGame: {status: 'playing mini game', associatedObject: gameClassManager.currentGame},
    pausedMiniGame: {status: 'mini game paused', associatedObject: gameClassManager.currentGame}
  };

  this.currentState = this.FULL_GAME_ENUMERABLE_STATES.loading;

  this.loadCurrentState = function(stateToLoad)
  {
    this.currentState = stateToLoad;
    
  }

}

let fullGameStateMachine = new FullGameStateMachineClass();
snakeGameClass.prototype = new GameClass();
function snakeGameClass()
{
  this.name = 'Snake Game';
  this.titleScreenData = [{
	name: "Snake",
	fontSize: 27,
	spacing: 15,
	x: 30, y: 185
  }];

  this.FRAME_RATE = 1000/10;

  this.playerCharacter = undefined;
  this.defineAndInitializePlayerCharacter = function()
  {
    this.playerCharacter = new SnakeClass();
    this.playerCharacter.initialize();
    this.collidingObject = this.playerCharacter;
  }
  this.background = undefined;
  this.backButtonColor = 'yellow';
  this.backButtonTextColor = 'blueViolet';

  this.isTransitioningIn = false;

  this.textAnswerFontSize = 30;
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';

  this.imageAnswerWidth = undefined;
  this.imageAnswerHeight = undefined;
  this.imageAnswerHolderWidth = undefined;
  this.imageAnswerHolderHeight = undefined;

  this.audioImageAnswerWidth = undefined;
  this.audioImageAnswerHeight = undefined;
  this.audioImageAnswerHolderWidth = undefined;
  this.audioImageAnswerHolderHeight = undefined;

  this.correctTextAnswerHolderWidth = undefined;
  this.incorrectTextAnswerHolderWidth = undefined;

  this.currentCorrectAnswerHolderWidth = undefined;
  this.currentCorrectAnswerHolderHeight = undefined;
  this.currentIncorrectAnswerHolderWidth = undefined;
  this.currentIncorrectAnswerHolderHeight = undefined;

  this.answerHolderImage = 'images\\sprites\\Snake\\apple.png';

  var populateBugsInterval;
  var assignCoreInterval;

  this.assignAnswerHolder = function()
  {
    let appleAnswerHolder = new AppleAnswerHolder(this.answerHolderImage);
    return appleAnswerHolder;
  }

  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/200417i.mp3', 6.7);

  this.pregameSpecialCode = function()
  {
    gameAudio = {};
    gameAudio.slither = new sfxOneShot("audio/snake_slither_01.mp3");
	  gameAudio.playSlither = function() {
	    gameAudio.slither.play();
  	}
    gameAudio.appleEating = new sfxOneShot('audio/eatingApple1.mp3');
  };

  this.postGameSpecialCode = function() {
  	clearInterval(populateBugsInterval);
  	clearInterval(assignCoreInterval);
  };

  this.superInitialize = this.initialize;
  this.initialize = function()
  {
    this.imageAnswerWidth = gameCanvas.width/8;
    this.imageAnswerHeight = gameCanvas.height/9;
    this.imageAnswerHolderWidth = gameCanvas.width/4;
    this.imageAnswerHolderHeight = gameCanvas.height/5;

    this.audioImageAnswerWidth = gameCanvas.width/6;
    this.audioImageAnswerHeight = gameCanvas.height/7;
    this.audioImageAnswerHolderWidth = gameCanvas.width/5;
    this.audioImageAnswerHolderHeight = gameCanvas.height/6;

    this.correctTextAnswerHolderWidth = undefined;
    this.incorrectTextAnswerHolderWidth = undefined;

	  this.playerCharacter = new SnakeClass();
    this.background = new SnakeBackground();
    this.playerCharacter.initialize();
    this.collidingObject = this.playerCharacter;
    initializePromptAndAnswerObjects();
    promptsAndAnswersManager.setOrResetPromptsAndAnswers();
    promptersManager.loadAppropriatePrompterBasedOnCurrentPromptsDataType();
	  this.superInitialize();
  	musicManager.addTrack(new MusicTrack('audio/backgroundTracks/200417.mp3', 87.27));


    populateBugsInterval = setInterval(populateArrayOfBugs, 5000);
    assignCoreInterval = setInterval(assignAnAppleCoreToABug, 3000);
  };

  //update section
  this.update = function()
  {
    if (!promptersManager.shouldBeDrawingAPrompt &&
        fullGameStateMachine.currentState !== fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.pausedMiniGame)
    {
      this.playerCharacter.update();
      this.collisionsWithAnswersManager.handleCollisionsWithAnswers(this.collidingObject);
    }

    for (let i = 0; i < this.arrayOfBugs.length; i++)
    {
      this.arrayOfBugs[i].move();
    }

    for (let i = 0; i < this.arrayOfAppleCores.length; i++)
    {
      this.arrayOfAppleCores[i].update();
      if (this.arrayOfAppleCores[i].totalDecay > 0.95)
      {
        for (let j = 0; j < this.arrayOfBugs.length; j++)
          {
            if (this.arrayOfBugs[j].targetAppleCore === this.arrayOfAppleCores[i])
            {
              this.arrayOfBugs[j].hasATargetAppleCore = false;
              this.arrayOfBugs[j].hasCollidedWithTarget = false;
            }
          }
        this.arrayOfAppleCores.splice(i,1);
      }
    }
  }

  //draw section
  this.draw = function()
  {
    this.background.draw();    // this.background.draw();
    for (let i = 0; i < this.arrayOfAppleCores.length; i++)
    {
      this.arrayOfAppleCores[i].draw();
    }
    for (let i = 0; i < this.arrayOfBugs.length; i++)
    {
      this.arrayOfBugs[i].draw();
    }
    this.playerCharacter.draw();
    drawAnswersManager.draw();
    promptersManager.drawPromptsWhenAppropriate();
  }

  this.drawTransitionText = function()
  {
    customFontFillText(['Eat the answers', symbolExclamationPointImage], 60,30, 100,50);
    customFontFillText([upArrowImage, ' ', symbolEqualsImage, ' Slither up'], 30,15, 210,200);
    customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' Slither right'], 30,15, 350,350);
    customFontFillText([downArrowImage, ' ', symbolEqualsImage, ' Slither down'], 30,15, 200,500);
    customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' Slither left'], 30,15, 50,350);
  }

  this.LETTER_COLOR = 'cyan';

  this.handleLeftArrowDown = function()
  {
    if (this.playerCharacter.headOrientation != 1){
        this.playerCharacter.headOrientation = 1;
    }
    if (!this.playerCharacter.middleX)
    {
      this.playerCharacter.middleX = this.playerCharacter.x;
      this.playerCharacter.middleY = this.playerCharacter.y;
    }
    this.playerCharacter.speedX = -20;
    this.playerCharacter.speedY = 0;
    gameAudio.playSlither();
  }

  this.handleUpArrowDown = function()
  {
    if (!this.playerCharacter.middleX)
    {
      this.playerCharacter.middleX = this.playerCharacter.x;
      this.playerCharacter.middleY = this.playerCharacter.y;
    }
    this.playerCharacter.speedX = 0;
    this.playerCharacter.speedY = -20;
    if (this.playerCharacter.headOrientation != 0){
        this.playerCharacter.headOrientation = 0;
    }
    gameAudio.playSlither();
  }

  this.handleRightArrowDown = function()
  {
    if (!this.playerCharacter.middleX)
    {
      this.playerCharacter.middleX = this.playerCharacter.x;
      this.playerCharacter.middleY = this.playerCharacter.y;
    }
    if (this.playerCharacter.headOrientation != 3){
        this.playerCharacter.headOrientation = 3;
    }
    this.playerCharacter.speedX = 20;
    this.playerCharacter.speedY = 0;
    gameAudio.playSlither();
  }

  this.handleDownArrowDown = function()
  {
    if (!this.playerCharacter.middleX)
    {
      this.playerCharacter.middleX = this.playerCharacter.x;
      this.playerCharacter.middleY = this.playerCharacter.y;
    }
    if (this.playerCharacter.headOrientation != 2){
        this.playerCharacter.headOrientation = 2;
    }
    this.playerCharacter.speedX = 0;
    this.playerCharacter.speedY = 20;
    gameAudio.playSlither();
  }


  this.collisionVisualEffect = function(answerHolderX,answerHolderY, answerHolderWidth,answerHolderHeight)
  {
    let appleCore = new AppleCore(answerHolderX,answerHolderY, answerHolderWidth,answerHolderHeight);
    this.arrayOfAppleCores.push(appleCore);
  }

  this.arrayOfAppleCores = [];

  this.collisionAudioEffect = function()
  {
    gameAudio.appleEating.play();
  }

  this.arrayOfBugs = [];

}

function AppleCore(x,y, width,height)
{
  this.image = 'images\\sprites\\Snake\\appleCore.png';
  this.x = x;
  this.y = y;
  this.width = width;
  this.height = height;

  this.decayingRate = 0;
  this.totalDecay = 0;

  this.draw = function()
  {
    gameCanvasContext.globalAlpha -= this.totalDecay;
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
    gameCanvasContext.globalAlpha = 1;
  }

  this.update = function()
  {
    this.totalDecay += this.decayingRate;
  }
}

const snakeGame = new snakeGameClass();

function Bug()
{
  this.x = getRandomArbitrary(0,gameCanvas.width);
  this.y = getRandomArbitrary(0,gameCanvas.height);
  this.width = 4;
  this.height = 4;

  this.xVelocity = 4;
  this.yVelocity = 4;

  this.color = 'brown';

  this.isEating = false;
  this.hasATargetAppleCore = false;
  this.targetAppleCore = undefined;

  this.update = function()
  {
    if (!this.hasATargetAppleCore)
    {
      if (gameClassManager.currentGame.arrayOfAppleCores.length > 0)
      {
        this.targetAppleCore = getRandomIntInclusive(0,gameClassManager.currentGame.arrayOfAppleCores.length - 1);
      }
    }
  }

  this.draw = function()
  {
    gameCanvasContext.fillStyle = this.color;
    gameCanvasContext.fillRect(this.x,this.y, this.width,this.height)
  }

  this.move = function()
  {
    if (!this.hasATargetAppleCore)
    {
      this.moveRandomly();
    }
    else
    {
      this.moveTowardsTargetAppleCore();
    }
  }

  this.moveRandomly = function()
  {
    let twentyPercentChanceBasis = Math.random();
    if (twentyPercentChanceBasis > 0 && twentyPercentChanceBasis < 0.2)
    {
      this.x += this.xVelocity;
    }
    else if (twentyPercentChanceBasis >= 0.2 && twentyPercentChanceBasis < 0.4)
    {
      this.y += this.yVelocity;
    }
    else if (twentyPercentChanceBasis > 0.4 && twentyPercentChanceBasis <= 0.6)
    {
      this.x -= this.xVelocity;
    }
    else if (twentyPercentChanceBasis > 0.6 && twentyPercentChanceBasis <= 0.8)
    {
      this.y -= this.yVelocity;
    }
    else if (twentyPercentChanceBasis > 0.8 && twentyPercentChanceBasis < 1)
    {
      return;
    }
  }

  this.hasCollidedWithTarget = false;
  this.moveTowardsTargetAppleCore = function()
  {
    if (this.y > this.targetAppleCore.y + this.targetAppleCore.height*0.8)
    {
      this.y -= this.yVelocity;
    }
    else if (this.y < this.targetAppleCore.y + this.targetAppleCore.height*0.8)
    {
      this.y += this.yVelocity;
    }

    if (this.x < this.targetAppleCore.x + this.targetAppleCore.width/3)
    {
      this.x += this.xVelocity;
    }
    else if (this.x > this.targetAppleCore.x + this.targetAppleCore.width/3)
    {
      this.x -= this.xVelocity;
    }

    if (this.x > this.targetAppleCore.x && this.x < this.targetAppleCore.x + this.targetAppleCore.width &&
        this.y > this.targetAppleCore.y && this.y < this.targetAppleCore.y + this.targetAppleCore.height)
        {
          if (!this.hasCollidedWithTarget)
          {
            this.targetAppleCore.decayingRate += 0.01;
            this.hasCollidedWithTarget = true;
          }
        }
  }
}

function populateArrayOfBugs()
{
  let bug = new Bug();
  gameClassManager.currentGame.arrayOfBugs.push(bug);
}

function assignAnAppleCoreToABug()
{
  let arrayOfBugs = gameClassManager.currentGame.arrayOfBugs;
  let arrayOfAppleCores = gameClassManager.currentGame.arrayOfAppleCores;
  for (let i = 0; i < arrayOfBugs.length; i++)
  {
    if (arrayOfBugs.length > 0)
    {
      if (!arrayOfBugs[i].hasATargetAppleCore)
      {
        if (arrayOfAppleCores.length < 1)
        {
          return;
        }
        else
        {
          let appleCoreIndex = getRandomIntInclusive(0,arrayOfAppleCores.length - 1);
          arrayOfBugs[i].targetAppleCore = arrayOfAppleCores[appleCoreIndex];
          arrayOfBugs[i].hasATargetAppleCore = true;
        }//end of else case that actually assigns a target apple core
      }//end of if statement that checks for existence of apple cores
    }//end of if statement that checks for existence of bugs
  }//end of for loop through array of bugs
}//end of assign an apple core to a bug function
function SnakeClass()
{
    let snake = this;
    this.name = 'snake player';
    this.x = undefined;
    this.y = undefined;
    this.speedX = 0;
    this.speedY = 0;
    this.width = 10;
    this.height = 30;

    this.middleX = undefined;
    this.middleY = undefined;

    this.tailX = undefined;
    this.tailY = undefined;

    this.snakeHeadImage = 'images\\sprites\\Snake\\topSnake.png';
    this.snakeMiddleImage = 'images\\sprites\\Snake\\middleSnake.png';
    this.snakeTailImage = 'images\\sprites\\Snake\\bottomSnake.png';

    this.headOrientation = 0;
    this.previousHeadOrientation = 0;
    this.middleOrientation = 0;
    this.previousMiddleOrientation = 0;
    this.tailOrientation = 0;

    const MAX_TAIL_LENGTH = 5;

    this.color = 'lime';

    this.initialize = function()
    {
      this.x = getRandomIntInclusive(0,gameCanvas.width);
      this.y = getRandomIntInclusive(0,gameCanvas.height);
    }

    this.draw = function()
    {

      if (this.tailX && this.tailY)
      {
        gameCanvasContext.save();
        gameCanvasContext.translate(
            this.tailX, this.tailY
        )
        switch(this.tailOrientation){
            case 0:
                break;
            case 1:
                gameCanvasContext.rotate(-Math.PI / 2);
                break;
            case 2:
                gameCanvasContext.rotate(Math.PI);
                break;
            case 3:
                gameCanvasContext.rotate(Math.PI / 2);
                break;
        }

        drawFromSheet(this.snakeTailImage,
        - (this.width*2) / 2,
        - (this.height*2) / 2,
        this.width*2.3, this.height*2);
        // gameCanvasContext.drawImage(
        //     this.snakeTailImage,
        //     - (this.width*2) / 2,
        //     - (this.height*2) / 2,
        //     this.width*2.3, this.height*2
        // )
        gameCanvasContext.restore();
      }

        if (this.middleX && this.middleY)
        {
          gameCanvasContext.save();
          gameCanvasContext.translate(
              this.middleX, this.middleY
          )
          switch(this.middleOrientation){
              case 0:
                  break;
              case 1:
                  gameCanvasContext.rotate(-Math.PI / 2);
                  break;
              case 2:
                  gameCanvasContext.rotate(Math.PI);
                  break;
              case 3:
                  gameCanvasContext.rotate(Math.PI / 2);
                  break;
          }

          drawFromSheet(this.snakeMiddleImage,
          - (this.width*2) / 2,
          - (this.height*2) / 2,
          this.width*2, this.height*2);
          // gameCanvasContext.drawImage(
          //     this.snakeMiddleImage,
          //     - (this.width*2) / 2,
          //     - (this.height*2) / 2,
          //     this.width*2, this.height*2
          // )
          gameCanvasContext.restore();
        }

        gameCanvasContext.save();
        gameCanvasContext.translate(
            this.x, this.y
        )
        switch(this.headOrientation){
            case 0:
                break;
            case 1:
                gameCanvasContext.rotate(-Math.PI / 2);
                break;
            case 2:
                gameCanvasContext.rotate(Math.PI);
                break;
            case 3:
                gameCanvasContext.rotate(Math.PI / 2);
                break;
        }

        drawFromSheet(this.snakeHeadImage,
        - (this.width*2) / 2,
        - (this.height*2) / 2,
        this.width*2, this.height*2);
        // gameCanvasContext.drawImage(
        //     this.snakeHeadImage,
        //     - (this.width*2) / 2,
        //     - (this.height*2) / 2,
        //     this.width*2, this.height*2
        // )
        gameCanvasContext.restore();
    }


    this.move = function()
    {
      if (this.middleX)
      {
        this.tailX = this.middleX;
        this.tailY = this.middleY;
      }
      if (this.middleX)
      {
        this.middleX = this.x;
        this.middleY = this.y;
      }
      this.x += this.speedX;
      this.y += this.speedY;
    }

    this.orientatePieces = function()
    {
      this.tailOrientation = this.middleOrientation;
      this.middleOrientation = this.headOrientation;
    }

    this.wrapIfOffScreen = function()
    {
      if (this.x > gameCanvas.width)
      {
        this.x = 0;
      } else if (this.x < 0)
      {
        this.x = gameCanvas.width;
      } else if (this.y > gameCanvas.height)
      {
        this.y = 0;
      } else if (this.y < 0)
      {
        this.y = gameCanvas.height;
      }
    }

    this.update = function()
    {
      this.orientatePieces();
      this.move();
      //this.tail.update();
      this.wrapIfOffScreen();
    }
}

function AppleAnswerHolder(image)
{
  this.image = image;
}
function SnakeBackground()
{
  this.draw = function()
  {
    drawFromSheet('images\\Backgrounds\\Grass.png', 0,0, gameCanvas.width,gameCanvas.height);
    //gameCanvasContext.drawImage('images\\Backgrounds\\Grass.png', 0,0, gameCanvas.width,gameCanvas.height);
  }
}
const birdBackButtonRectangleColor = 'yellow';
const birdBackButtonTextColor = 'red';
const birdLetterColor = 'BlueViolet';

birdGameClass.prototype = new GameClass();
function birdGameClass() {
  this.name = 'birdGame';
  this.playerCharacter = undefined;
  this.defineAndInitializePlayerCharacter = function()
  {
    this.playerCharacter = new BirdClass();
    this.playerCharacter.initialize();
    this.collidingObject = this.playerCharacter;
  }
  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/birdSong.mp3',52.8);
  this.collidingObject = undefined;
  this.titleScreenData = [{
	name: "Bird",
	fontSize: 27,
	spacing: 15,
	x: 138, y: 185
  }];
  const GRAVITY = 4;
  const LEFT_ARROW_DOWN_SPEED = -8;
  const RIGHT_ARROW_DOWN_SPEED = 8;
  const LEFT_ARROW_UP_SPEED = -4;
  const RIGHT_ARROW_UP_SPEED = 4;

  this.drawTransitionText = function()
  {
    customFontFillText(['Fly to the answers!', symbolExclamationPointImage], 60,30, 75,50);
    customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' Fly right'], 30,15, 350,350);
    customFontFillText(['Space bar', ' ', symbolEqualsImage, ' Fly up'], 30,15, 175,500);
    customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' Fly left'], 30,15, 50,350);
  }


  this.amountCorrect = 0;

  this.FRAME_RATE = 1000/30;
  this.letterSpawnInterval = 2000;

  this.imageAnswerWidth = undefined;
  this.imageAnswerHeight = undefined;
  this.imageAnswerHolderWidth = undefined;
  this.imageAnswerHolderHeight = undefined;

  this.audioImageAnswerWidth = undefined;
  this.audioImageAnswerHeight = undefined;
  this.audioImageAnswerHolderWidth = undefined;
  this.audioImageAnswerHolderHeight = undefined;

  this.correctTextAnswerHolderWidth = undefined;
  this.incorrectTextAnswerHolderWidth = undefined;

  this.LETTER_COLOR = 'lightCoral';
  this.textAnswerFontSize = '30';
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';

  this.arrayOfAnswerHolders = [];
  this.skyRingAnswerHolder1 = new SkyRingAnswerHolder('images\\sprites\\Bird\\skyRing.png');
  this.skyRingAnswerHolder2 = new SkyRingAnswerHolder('images\\sprites\\Bird\\skyRing2.png');
  this.arrayOfAnswerHolders.push(this.skyRingAnswerHolder1);
  this.arrayOfAnswerHolders.push(this.skyRingAnswerHolder2);
  this.assignAnswerHolder = function()
  {
      let randomNumber = getRandomIntInclusive(0, this.arrayOfAnswerHolders.length - 1);
      return this.arrayOfAnswerHolders[randomNumber];
  }

  this.answersXSpeed = 4;

  this.pregameSpecialCode = function()
  {
    gameAudio = {};
    gameAudio.flap1 = new sfxOneShot("audio/flap01.mp3");
    gameAudio.flapIndex = 0;
    gameAudio.playFlap = function() {

        gameAudio.flap1.play();

    }

  };

  this.superInitialize = function()
  {
    // initializePromptAndAnswerObjects();
    // promptsAndAnswersManager.setOrResetPromptsAndAnswers();
    this.imageAnswerWidth = gameCanvas.width/7;
		this.imageAnswerHeight = gameCanvas.height/9;
		this.audioImageAnswerWidth = gameCanvas.width/6;
    this.audioImageAnswerHeight = gameCanvas.height/7;

    this.imageAnswerHolderWidth = gameCanvas.width/4;
		this.imageAnswerHolderHeight = gameCanvas.height/5;
		this.audioImageAnswerHolderWidth = gameCanvas.width/5;
    this.audioImageAnswerHolderHeight = gameCanvas.height/6;

    drawAnswersManager.initialize();

    this.plane = new Plane();
    cloudManager.initialize();
    promptersManager.loadAppropriatePrompterBasedOnCurrentPromptsDataType();
    this.assignLeftOrRightDirectionToAnswers();
	  //this.superInitialize();
  }

  this.applyGRAVITYToBird = function()
  {
	   this.playerCharacter.y += GRAVITY;
  }

  this.handleLeftArrowDown = function()
  {
    this.playerCharacter.xSpeed = LEFT_ARROW_DOWN_SPEED;
    this.playerCharacter.currentImage = this.playerCharacter.openFacingLeftImage;
  };

  this.handleRightArrowDown = function()
  {
    this.playerCharacter.xSpeed = RIGHT_ARROW_DOWN_SPEED;
    this.playerCharacter.currentImage = this.playerCharacter.openFacingRightImage;
  }

  this.handleLeftArrowUp = function()
  {
    this.playerCharacter.xSpeed = LEFT_ARROW_UP_SPEED;
  }

  this.handleRightArrowUp = function()
  {
    this.playerCharacter.xSpeed = RIGHT_ARROW_UP_SPEED;
  }

  this.update = function()
  {
    if (!promptersManager.shouldBeDrawingAPrompt &&
        fullGameStateMachine.currentState !== fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.pausedMiniGame)
    {
      this.playerCharacter.move();
      this.playerCharacter.handleOffScreen();
      this.moveAnswers();
      this.plane.move();
      this.plane.handleOffScreen();
      this.handleAnswersOffScreen();
      this.collisionsWithAnswersManager.handleCollisionsWithAnswers(this.collidingObject);
      cloudManager.update();
    }
  };

  this.assignLeftOrRightDirectionToAnswers = function()
  {
    let randomNumber = Math.random();
    if (randomNumber < 0.5)
    {
      promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xDirection = 1;
      promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xDirection = -1;
    }
    else
    {
      promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xDirection = -1;
      promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xDirection = 1;
    }
  }

  this.draw = function()
  {
    this.drawBackground();
    cloudManager.drawClouds();
    this.plane.draw();
    this.playerCharacter.draw();
    drawAnswersManager.draw();
    promptersManager.drawPromptsWhenAppropriate();
  };

  this.drawBackground = function()
  {
    let startingXOnCanvas = 0;
    let startingYOnCanvas = 0;
    let endingXOnCanvas = gameCanvas.width;
    let endingYOnCanvas = gameCanvas.height;
    drawFromSheet("images\\Backgrounds\\Sky.png", startingXOnCanvas,startingYOnCanvas,
                                               endingXOnCanvas, endingYOnCanvas);
  	// gameCanvasContext.drawImage(skyBackground, startingXOnCanvas,startingYOnCanvas,
    //                                            endingXOnCanvas, endingYOnCanvas);
  };

  this.handleSpaceBarDown = function()
  {
    if (!promptersManager.shouldBeDrawingAPrompt)
    {
      this.playerCharacter.flapUp();
      gameAudio.playFlap();
    }
  };

  this.moveAnswers = function()
  {
    promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate += this.answersXSpeed*promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xDirection;
    promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate += this.answersXSpeed*promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xDirection;
  }

  this.handleAnswersOffScreen = function()
  {
    if (promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate > gameCanvas.width)
    {
      promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate = -10;
    }
    else if (promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate < -10)
    {
      promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate = gameCanvas.width;
    }

    if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate > gameCanvas.width)
    {
      promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate = -10;
    }
    else if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate < -10)
    {
      promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate = gameCanvas.width;
    }
  }
}

const birdGame = new birdGameClass();

function SkyRingAnswerHolder(image)
{
  this.image = image;
}

function BirdClass()
{
  this.name = 'bird player';
  this.openFacingLeftImage = 'images\\sprites\\Bird\\birdOpenFacingLeft.png';
  this.openFacingRightImage = 'images\\sprites\\Bird\\birdOpenFacingRight.png';
  this.currentImage = this.openFacingRightImage;
  this.x = undefined;
  this.y = undefined;
  const BIRD_STARTING_X = 100;
  const BIRD_STARTING_Y = 100;
  this.width = 75;
  this.height = 75;
  this.xSpeed = undefined;

  this.draw = function()
  {
	  // gameCanvasContext.fillStyle = 'lightCoral';
    // gameCanvasContext.fillRect(this.x, this.y, this.width,this.height);
    drawFromSheet(this.currentImage, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.currentImage, this.x,this.y, this.width,this.height);
  };

  this.initialize = function()
  {
    this.x = BIRD_STARTING_X;
    this.y = BIRD_STARTING_Y;
    this.xSpeed = 0;
  }

  this.flapUp = function()
  {
	   this.y -= 50;
  }

  this.move = function()
  {
    birdGame.applyGRAVITYToBird();
    this.x += this.xSpeed;
  };

  this.handleOffScreen = function()
  {
	   if (this.y > gameCanvas.height - 10)
	{
      this.y = 5;
	}
  else if (this.y < 0)
  {
      this.y = 0;
	}
  else if (this.x > gameCanvas.width - 10)
	{
      this.x = -5;
	}
  else if (this.x < -5)
	{
      this.x = gameCanvas.width - 5;
	}
  };
}

function Cloud(randomCloudImage)
{
  this.image = randomCloudImage;

  this.x = getRandomIntInclusive(0, gameCanvas.width);
  this.y = getRandomIntInclusive(0, gameCanvas.height);

  this.height = getRandomIntInclusive(gameCanvas.height/9, gameCanvas.height/4);
  this.width = getRandomIntInclusive(gameCanvas.width/9, gameCanvas.height/2);

  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
  }

  this.xSpeed = (getRandomIntInclusive(10,14))/10;
  this.move = function()
  {
    this.x -= this.xSpeed;
  }

  this.handleOffScreen = function()
  {
    if (this.x + this.width < 0)
    {
      this.x = gameCanvas.width + this.width;
      this.y = getRandomIntInclusive(0, gameCanvas.height);

      let randomCloudImageIndex = getRandomIntInclusive(0,cloudManager.arrayOfCloudImages.length - 1);
      let cloudImage = cloudManager.arrayOfCloudImages[randomCloudImageIndex];
      this.image = cloudImage;
      this.xSpeed = (getRandomIntInclusive(10,14))/10;

      this.height = getRandomIntInclusive(gameCanvas.height/9, gameCanvas.height/4);
      this.width = getRandomIntInclusive(gameCanvas.width/9, gameCanvas.height/2);
    }
  }
}

function CloudManager()
{
  this.numberOfClouds = 7;

  this.arrayOfCloudImages = [];

  this.initializeArrayOfCloudImages = function()
  {
    this.arrayOfCloudImages.push('images\\Backgrounds\\cloud1.png');
    this.arrayOfCloudImages.push('images\\Backgrounds\\cloud2.png');
    this.arrayOfCloudImages.push('images\\Backgrounds\\cloud3.png');
    this.arrayOfCloudImages.push('images\\Backgrounds\\cloud4.png');
  }

  this.arrayOfClouds = [];

  this.initializeClouds = function()
  {
    for (let cloudToInitializeIndex = 0; cloudToInitializeIndex < this.numberOfClouds; cloudToInitializeIndex++)
    {
      let randomCloudImageIndex = getRandomIntInclusive(0,this.arrayOfCloudImages.length - 1);
      let cloudImage = this.arrayOfCloudImages[randomCloudImageIndex];
      let cloud = new Cloud(cloudImage);
      this.arrayOfClouds.push(cloud);
    }
  }

  this.initialize = function()
  {
      this.initializeArrayOfCloudImages();
      this.initializeClouds();
  }

  this.drawClouds = function()
  {
    for (let arrayOfCloudsIndex = 0; arrayOfCloudsIndex < this.arrayOfClouds.length; arrayOfCloudsIndex++)
    {
      this.arrayOfClouds[arrayOfCloudsIndex].draw();
    }
  }

  this.moveClouds = function()
  {
    for (let arrayOfCloudsIndex = 0; arrayOfCloudsIndex < this.arrayOfClouds.length; arrayOfCloudsIndex++)
    {
      this.arrayOfClouds[arrayOfCloudsIndex].move();
    }
  }

  this.handleCloudsOffScreen = function()
  {
    for (let arrayOfCloudsIndex = 0; arrayOfCloudsIndex < this.arrayOfClouds.length; arrayOfCloudsIndex++)
    {
      this.arrayOfClouds[arrayOfCloudsIndex].handleOffScreen();
    }
  }

  this.update = function()
  {
    this.moveClouds();
    this.handleCloudsOffScreen();
  }
}

let cloudManager = new CloudManager();

function Plane()
{
  this.image = 'images\\sprites\\Bird\\plane.png';
  this.width = gameCanvas.width/2;
  this.height = gameCanvas.height/10;
  this.x = getRandomArbitrary(0,gameCanvas.width - this.width);
  this.y = getRandomArbitrary(0,gameCanvas.height - this.height);

  this.xVelocity = -3;
  this.yVelocity = 1;

  this.bannerMessageCharacters = ['G','o','o','d',' ','J','o','b','!'];

  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);

    let arrayOfCharacterTypes = [];
    for (let bannerMessageIndex = 0; bannerMessageIndex < gameClassManager.currentGame.amountCorrect; bannerMessageIndex++)
             {
               arrayOfCharacterTypes.push(this.bannerMessageCharacters[bannerMessageIndex])
             }
             customFontFillText(arrayOfCharacterTypes, 30, 15, this.x + this.width/2 + 17,this.y + 10);


    // customFontFillText(this.bannerMessageCharacters, 30,15, this.x + this.width/2 + 17,this.y + 10);
  }

  this.targetY = getRandomArbitrary(0,gameCanvas.height - this.height);

  this.move = function()
  {
    this.x += this.xVelocity;

    if (this.y < this.targetY)
    {
      this.y += this.yVelocity;
      if (this.y >= this.targetY)
      {
        this.targetY = getRandomArbitrary(0,gameCanvas.height - this.height);
      }
    }
    else if (this.y > this.targetY)
    {
      this.y -= this.yVelocity;
      if (this.y <= this.targetY)
      {
        this.targetY = getRandomArbitrary(0,gameCanvas.height - this.height);
      }
    }
  }

  this.handleOffScreen = function()
  {
    if (this.x + this.width < 0)
    {
      this.x = gameCanvas.width;
    }
  }
}
var laneBackButtonRectangleColor = 'Fuchsia';
var laneBackButtonTextColor = 'yellow';

laneGameClass.prototype = new GameClass();
function laneGameClass() {
	this.name = 'laneGame';
	this.FRAME_RATE = 1000/50;
	this.titleScreenData = [{
	  name: "Lane",
	  fontSize: 27,
	  spacing: 15,
	  x: 237, y: 185
	}];
	this.textAnswerFontSize = 30;
	this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';

	this.drawTransitionText = function()
  {
    customFontFillText(['Drive to the answers!', symbolExclamationPointImage], 55,30, 0,50);
    customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' Lane Change right'], 40,15, gameCanvas.width*0.225,250);
    customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' Lane Change left'], 40,15, gameCanvas.width*0.225,450);
  }

	this.imageAnswerWidth = undefined;
	this.imageAnswerHeight = undefined;
	this.imageAnswerHolderWidth = undefined;
	this.imageAnswerHolderHeight = undefined;

	this.audioImageAnswerWidth = undefined;
	this.audioImageAnswerHeight = undefined;
	this.audioImageAnswerHolderWidth = undefined;
	this.audioImageAnswerHolderHeight = undefined;

	this.correctTextAnswerHolderWidth = undefined;
	this.incorrectTextAnswerHolderWidth = undefined;

	this.amountCorrect = 0;

	this.answerHolderImage = 'images\\sprites\\Lane\\gasCan.png';
	this.assignAnswerHolder = function()
	{
		let gasCanAnswerHolder = new GasCanAnswerHolder(this.answerHolderImage);
		return gasCanAnswerHolder;
	}

	this.LETTER_COLOR = 'white';

	this.playerCharacter = undefined;
	this.defineAndInitializePlayerCharacter = function()
	{
		this.playerCharacter = new LaneCarClass();
		this.collidingObject = this.playerCharacter;
	}

	this.collisionsWithAnswersManager = new LaneCollisionsManager();

  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/200419i.mp3', 12.7);

  this.pregameSpecialCode = function()
  {
    gameAudio = {};
    gameAudio.car = new sfxLooping("audio/carEngine02.mp3");
    gameAudio.lane = new sfxOneShot("audio/carRev.mp3");
    gameAudio.playLane = function() {
    	gameAudio.lane.play();
    }

  };

  this.startGameSpecialCode = function()
  {
	  gameAudio.car.play();
  }

  this.postGameSpecialCode = function()
  {
  	gameAudio.car.stop();
  }


  	this.superInitialize = function()
	{

		this.imageAnswerWidth = gameCanvas.width/8;
		this.imageAnswerHeight = gameCanvas.height/9;
		this.imageAnswerHolderWidth = gameCanvas.width/4;
		this.imageAnswerHolderHeight = gameCanvas.height/5;

		this.audioImageAnswerWidth = gameCanvas.width/6;
		this.audioImageAnswerHeight = gameCanvas.height/7;
		this.audioImageAnswerHolderWidth = gameCanvas.width/5;
		this.audioImageAnswerHolderHeight = gameCanvas.height/6;

		this.correctTextAnswerHolderWidth = undefined;
		this.incorrectTextAnswerHolderWidth = undefined;

		drawAnswersManager.initialize();
		this.collidingObject = this.playerCharacter;
	  this.background = new LaneBackgroundClass();
	  this.background.initialize();
	  this.initializeLanePositions();
	  promptsAndAnswersManager.defineXAndYCoordinatesForTargets();
      musicManager.addTrack(new MusicTrack('audio/backgroundTracks/200419.mp3', 76.7));
	};

	this.update = function()
	{
		if (!promptersManager.shouldBeDrawingAPrompt &&
        fullGameStateMachine.currentState === fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame)
    {
			this.background.moveYellowCenterDashes();
			this.background.handleDashArrayPopulation();
			this.background.laneGrassImage1.scrollDown();
			this.background.laneGrassImage2.scrollDown();
			this.background.laneGrassImage1.handleScrollingOffScreen();
			this.background.laneGrassImage2.handleScrollingOffScreen();
			this.background.asphaltImage1.scrollDown();
			this.background.asphaltImage2.scrollDown();
			this.background.asphaltImage1.handleScrollingOffScreen();
			this.background.asphaltImage2.handleScrollingOffScreen();
			this.background.billboard.move();
			this.background.billboard.handleOffScreen();
			this.moveAnswers();
			this.handleAnswersOffScreen();
			this.collisionsWithAnswersManager.handleCollisionsWithAnswers(this.collidingObject);
		}
	};

  this.draw = function()
  {
	  this.background.draw();
	  this.playerCharacter.draw();
		drawAnswersManager.draw();
		promptersManager.drawPromptsWhenAppropriate();
	}

	this.playerCharacter = undefined;

	this.background = undefined;

	this.carLeftLanePosition = undefined;
	this.carRightLanePosition = undefined;

	this.initializeLanePositions = function()
	{
		this.carLeftLanePosition = gameCanvas.width/2 - this.playerCharacter.width - this.playerCharacter.width/2;
		this.carRightLanePosition = gameCanvas.width/2 + this.playerCharacter.width/2;
	}

	this.handleLeftArrowDown = function()
	{
		if (gameClassManager.currentGame.playerCharacter.x !== this.carLeftLanePosition)
		{
			gameClassManager.currentGame.playerCharacter.x = this.carLeftLanePosition;
			gameAudio.playLane();
		}
	}

	this.handleRightArrowDown = function()
	{
		if (gameClassManager.currentGame.playerCharacter.x !== this.carRightLanePosition)
		{
			gameClassManager.currentGame.playerCharacter.x = this.carRightLanePosition;
			gameAudio.playLane();
		}
	}

	this.answersYSpeed = 2.5;

	this.moveAnswers = function()
  {
    promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate += this.answersYSpeed;
    promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate += this.answersYSpeed;
  }

	this.handleAnswersOffScreen = function()
  {
    if (promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate > gameCanvas.height)
    {
      promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate = -10;
    }

    if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate > gameCanvas.height)
    {
      promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate = -10;
    }
  }
}

const laneGame = new laneGameClass();

function LaneCollisionsManager() {
    CollisionsWithAnswersManager.call(this);

    this.insideBoxColliderForStringAnswer = function(
        collidingObject, targetPromptAndAnswerPairing, answerWidth)
    {
        return (targetPromptAndAnswerPairing.yCoordinate + answerWidth/2 > collidingObject.y)
    }
}

LaneCollisionsManager.prototype = new CollisionsWithAnswersManager();
LaneCollisionsManager.prototype.constructor = LaneCollisionsManager;

function LaneCarClass()
{
  this.name = 'lane car';
  this.image = 'images\\sprites\\Lane\\car.png';
  this.x = gameCanvas.width/3.25;
  this.y = gameCanvas.height - gameCanvas.height/4;

  this.width = gameCanvas.width/7;
  this.height = gameCanvas.width/4;

  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
  }
}

function GasCanAnswerHolder(image)
{
  this.image = image;
}

function LaneBackgroundClass()
{

  this.laneGrassImage1 = undefined;
  this.laneGrassImage2 = undefined;

  this.asphaltImage1 = undefined;
  this.asphaltImage2 = undefined;

  this.billboard = undefined;

  this.initialize = function()
  {
    this.laneGrassImage1 = new LaneGrassImage(0, 'images\\Backgrounds\\LaneGrass1.png');
    this.laneGrassImage2 = new LaneGrassImage(-gameCanvas.height, 'images\\Backgrounds\\LaneGrass2.png');

    this.asphaltImage1 = new AsphaltImage(0, 'images\\Backgrounds\\road1.png');
    this.asphaltImage2 = new AsphaltImage(-gameCanvas.height, 'images\\Backgrounds\\road2.png');

    this.billboard = new Billboard();
  }

  let dashPictureNumber = 1;
  let currentDashPicture = 'images\\Backgrounds\\roadDash.png';

  function chooseDashPicture()
  {
    if (dashPictureNumber === 1)
    {
      currentDashPicture = 'images\\Backgrounds\\roadDash.png';
      dashPictureNumber = 2;
    }
    else if (dashPictureNumber === 2)
    {
      currentDashPicture = 'images\\Backgrounds\\roadDash3.png';
      dashPictureNumber = 1;
    }
    return currentDashPicture;
  }

  let arrayOfYellowCenterDashes = [-1, 0, 1, 2, 3, 4, 5, 6].map(function(dashIndex) {
		return {x: 320 - 7.5, y: dashIndex*100, image:chooseDashPicture()};
	});
	let dashHeight = 75;
	let dashWidth = 15;

  this.draw = function()
	{
		this.drawLaneGrass();

	  this.drawLaneRoadAsphalt();
	  drawLaneYellowCenterDashes();
    this.billboard.draw();
	}

	this.drawLaneGrass = function()
	{
    this.laneGrassImage1.draw();
    this.laneGrassImage2.draw();
	}

	this.drawLaneRoadAsphalt = function()
	{
    this.asphaltImage1.draw();
    this.asphaltImage2.draw();
	}

	function drawLaneYellowCenterDashes()
	{
		for (let dashIndex = 0; dashIndex < arrayOfYellowCenterDashes.length; dashIndex++)
		{
      drawFromSheet(arrayOfYellowCenterDashes[dashIndex].image, arrayOfYellowCenterDashes[dashIndex].x,
                                  arrayOfYellowCenterDashes[dashIndex].y, dashWidth,dashHeight)
      // gameCanvasContext.drawImage(arrayOfYellowCenterDashes[dashIndex].image, arrayOfYellowCenterDashes[dashIndex].x,
      //                             arrayOfYellowCenterDashes[dashIndex].y, dashWidth,dashHeight);
		}
	}

	this.moveYellowCenterDashes = function()
	{
		for (let dashIndex = 0; dashIndex < arrayOfYellowCenterDashes.length; dashIndex++)
		{
			arrayOfYellowCenterDashes[dashIndex].y += 3;
		}
	}

	this.spawnANewDashIfAppropriate = function()
	{
		if (arrayOfYellowCenterDashes[0].y > 0)
		{
			arrayOfYellowCenterDashes.unshift({x:320 - 7.5,y:-100,image:chooseDashPicture()});
		}
	}

	this.deleteDashesOffBottomOfScreen = function()
	{
		if (arrayOfYellowCenterDashes[arrayOfYellowCenterDashes.length - 1].y > 700)
		{
			arrayOfYellowCenterDashes.splice(arrayOfYellowCenterDashes.length - 1,1);
		}
	}

	this.handleDashArrayPopulation = function()
	{
		this.spawnANewDashIfAppropriate();
		this.deleteDashesOffBottomOfScreen();
	}
}

function LaneGrassImage(drawingStartingY,image)
{
  this.drawingStartingX = 0;
  this.drawingStartingY = drawingStartingY;
  this.width = gameCanvas.width;
  this.height = gameCanvas.height;
  this.image = image;

  this.draw = function()
  {
    drawFromSheet(image, this.drawingStartingX,this.drawingStartingY, this.width,this.height);
    //gameCanvasContext.drawImage(image, this.drawingStartingX,this.drawingStartingY, this.width,this.height);
  }

  this.scrollDown = function()
  {
    this.drawingStartingY += 3;
  }

  this.handleScrollingOffScreen = function()
  {
    if (this.drawingStartingY > gameCanvas.height)
    {
      this.drawingStartingY = -gameCanvas.height;
    }
  }
}

function AsphaltImage(drawingStartingY, image)
{
  this.drawingStartingX = gameCanvas.width/2 - gameCanvas.width/4;
  this.drawingStartingY = drawingStartingY;
  this.width = gameCanvas.width/2;
  this.height = gameCanvas.height;

  this.image = image;

  this.draw = function()
  {
    drawFromSheet(image, this.drawingStartingX,this.drawingStartingY, this.width,this.height);
    //gameCanvasContext.drawImage(image, this.drawingStartingX,this.drawingStartingY, this.width,this.height);
  }

  this.scrollDown = function()
  {
    this.drawingStartingY += 3;
  }

  this.handleScrollingOffScreen = function()
  {
    if (this.drawingStartingY > gameCanvas.height)
    {
      this.drawingStartingY = -gameCanvas.height;
    }
  }
}

function Billboard()
{
  this.image = 'images\\sprites\\Lane\\billboard.png';
  this.width = gameCanvas.width/4;
  this.height = gameCanvas.height/3;

  this.x = 10;
  this.y = 0;

  this.yVelocity = 3;

  this.move = function()
  {
    this.y += this.yVelocity;
  }

  this.handleOffScreen = function()
  {
    if (this.y > gameCanvas.height)
    {
      this.y = -this.height;
    }
  }

  this.bannerMessageCharacters = ['G','o','o','d',' ','J','o','b','!'];

  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);

    let arrayOfCharacterTypes = [];
    for (let bannerMessageIndex = 0; bannerMessageIndex < gameClassManager.currentGame.amountCorrect; bannerMessageIndex++)
             {
               arrayOfCharacterTypes.push(this.bannerMessageCharacters[bannerMessageIndex])
             }
             customFontFillText(arrayOfCharacterTypes, 30, 15, this.x + 15,this.y + 60);
  }
}
const jumperLetterColor = 'red';
const jumperBackButtonRectangleColor = 'yellow';
const jumperBackButtonTextColor = 'green';

jumperGameClass.prototype = new GameClass();
function jumperGameClass()
{
  this.name = 'jumperGame';
  this.playerCharacter = undefined;
  this.groundParticleManager = undefined;
  this.defineAndInitializePlayerCharacter = function()
  {
    this.playerCharacter = new JumperClass();
    this.collidingObject = this.playerCharacter;
  }

  this.imageAnswerHolderWidth = undefined;
  this.imageAnswerHolderHeight = undefined;

  this.audioImageAnswerHolderWidth = undefined;
  this.audioImageAnswerHolderHeight = undefined;

  this.correctTextAnswerHolderWidth = undefined;
  this.incorrectTextAnswerHolderWidth = undefined;

  this.treasureChestAnswerHolder = undefined;

  this.textAnswerFontSize = '30';
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';

  this.drawTransitionText = function()
  {
    customFontFillText(['Dig to the answers', symbolExclamationPointImage], 55,30, 25,50);
    customFontFillText([upArrowImage, ' ', symbolEqualsImage, ' Float up'], 30,15, 210,200);
    customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' Roll right'], 30,15, 350,350);
    customFontFillText([downArrowImage, ' ', symbolEqualsImage, ' Dig down'], 30,15, 200,500);
    customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' Roll left'], 30,15, 50,350);
  }

  this.titleScreenData = [{
	name: "Digger",
	fontSize: 27,
	spacing: 15,
	x: 322, y: 185
  }];
  const MAX_PLATFORMS = 7;

  this.arrayOfJumperPlatforms = [...Array(MAX_PLATFORMS).keys()].map(function(i) {
	return {x:0, y:i*100};
  });

  this.FRAME_RATE = 1000/30;

  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/200411.mp3', 71.11);

  this.pregameSpecialCode = function()
  {
    gameAudio = {};
    gameAudio.digging = new sfxOneShot('audio/dig1.mp3');
    gameAudio.quickPlatformDropSound = new sfxOneShot('audio/V/playerJump.mp3');
  };

  this.superInitialize = this.initialize;
  this.initialize = function()
  {
    this.playerCharacter = new JumperClass();
    this.collidingObject = this.playerCharacter;
    this.groundParticleManager = new GroundParticleManager();
    drawAnswersManager.draw();

    this.imageAnswerHolderWidth = gameCanvas.width/4;
		this.imageAnswerHolderHeight = gameCanvas.height/5;
		this.audioImageAnswerHolderWidth = gameCanvas.width/5;
    this.audioImageAnswerHolderHeight = gameCanvas.height/6;

    this.assignAnswerHolder();
	//this.superInitialize();
  };

  this.assignAnswerHolder = function()
  {
    this.treasureChestAnswerHolder = new TreasureChestAnswerHolder('images\\sprites\\Jumper\\treasureChest.png');
    return this.treasureChestAnswerHolder;
  }

  this.update = function()
  {
    if (!promptersManager.shouldBeDrawingAPrompt &&
        fullGameStateMachine.currentState === fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame)
    {
      this.movePlayer();
      this.handlePlayerWrapping();
      this.groundParticleManager.updateParticles();
      this.groundParticleManager.moveParticles();

      this.collisionsWithAnswersManager.handleCollisionsWithAnswers(this.collidingObject);
    }
  };

  this.handleLeftArrowDown = function()
  {
    this.playerCharacter.xSpeed = this.playerCharacter.LEFT_ARROW_DOWN_SPEED;
    this.playerCharacter.currentImage = this.playerCharacter.facingLeftImage;
    this.playerCharacter.rotationAmount -= 0.2;
  }

  this.handleRightArrowDown = function()
  {
    this.playerCharacter.xSpeed = this.playerCharacter.RIGHT_ARROW_DOWN_SPEED;
    this.playerCharacter.currentImage = this.playerCharacter.facingRightImage;
    this.playerCharacter.rotationAmount += 0.2;
  }

  this.handleRightArrowUp = function()
  {
    this.playerCharacter.xSpeed = this.playerCharacter.LEFT_OR_RIGHT_ARROW_UP_SPEED;
  }

  this.handleSpaceBarDown = function()
  {
	   this.playerCharacter.jump();
  }

  this.handleLeftArrowUp = function()
  {
    this.playerCharacter.xSpeed = this.playerCharacter.LEFT_OR_RIGHT_ARROW_UP_SPEED;
  }

  this.handlePlayerWrapping = function()
  {
    if (this.playerCharacter.x < -10)//if the player goes off the left side of the screen
    {
      this.playerCharacter.x = gameCanvas.width - 5;//put them on the right side
    }

    if (this.playerCharacter.x > gameCanvas.width - 5)//if the player goes off the right side of the screen
    {
      this.playerCharacter.x = -5;//put them on the left side of the screen
    }
  }

  this.movePlayer = function()
  {
	if (!inputManager.upArrowIsBeingHeld &&
		this.playerCharacter.y !== 20 && this.playerCharacter.y !== 120 &&
		this.playerCharacter.y !== 220 && this.playerCharacter.y !== 320 && this.playerCharacter.y !== 420 &&
		this.playerCharacter.y !== 520 && this.playerCharacter.y !== 620) //if not jumping and not contacting a platform
    {
      this.playerCharacter.y += 5;//apply GRAVITY
    }
  this.playerCharacter.x += this.playerCharacter.xSpeed;
  };

  this.handleUpArrowDown = function()
  {
	   this.playerCharacter.jump();
  };

  this.handleDownArrowDown = function()
  {
      this.groundParticleManager.createAGroupOfParticles();
      gameAudio.digging.play();
      gameAudio.quickPlatformDropSound.play();
    this.playerCharacter.y += 100;
    if (this.playerCharacter.y > 700)//if the player goes below the screen
    {
      this.playerCharacter.y = 20;//put them at the top platform
    }

  }

  this.draw = function()
  {
    this.drawBackground();
    this.groundParticleManager.drawParticles();
    this.playerCharacter.draw();
    drawAnswersManager.draw();
		promptersManager.drawPromptsWhenAppropriate();
  };

  this.drawBackground = function()
  {
  	gameCanvasContext.fillStyle = 'blue';
  	gameCanvasContext.fillRect(0,0, gameCanvas.width,gameCanvas.height);
  	gameCanvasContext.fillStyle = 'gray';
  	for (let platformsIndex = 0; platformsIndex < this.arrayOfJumperPlatforms.length; platformsIndex++)
  	{
        gameCanvasContext.fillRect(this.arrayOfJumperPlatforms[platformsIndex].x, this.arrayOfJumperPlatforms[platformsIndex].y, gameCanvas.width, 50)
  	}
    drawFromSheet('images\\Backgrounds\\editedJumperBackground.png', 0,0, gameCanvas.width,gameCanvas.height);
    //gameCanvasContext.drawImage(jumperBackground, 0,0, gameCanvas.width,gameCanvas.height);
  };

  this.onSpaceBarKeyDown = function()
  {
  	this.playerCharacter.y += -7;
  };
}

const jumperGame = new jumperGameClass();

function TreasureChestAnswerHolder(image)
{
	this.image = image;
}

function JumperClass()
{
  this.RIGHT_ARROW_DOWN_SPEED = 3;
  this.LEFT_ARROW_DOWN_SPEED = -3;
  this.JUMP_SPEED = 7;
  this.LEFT_OR_RIGHT_ARROW_UP_SPEED = 0;
  this.xSpeed = 0;
  this.x = Math.random() * gameCanvas.width;
  this.y = (Math.floor(Math.random() * 7) * 100) + 20;

  this.width = 60;
  this.height = 60;

  this.rotationAmount = 0;


  this.facingRightImage = 'images\\sprites\\Jumper\\JumperFacingRight.png';
  this.facingLeftImage = 'images\\sprites\\Jumper\\JumperFacingLeft.png';
  this.currentImage = this.facingRightImage;

  this.draw = function()
  {
    let currentCenterX = this.x + this.width/2;
    let currentCenterY = this.y + this.height/2;

    drawFromSheet(this.currentImage, this.x,this.y, this.width,this.height, undefined, this.rotationAmount + Math.PI/2,currentCenterX,currentCenterY);
    // gameCanvasContext.save();//save context so we can do weird stuff and go back to normal drawing afterwards
    // gameCanvasContext.translate(currentCenterX,currentCenterY);//place imaginary hand at pivot point
    // gameCanvasContext.rotate(this.rotationAmount + Math.PI/2);//rotate with hand at pivot based in radians
    // gameCanvasContext.translate(-currentCenterX,-currentCenterY);//return hand to 0,0 of canvas
    // gameCanvasContext.drawImage(this.currentImage, this.x,this.y, this.width,this.height);
    // gameCanvasContext.restore();//erase any errant abnormal draw code

  	// gameCanvasContext.fillStyle = 'white';
  	// gameCanvasContext.fillRect(this.x,this.y, this.width,this.height);
  };

  this.jump = function()
  {
	   this.y -= 5;
  }
}

function GroundParticle(x,y, xVelocity,yVelocity, image)
{
  this.x = x;
  this.y = y;
  this.xVelocity = xVelocity;
  this.yVelocity = yVelocity;

  this.width = 7;
  this.height = 7;

  const GRAVITY = -0.5;

  this.image = image;

  this.update = function()
  {
    this.yVelocity -= GRAVITY;
  }

  this.move = function()
  {

    this.x += this.xVelocity;
    this.y += this.yVelocity;
  }

  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
  }
}

function GroundParticleManager()
{
  this.arrayOfGroupsOfParticles = [];
  this.createAGroupOfParticles = function()
  {
    let groupOfParticles = [];
    let randomAmountOfParticles = getRandomIntInclusive(15, 30);
    for (let particleIndex = 0; particleIndex < randomAmountOfParticles; particleIndex++)
    {
      let currentX = gameClassManager.currentGame.playerCharacter.x;
      let currentY = gameClassManager.currentGame.playerCharacter.y;
      let xToAssign = getRandomArbitrary(currentX - 35, currentX + 35);
      let yToAssign = getRandomArbitrary(currentY + 70, currentY + 10);
      let xVelocity = getRandomArbitrary(-1,1);
      let yVelocity = getRandomArbitrary(-7, -10);

      let particle = new GroundParticle(xToAssign,yToAssign, xVelocity,yVelocity, 'images\\sprites\\Jumper\\jumperGroundParticle.png');
      groupOfParticles.push(particle);
    }
    this.arrayOfGroupsOfParticles.push(groupOfParticles);
  }

  this.updateParticles = function()
  {
    if (this.arrayOfGroupsOfParticles.length === 0)
    {
      return;
    }
    else
    {
      for (let groupsOfParticlesIndex = 0; groupsOfParticlesIndex < this.arrayOfGroupsOfParticles.length; groupsOfParticlesIndex++)
      {
        for (let individualParticlesIndex = 0; individualParticlesIndex < this.arrayOfGroupsOfParticles[groupsOfParticlesIndex].length; individualParticlesIndex++)
        {
          this.arrayOfGroupsOfParticles[groupsOfParticlesIndex][individualParticlesIndex].update();
          if (this.arrayOfGroupsOfParticles[groupsOfParticlesIndex][individualParticlesIndex].y > gameCanvas.height)
          {
            this.arrayOfGroupsOfParticles[groupsOfParticlesIndex].splice(individualParticlesIndex,1);
          }
        }
      }
    }

  }

  this.moveParticles = function()
  {
    if (this.arrayOfGroupsOfParticles.length === 0)
    {
      return;
    }
    else
    {
      for (let groupsOfParticlesIndex = 0; groupsOfParticlesIndex < this.arrayOfGroupsOfParticles.length; groupsOfParticlesIndex++)
      {
        for (let individualParticlesIndex = 0; individualParticlesIndex < this.arrayOfGroupsOfParticles[groupsOfParticlesIndex].length; individualParticlesIndex++)
        {
          this.arrayOfGroupsOfParticles[groupsOfParticlesIndex][individualParticlesIndex].move();
        }
      }
    }
  }

  this.drawParticles = function()
  {
    if (this.arrayOfGroupsOfParticles.length === 0)
    {
      return;
    }
    else
    {
      for (let groupsOfParticlesIndex = 0; groupsOfParticlesIndex < this.arrayOfGroupsOfParticles.length; groupsOfParticlesIndex++)
      {
        for (let individualParticlesIndex = 0; individualParticlesIndex < this.arrayOfGroupsOfParticles[groupsOfParticlesIndex].length; individualParticlesIndex++)
        {
          this.arrayOfGroupsOfParticles[groupsOfParticlesIndex][individualParticlesIndex].draw();
        }
      }
    }
  }
}
finderGameClass.prototype = new GameClass();
function finderGameClass()
{
  this.name = 'finder game';
  this.playerCharacter = undefined;

  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/finderSong.mp3', 9.6);

  this.drawTransitionText = function()
  {
    customFontFillText(['Unlock the treasure box!', symbolExclamationPointImage], 55,30, 25,50);
    customFontFillText([upArrowImage, ' ', symbolEqualsImage, ' Walk up'], 30,15, 210,200);
    customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' Walk right'], 30,15, 350,350);
    customFontFillText([downArrowImage, ' ', symbolEqualsImage, ' Walk down'], 30,15, 200,500);
    customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' Walk left'], 30,15, 50,350);
  }

  this.defineAndInitializePlayerCharacter = function()
  {
    this.playerCharacter = new FinderPlayerCharacter();
  }

  this.imageAnswerWidth = undefined;
  this.imageAnswerHeight = undefined;
  this.imageAnswerHolderWidth = undefined;
  this.imageAnswerHolderHeight = undefined;

  this.audioImageAnswerWidth = undefined;
  this.audioImageAnswerHeight = undefined;
  this.audioImageAnswerHolderWidth = undefined;
  this.audioImageAnswerHolderHeight = undefined;

  this.correctTextAnswerHolderWidth = undefined;
  this.incorrectTextAnswerHolderWidth = undefined;

  this.LETTER_COLOR = 'white';
  this.textAnswerFontSize = '30';
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';

  this.titleScreenData =
  [
    {name: "Finder", fontSize: 27, spacing: 15, x: 420, y: 185}
  ];

  this.collidingObject = undefined;
  this.topRoom = undefined;
  this.middleRoom = undefined;
  this.bottomRoom = undefined;

  this.trophy = undefined;
  this.initialize = function()
  {
    this.defineAndInitializePlayerCharacter();

    this.imageAnswerWidth = gameCanvas.width*0.1;
    this.imageAnswerHeight = gameCanvas.height*0.1;
    this.audioImageAnswerWidth = gameCanvas.width*0.1;
    this.audioImageAnswerHeight = gameCanvas.height*0.1;

    this.imageAnswerHolderWidth = gameCanvas.width*0.15;
    this.imageAnswerHolderHeight = gameCanvas.height*0.15;
    this.audioImageAnswerHolderWidth = gameCanvas.width*0.15;
    this.audioImageAnswerHolderHeight = gameCanvas.height*0.15;
    drawAnswersManager.initialize();

    promptersManager.loadAppropriatePrompterBasedOnCurrentPromptsDataType();
    this.collidingObject = this.playerCharacter;

    this.background = new finderBackground();
    this.topRoom = new Room('images\\sprites\\Finder\\upperAndMiddleRooms.png', gameCanvas.height*0.2);
    this.middleRoom = new Room('images\\sprites\\Finder\\upperAndMiddleRooms.png', gameCanvas.height*0.2 + gameCanvas.height*0.2);
    this.bottomRoom = new Room('images\\sprites\\Finder\\bottomRoom.png', gameCanvas.height*0.2 + gameCanvas.height*0.2 + gameCanvas.height*0.2);
    this.trophy = {image:'images\\sprites\\Rewards\\Trophy.png',x:this.bottomRoom.x + 20,y:this.bottomRoom.y + 20,width:this.bottomRoom.width*0.6,height:this.bottomRoom.height*0.6};
  }

  this.handleLeftArrowDown = function()
  {
    inputManager.leftArrowIsBeingHeld = true;
  }
  this.handleLeftArrowUp = function()
  {
    inputManager.leftArrowIsBeingHeld = false;
  }
  this.handleRightArrowDown = function()
  {
    inputManager.rightArrowIsBeingHeld = true;
  }
  this.handleRightArrowUp = function()
  {
    inputManager.rightArrowIsBeingHeld = false;
  }
  this.handleDownArrowDown = function()
  {
    inputManager.downArrowIsBeingHeld = true;
  }
  this.handleDownArrowUp = function()
  {
    inputManager.downArrowIsBeingHeld = false;
  }
  this.handleUpArrowDown = function()
  {
    inputManager.upArrowIsBeingHeld = true;
  }
  this.handleUpArrowUp = function()
  {
    inputManager.upArrowIsBeingHeld = false;
  }

  this.update = function()
  {
    if (!promptersManager.shouldBeDrawingAPrompt &&
        fullGameStateMachine.currentState !== fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.pausedMiniGame)
    {
      this.playerCharacter.move();
      this.topRoom.handlePlayerCollision();
      this.middleRoom.handlePlayerCollision();
      this.bottomRoom.handlePlayerCollision();
      this.playerCharacter.handleTrophyCollision();
    }
    this.collisionsWithAnswersManager.handleCollisionsWithAnswers(this.collidingObject);
  }

  this.draw = function()
  {
    this.background.draw();
    this.playerCharacter.draw();
    this.topRoom.draw();
    this.middleRoom.draw();
    this.bottomRoom.draw();
    drawFromSheet(this.trophy.image, this.trophy.x,this.trophy.y, this.trophy.width,this.trophy.height);
    //gameCanvasContext.drawImage(this.trophy.image, this.trophy.x,this.trophy.y, this.trophy.width,this.trophy.height);
    drawAnswersManager.draw();
    promptersManager.drawPromptsWhenAppropriate();
    gameCanvasContext.fillStyle = 'white';
    gameCanvasContext.font = "30px Helvetica";
    gameCanvasContext.fillText('You have ' + this.playerCharacter.numberOfKeys + ' keys', gameCanvas.width/2 - 100,gameCanvas.height*0.1);
  }
}

const finderGame = new finderGameClass();

function finderBackground()
{
  this.image = 'images\\Backgrounds\\FinderBG.png';
  this.draw = function()
  {
    drawFromSheet(this.image, 0,0, gameCanvas.width,gameCanvas.height);
    //gameCanvasContext.drawImage(this.image, 0,0, gameCanvas.width,gameCanvas.height);
  }
}

function FinderPlayerCharacter()
{
  this.image = "images\\sprites\\dodgeBall\\Player2.png";

  this.width = gameCanvas.width*0.1;
  this.height = gameCanvas.height*0.15;

  this.startingX = gameCanvas.width/2 - this.width/2;
  this.startingY = gameCanvas.height/2 - this.height/2;

  this.x = this.startingX;
  this.y = this.startingY;

  this.previousX = undefined;
  this.previousY = undefined;

  this.numberOfKeys = 0;

  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
  }

  this.move = function()
  {
    this.previousX = this.x;
    this.previousY = this.y;
    if (inputManager.leftArrowIsBeingHeld === true)
    {
      this.x -= 5;
    }
    if (inputManager.upArrowIsBeingHeld === true)
    {
      this.y -= 5;
    }
    if (inputManager.rightArrowIsBeingHeld === true)
    {
      this.x += 5;
    }
    if (inputManager.downArrowIsBeingHeld === true)
    {
      this.y += 5;
    }
  }

  this.handleTrophyCollision = function()
  {
    let trophy = gameClassManager.currentGame.trophy;
    let bottomRoom = gameClassManager.currentGame.bottomRoom;
    let middleRoom = gameClassManager.currentGame.middleRoom;
    let topRoom = gameClassManager.currentGame.topRoom;

    if (this.x + this.width > trophy.x && this.x < trophy.x + trophy.width &&
        this.y + this.height > trophy.y && this.y < trophy.y + trophy.height)
        {
          this.x = this.startingX;
          this.y = this.startingY;
          this.numberOfKeys = 0;
          bottomRoom.hasADoor = true;
          middleRoom.hasADoor = true;
          topRoom.hasADoor = true;
        }
  }
}

function Room(image,y)
{
  this.image = image;
  this.y = y;

  this.width = gameCanvas.width*0.2;
  this.height = gameCanvas.height*0.2;

  this.x = gameCanvas.width - this.width;

  this.leftWallX = this.x;
  this.leftWallTopY = this.y;
  this.leftWallBottomY = this.y + this.height;
  this.wallWidth = 10;
  this.bottomWallLeftX = this.x;
  this.bottomWallRightX = this.x + this.width;
  this.bottomWallY = this.y + this.height;
  this.rightWallX = this.x + this.width;
  this.rightWallTopY = this.y;
  this.rightWallBottomY = this.y + this.height;
  this.doorLeftX = this.x + 10;
  this.doorRightX = this.x + this.width - 10;
  this.doorY = this.y;

  this.hasADoor = true;
  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
    if (this.hasADoor)
    {
      drawFromSheet('images\\sprites\\Finder\\door.png', this.x,this.y, this.width,this.height)
      //gameCanvasContext.drawImage(doorImage, this.x,this.y, this.width,this.height);
    }
  }

  this.handlePlayerCollision = function()
  {
    let playerCharacter = gameClassManager.currentGame.playerCharacter;

    if (playerCharacter.previousX < this.leftWallX &&
        playerCharacter.y + playerCharacter.height > this.leftWallTopY &&
        playerCharacter.y < this.leftWallBottomY)
    {
      if (playerCharacter.x + playerCharacter.width > this.leftWallX)
      {
        playerCharacter.x = playerCharacter.previousX;
      }
    }

    if (playerCharacter.previousX > this.leftWallX + 10 &&
        playerCharacter.y + playerCharacter.height > this.leftWallTopY &&
        playerCharacter.y < this.leftWallBottomY)
    {
      if (playerCharacter.x <= this.leftWallX + 10)
      {
        playerCharacter.x = playerCharacter.previousX;
      }
    }

    if (playerCharacter.previousX < this.rightWallX &&
        playerCharacter.y + playerCharacter.height > this.rightWallTopY &&
        playerCharacter.y < this.rightWallBottomY)
    {
      if (playerCharacter.x + playerCharacter.width > this.rightWallX)
      {
        playerCharacter.x = playerCharacter.previousX;
      }
    }

    if (playerCharacter.previousY > 557 &&
        playerCharacter.x + playerCharacter.width > this.bottomWallLeftX &&
        playerCharacter.x < this.bottomWallRightX)
    {
      if (playerCharacter.y <= 557)
      {
        playerCharacter.y = playerCharacter.previousY;
      }
    }

    if (playerCharacter.previousY < 547 &&
        playerCharacter.x + playerCharacter.width > this.bottomWallLeftX &&
        playerCharacter.x < this.bottomWallRightX)
    {
      if (playerCharacter.y >= 547)
      {
        playerCharacter.y = playerCharacter.previousY;
      }
    }

    if (playerCharacter.previousY + playerCharacter.height < this.doorY &&
        playerCharacter.x + playerCharacter.width > this.doorLeftX &&
        playerCharacter.x < this.doorRightX)
    {

      if (playerCharacter.y + playerCharacter.height >= this.doorY)
      {
        if (!this.hasADoor)
        {
          return;
        }
        else if (this.hasADoor)
        {
          if (playerCharacter.numberOfKeys < 1)
          {
            playerCharacter.y = playerCharacter.previousY;
          }
          else if (playerCharacter.numberOfKeys > 0)
          {
            this.hasADoor = false;
            playerCharacter.numberOfKeys -= 1;
          }
        }
      }
    }
  }
}
function PassOrBlockCollisionsManager() {
    CollisionsWithAnswersManager.call(this);

    this.processCollisionWithAnswer = function (){
        if (nextGame === SINGLE_PLAYER_RANDOM ||
            nextGame === TWO_PLAYER_RANDOM)
        {
            cycleCount++;
        }
        calculateAccuracy();
    }

    this.processCollisionWithCorrectAnswer = function(){
        CollisionsWithAnswersManager.prototype.processCollisionWithCorrectAnswer();
        gameClassManager.currentGame.correctAnswersYSpeed *= -1;
        let randomImageIndex = getRandomIntInclusive(0, gameClassManager.currentGame.arrayOfUpsideDownAnswerHolders.length - 1);
        promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.answerHolder.image =
        gameClassManager.currentGame.arrayOfUpsideDownAnswerHolders[randomImageIndex].image;

        let arrayOfGemImages = gameClassManager.currentGame.playerCharacter.arrayOfGemImages;
        let randomIndexForArrayOfGemImages = getRandomIntInclusive(0,arrayOfGemImages.length - 1);
        let randomGemImage = arrayOfGemImages[randomIndexForArrayOfGemImages];
        let arrayOfGems = gameClassManager.currentGame.playerCharacter.arrayOfGems;
        let paddleX = gameClassManager.currentGame.playerCharacter.x;
        let gemBaseWidth = 10;
        let paddleWidth = gameClassManager.currentGame.playerCharacter.width;
        let paddleRightLimitXForGemToFitOnPaddle = paddleX + paddleWidth - gemBaseWidth;
        let randomGemX = getRandomArbitrary(paddleX,paddleRightLimitXForGemToFitOnPaddle);
        let gemY = gameClassManager.currentGame.playerCharacter.y;
        let gem = new Gem(randomGemImage, randomGemX,gemY);
        arrayOfGems.push(gem);
    }

    this.processCollisionWithIncorrectAnswer = function(){
        CollisionsWithAnswersManager.prototype.processCollisionWithIncorrectAnswer();
        gameClassManager.currentGame.incorrectAnswersYSpeed *= -1;
        let randomImageIndex = getRandomIntInclusive(0, gameClassManager.currentGame.arrayOfUpsideDownAnswerHolders.length - 1);
        promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.answerHolder.image =
        gameClassManager.currentGame.arrayOfUpsideDownAnswerHolders[randomImageIndex].image;
    }
}

PassOrBlockCollisionsManager.prototype = new CollisionsWithAnswersManager();
PassOrBlockCollisionsManager.prototype.constructor = PassOrBlockCollisionsManager;
PassOrBlockGameClass.prototype = new GameClass();
function PassOrBlockGameClass()
{
  this.name = "Pass or Block Game";
  this.FRAME_RATE = 1000/30;

  this.background = undefined;
  this.titleScreenData =
  [
	   {name: "Volcano", fontSize: 18, spacing: 13, x: 525, y: 185}
  ];

  this.drawTransitionText = function()
  {
    customFontFillText(['Touch the answers to '], 35,30, 10,50);
    customFontFillText(['collect crystals!', symbolExclamationPointImage], 35,30, gameCanvas.width*0.05,100);
    customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' Move right'], 40,15, gameCanvas.width*0.225,250);
    customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' Move left'], 40,15, gameCanvas.width*0.225,450);
  }

  this.playerCharacter = undefined;
  this.defineAndInitializePlayerCharacter = function()
  {
    this.playerCharacter = new Paddle();
    this.collidingObject = this.playerCharacter;
  }
  this.background = undefined;
  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/PassBlockVolcano.mp3',66.5);
  this.backButtonColor = 'yellow';
  this.backButtonTextColor = 'blueViolet';

  this.textAnswerFontSize = 30;
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';

  this.imageAnswerWidth = undefined;
  this.imageAnswerHeight = undefined;
  this.imageAnswerHolderWidth = undefined;
  this.imageAnswerHolderHeight = undefined;

  this.audioImageAnswerWidth = undefined;
  this.audioImageAnswerHeight = undefined;
  this.audioImageAnswerHolderWidth = undefined;
  this.audioImageAnswerHolderHeight = undefined;

  this.correctTextAnswerHolderWidth = undefined;
  this.incorrectTextAnswerHolderWidth = undefined;

  this.currentAnswerHolderWidth = undefined;
  this.currentAnswerHolderHeight = undefined;

  this.fireLavaParticleManager = undefined;

  this.arrayOfAnswerHolders = [];
  this.arrayOfUpsideDownAnswerHolders = [];

  this.LETTER_COLOR = 'cyan';

  this.correctAnswersYSpeed = 4;
  this.incorrectAnswersYSpeed = 4;

  this.collisionsWithAnswersManager = new PassOrBlockCollisionsManager();

  this.superInitialize = this.initialize;
  this.initialize = function()
  {
    this.imageAnswerWidth = gameCanvas.width/8;
    this.imageAnswerHeight = gameCanvas.height/9;
    this.imageAnswerHolderWidth = gameCanvas.width/4;
    this.imageAnswerHolderHeight = gameCanvas.height/5;

    this.audioImageAnswerWidth = gameCanvas.width/6;
    this.audioImageAnswerHeight = gameCanvas.height/7;
    this.audioImageAnswerHolderWidth = gameCanvas.width/5;
    this.audioImageAnswerHolderHeight = gameCanvas.height/6;

    this.lavaAnswerHolder1 = new LavaAnswerHolder('images\\sprites\\passBlock\\lavaBal.png');
    this.lavaAnswerHolder2 = new LavaAnswerHolder('images\\sprites\\passBlock\\lavaBall.png');
    this.lavaAnswerHolder3 = new LavaAnswerHolder('images\\sprites\\passBlock\\lavaBalll.png');
    this.arrayOfAnswerHolders.push(this.lavaAnswerHolder1);
    this.arrayOfAnswerHolders.push(this.lavaAnswerHolder2);
    this.arrayOfAnswerHolders.push(this.lavaAnswerHolder3);

    this.upsideDownAnswerHolder1 = new LavaAnswerHolder('images\\sprites\\passBlock\\lavaBalUpsideDown.png');
    this.upsideDownAnswerHolder2 = new LavaAnswerHolder('images\\sprites\\passBlock\\lavaBallUpsideDown.png');
    this.upsideDownAnswerHolder3 = new LavaAnswerHolder('images\\sprites\\passBlock\\lavaBalllUpsideDown.png');
    this.arrayOfUpsideDownAnswerHolders.push(this.upsideDownAnswerHolder1);
    this.arrayOfUpsideDownAnswerHolders.push(this.upsideDownAnswerHolder2);
    this.arrayOfUpsideDownAnswerHolders.push(this.upsideDownAnswerHolder3);

    this.fireLavaParticleManager = new FireLavaParticleManager();

    this.background = new PassOrBlockBackground();
    this.superInitialize();
  }

  this.assignAnswerHolder = function()
  {
      let randomNumber = getRandomIntInclusive(0, this.arrayOfAnswerHolders.length - 1);
      return this.arrayOfAnswerHolders[randomNumber];
  }

  this.draw = function()
  {
    this.background.draw();
    this.playerCharacter.draw();
    this.fireLavaParticleManager.drawParticles();
    drawAnswersManager.draw();
    promptersManager.drawPromptsWhenAppropriate();
  }

  this.update = function()
  {
    if (!promptersManager.shouldBeDrawingAPrompt &&
    fullGameStateMachine.currentState === fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame)
    {
      this.moveAnswers();
      setInterval(this.fireLavaParticleManager.generateAParticle(),250);
      this.collisionsWithAnswersManager.handleCollisionsWithAnswers(this.playerCharacter);
      //this.playerCharacter.handleCollisionsWithAnswers();
      this.background.handleAnswersOffScreen();
      this.fireLavaParticleManager.handleParticles();
    }
  }

  this.handleLeftArrowDown = function()
  {
    this.playerCharacter.x -= 10;

    for (let i = 0; i < this.playerCharacter.arrayOfGems.length; i++)
    {
      this.playerCharacter.arrayOfGems[i].x -= 10;
    }
  }

  this.handleRightArrowDown = function()
  {
    this.playerCharacter.x += 10;

    for (let i = 0; i < this.playerCharacter.arrayOfGems.length; i++)
    {
      this.playerCharacter.arrayOfGems[i].x += 10;
    }
  }

  this.moveAnswers = function()
  {
    promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate += this.incorrectAnswersYSpeed;
    promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate += this.correctAnswersYSpeed;
  }
}

const passOrBlockGame = new PassOrBlockGameClass();

function LavaAnswerHolder(image)
{
  this.image = image;
}
function Paddle()
{
  this.width = 120;
  this.height = 25;
  this.image = 'images\\sprites\\passBlock\\volcanicRock.png';

  this.x = gameCanvas.width/2 - this.width/2;
  this.y = gameCanvas.height - this.height*5;

  this.arrayOfGemImages = ['images\\sprites\\passBlock\\Gem.png','images\\sprites\\passBlock\\Gem2.png','images\\sprites\\passBlock\\Gem3.png'];
  this.arrayOfGems = [];

  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(paddleRockImage, this.x,this.y, this.width,this.height);
    this.drawGems();
    // gameCanvasContext.fillStyle = 'white';
    // gameCanvasContext.fillRect(this.x,this.y, this.width,this.height);
  }

  this.drawGems = function()
  {
    for (let gemArrayIndex = 0; gemArrayIndex < this.arrayOfGems.length; gemArrayIndex++)
    {
      if (this.arrayOfGems.length > 0)
      {
        this.arrayOfGems[gemArrayIndex].draw();
      }
    }
  }

  this.handleCollisionsWithAnswers = function()
  {
    //TODO: Make game specific collisions with answers code and put it into an abstracted collisions with answers
    //function in the collisionsWithAnswersManager

  }
}

function Gem(image, x,y)
{
  this.image = image;
  this.x = x;
  this.y = y;
  this.width = 25;
  this.height = 30;

  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y - this.height + 3, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y - this.height + 3, this.width,this.height);
  }
}
function PassOrBlockBackground()
{

  this.volcanoImage = 'images\\Backgrounds\\Volcano.png';
  this.spaceBackgrondImage = "images\\Backgrounds\\spaceBackgroundForVolcanoGame.png";
  this.draw = function()
  {
    drawFromSheet(this.spaceBackgrondImage, 0,0, gameCanvas.width,gameCanvas.height);
    drawFromSheet(this.volcanoImage, 0,gameCanvas.height*0.7, gameCanvas.width,gameCanvas.height*0.3);
    //gameCanvasContext.drawImage(this.spaceBackgrondImage, 0,0, gameCanvas.width,gameCanvas.height);
    //gameCanvasContext.drawImage(this.volcanoImage, 0,gameCanvas.height*0.7, gameCanvas.width,gameCanvas.height*0.3);
  }

  this.handleAnswersOffScreen = function()
  {
    this.handleAnswersOffBottomOfScreen();
    this.handleAnswersOffTopOfScreen();
  }

  this.correctAnswerOffScreen = false;
  this.incorrectAnswerOffScreen = false;

  this.handleAnswersOffBottomOfScreen = function()
  {
    if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate > gameCanvas.height)
    {
      // amountIncorrect++;
      this.correctAnswerOffScreen = true;
      this.checkIfBothAnswersAreOffScreenAndResetIfSo();
    }
    if (promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate > gameCanvas.height)
    {
      // amountCorrect++;
      this.incorrectAnswerOffScreen = true;
      this.checkIfBothAnswersAreOffScreenAndResetIfSo();
    }
  }

  this.handleAnswersOffTopOfScreen = function()
  {
    if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate //-
        /*promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.height*/ < 0)
    {
      // amountCorrect++;
      this.correctAnswerOffScreen = true;
      this.checkIfBothAnswersAreOffScreenAndResetIfSo();
    }
    if (promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate //-
        /*promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.height*/ < 0)
    {
      // amountIncorrect++;
      this.incorrectAnswerOffScreen = true;
      this.checkIfBothAnswersAreOffScreenAndResetIfSo();
    }
  }

  this.checkIfBothAnswersAreOffScreenAndResetIfSo = function()
  {
    if (this.correctAnswerOffScreen && this.incorrectAnswerOffScreen)
    {
      this.correctAnswerOffScreen = false;
      this.incorrectAnswerOffScreen = false;

      gameClassManager.currentGame.collisionsWithAnswersManager.resetAnswers();
      gameClassManager.currentGame.correctAnswersYSpeed = 4;
      gameClassManager.currentGame.incorrectAnswersYSpeed = 4;
      promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.answerHolder = gameClassManager.currentGame.assignAnswerHolder();
      promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.answerHolder = gameClassManager.currentGame.assignAnswerHolder();
    }
  }
}
function FireLavaParticle(x,y, xVelocity,yVelocity, image)
{
  this.x = x;
  this.y = y;
  this.xVelocity = xVelocity;
  this.yVelocity = yVelocity;

  this.verticalDirection = undefined;

  this.width = 7;
  this.height = 7;

  this.alpha = 1;

  this.image = image;

  this.move = function()
  {
    this.x += this.xVelocity;
    this.y += this.yVelocity;
    this.alpha -= 0.01;
  }

  this.draw = function()
  {
    if (this.image !== undefined)
    {
      gameCanvasContext.globalAlpha = this.alpha;
      drawFromSheet(this.image, this.x,this.y, this.width,this.height);
      //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
      gameCanvasContext.globalAlpha = 1;
    }
  }
}

function FireLavaParticleManager()
{
  this.arrayOfParticles = [];
  this.arrayOfParticleImages = ['images\\sprites\\passBlock\\lavaParticle1.png','images\\sprites\\passBlock\\lavaParticle2.png','images\\sprites\\passBlock\\lavaParticle3.png','images\\sprites\\passBlock\\lavaParticle4.png'];
  this.generateAParticle = function()
  {
    let targetAnswerToAssignAParticleTo = this.pickAnAnswer();
    let particle = new FireLavaParticle(
      this.pickAnXCoordinate(targetAnswerToAssignAParticleTo)
      ,this.pickAYCoordinate(targetAnswerToAssignAParticleTo),
      this.assignXVelocity(),this.assignYVelocity(this.answerDirection), this.pickAnImage());
    this.arrayOfParticles.push(particle);
  }

  this.moveParticles = function()
  {
    for (let particleIndex = 0; particleIndex < this.arrayOfParticles.length; particleIndex++)
    {
      this.arrayOfParticles[particleIndex].move();
    }
  }

  this.drawParticles = function()
  {
    for (let particleIndex = 0; particleIndex < this.arrayOfParticles.length; particleIndex++)
    {
      if (this.arrayOfParticles[particleIndex] !== undefined)
      {
        this.arrayOfParticles[particleIndex].draw();
      }
    }
  }

  this.deleteOffScreenParticles = function()
  {
    for (let particleIndex = 0; particleIndex < this.arrayOfParticles.length; particleIndex++)
    {
      if (this.arrayOfParticles[particleIndex].y < 0 || this.arrayOfParticles[particleIndex].y > gameCanvas.height
         || this.arrayOfParticles[particleIndex].alpha < 0.1)
      {
        this.arrayOfParticles.splice(particleIndex,1);
      }
    }
  }

  this.handleParticles = function()
  {
    this.moveParticles();
    this.deleteOffScreenParticles();
  }

  this.ySpeedReference = undefined;
  this.pickAnAnswer = function()
  {
    let randomNumberForCoinFlip = Math.random();
    if (randomNumberForCoinFlip < 0.5)
    {
      this.ySpeedReference = gameClassManager.currentGame.correctAnswersYSpeed;
      return promptsAndAnswersManager.correctTargetPromptAndAnswerPairing;
    }
    else
    {
      this.ySpeedReference = gameClassManager.currentGame.incorrectAnswersYSpeed;
      return promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing;
    }
  }

  this.pickAnImage = function()
  {
    if (this.arrayOfParticleImages.length !== 0)
    {
      let randomImageIndex = getRandomIntInclusive(0, this.arrayOfParticleImages.length - 1);
      let image = this.arrayOfParticleImages[randomImageIndex];
      return image;
    }
  }

  this.pickAnXCoordinate = function(answer)
  {
    let randomX = getRandomArbitrary(answer.xCoordinate, answer.xCoordinate + 50)
    return randomX;
  }

  this.currentAnswerDirection = undefined;
  this.pickAYCoordinate = function(answer)
  {

    if (answer === promptsAndAnswersManager.correctTargetPromptAndAnswerPairing)
    {
      if (gameClassManager.currentGame.correctAnswersYSpeed > 0)
      {
        this.currentAnswerDirection = 'down';
      }
      else
      {
        this.currentAnswerDirection = 'up';
      }
    }
    else if (answer === promptsAndAnswersManager.correctTargetPromptAndAnswerPairing)
    {
      if (gameClassManager.currentGame.incorrectAnswersYSpeed > 0)
      {
        this.currentAnswerDirection = 'down';
      }
      else
      {
        this.currentAnswerDirection = 'up';
      }
    }

    let randomY = undefined;
    if (this.currentAnswerDirection === 'down')
    {
      randomY = getRandomArbitrary(answer.yCoordinate - 20, answer.yCoordinate);
    }
    else
    {
      randomY = getRandomArbitrary(answer.yCoordinate + gameClassManager.currentGame.currentAnswerHolderHeight, answer.yCoordinate + 20);
    }

    return randomY;
  }

  this.assignXVelocity = function()
  {
    return getRandomArbitrary(-1,1);
  }

  this.assignYVelocity = function(answerDirection)
  {
    let yDirection = undefined;
    if (answerDirection === 'down')
    {
      yDirection = -1;
    }
    else
    {
      yDirection = 1;
    }

    let yVelocity = getRandomArbitrary(1*yDirection,3*yDirection);
    return yVelocity;
  }
}
cVcShooterGameClass.prototype = new GameClass();
function cVcShooterGameClass()
{
  this.name = 'cVcShooter Game';
  this.FRAME_RATE = 1000/30;
  this.titleScreenData = [
	{name: "cVc", fontSize: 22, spacing: 12, x: 47, y: 270},
	{name: "Shooter", fontSize: 22, spacing: 12, x: 26, y: 300}
  ];

  this.drawTransitionText = function()
  {
    customFontFillText(['Shoot the answers!', symbolExclamationPointImage], 60,30, 50,50);
    customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' Move right'], 30,15, 350,350);
    customFontFillText(['Space bar', ' ', symbolEqualsImage, ' Shoot'], 30,15, 175,500);
    customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' Move left'], 30,15, 50,350);
  }

  this.playerCharacter = undefined;
  this.cVcManager = undefined;
  this.background = undefined;

  this.backButtonColor = 'rgb(227,227,227)';
  this.backButtonTextColor = 'brown';

  this.playerShouldBeTargetingFirstLetter = true;
  this.playerShouldBeTargetingSecondLetter = false;
  this.playerShouldBeTargetingThirdLetter = false;

  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/shootingGalleryMusic.mp3', 47.5);

  this.pregameSpecialCode = function()
  {
    gameAudio = {};
    gameAudio.targetHit = new sfxOneShot("audio/cVcSFX/targetHit1.mp3");

    gameAudio.gunPop = new sfxOneShot('audio/cVcSFX/gunPop1.mp3');
    gameAudio.gunshotBass = new sfxOneShot('audio/cVcSFX/gunshotBass1.mp3');
  };

  this.initialize = function()
  {
    this.background = new cVcShooterBackground();
    this.playerCharacter = new ShooterPlayer();
    this.cVcManager = new CVCManager();
    this.cVcManager.initializeArraysOfCVCs();
    this.setCurrentLanguageArray();
    this.cVcManager.currentCVC = this.cVcManager.chooseARandomCVC(this.currentLanguageArray);
    this.cVcManager.currentCVC.initialize();
    promptersManager.loadCurrentPrompter(imageAndAudioPrompterForCVCs);
    promptersManager.currentPrompter.loadCurrentImage(this.cVcManager.currentCVC.imageAssociation);
    promptersManager.currentPrompter.loadCurrentAudio(this.cVcManager.currentCVC.audioAssociation);
  }

  this.currentLanguageArray = undefined;
  this.setCurrentLanguageArray = function()
  {
    if (languageSelectionScreen.languageNum === 0)
    {
      this.currentLanguageArray = this.cVcManager.arrayOfEnglishCVCs;
    }
    else if (languageSelectionScreen.languageNum === 1)
    {
      this.currentLanguageArray = this.cVcManager.arrayOfMandarinCVCs;
    }
    else if (languageSelectionScreen.languageNum === 2)
    {
      this.currentLanguageArray = this.cVcManager.arrayOfCentralVietnameseCVCs;
    }
    //console.log('this.currentLanguageArray: ' + this.currentLanguageArray);
  }

  this.draw = function()
  {
    this.background.draw();
    this.playerCharacter.draw();
    if (this.playerCharacter.arrayOfGunSmokeParticles.length > 0)
    {
      for (let i = 0; i < this.playerCharacter.arrayOfGunSmokeParticles.length; i++)
      {
        this.playerCharacter.arrayOfGunSmokeParticles[i].draw();
      }
    }
    this.cVcManager.currentCVC.draw();
    drawBullets();
    promptersManager.drawPromptsWhenAppropriate();
  }

  this.update = function()
  {
    if (!promptersManager.shouldBeDrawingAPrompt &&
        fullGameStateMachine.currentState !== fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.pausedMiniGame)
    {
      moveBullets();
      for (let i = 0; i < arrayOfBullets.length; i++)
      {
        arrayOfBullets[i].handleLetterCollisions(i);
      }

      for (let i = 0; i < this.playerCharacter.arrayOfGunSmokeParticles.length; i++)
      {
        this.playerCharacter.arrayOfGunSmokeParticles[i].move();
        if (this.playerCharacter.arrayOfGunSmokeParticles[i].alpha < 0.1)
        {
          gameClassManager.currentGame.playerCharacter.arrayOfGunSmokeParticles.splice(i,1);
        }
      }
    }
  }

  this.handleLeftArrowDown = function()
  {
    this.playerCharacter.position -= 1;
    if (this.playerCharacter.position < 0)
    {
      this.playerCharacter.position = 2;
    }
  }

  this.handleRightArrowDown = function()
  {
    this.playerCharacter.position += 1;
    if (this.playerCharacter.position > 2)
    {
      this.playerCharacter.position = 0;
    }
  }

  this.handleSpaceBarDown = function()
  {
    fireBullet();
    this.playerCharacter.rotateGun();
    this.playerCharacter.generateSmoke();
  }

}

const cVcShooterGame = new cVcShooterGameClass();

function cVcShooterBackground()
{
  this.tileCount = 9;
  this.arrayOfGameBoardLetterPositions = [0,1,2];

  this.image = 'images\\Backgrounds\\ShootGallery.png';

  this.color = 'lime';

  this.draw = function()
  {
    // gameCanvasContext.fillStyle = this.color;
    // gameCanvasContext.fillRect(0,0, gameCanvas.width,gameCanvas.height);
    drawFromSheet(this.image, 0,0, gameCanvas.width,gameCanvas.height);
    //gameCanvasContext.drawImage(this.image, 0,0, gameCanvas.width,gameCanvas.height);
  }
}

function ShooterPlayer()
{
  this.position = 1;

  this.gunRotated = false;

  this.image = 'images\\sprites\\cVc shooter\\Gun.png';

  this.draw = function()
  {
    if (this.gunRotated === true)
    {
      drawFromSheet(this.image, this.position*(gameCanvas.width/3) - 3,gameCanvas.height - 150, 200,350, undefined, 15*Math.PI/180, this.position*(gameCanvas.width*0.165) - 3,gameCanvas.height);
      // gameCanvasContext.save();
      // gameCanvasContext.translate(this.position*(gameCanvas.width*0.165) - 3,gameCanvas.height);
      // gameCanvasContext.rotate(15*Math.PI/180);
      // gameCanvasContext.translate( -(this.position*(gameCanvas.width*0.165) - 3),-(gameCanvas.height) );
      // gameCanvasContext.drawImage(galleryGunImage, this.position*(gameCanvas.width/3) - 3,gameCanvas.height - 150, 200,350);
      // gameCanvasContext.restore();
    }
    else if (this.gunRotated === false)
    {
      drawFromSheet(this.image, this.position*(gameCanvas.width/3) - 3,gameCanvas.height - 150, 200,350)
      //gameCanvasContext.drawImage(galleryGunImage, this.position*(gameCanvas.width/3) - 3,gameCanvas.height - 150, 200,350);
    }

  }

  this.rotateGun = function()
  {
    this.gunRotated = true;
    setTimeout(unRotateGun, 200);
  }

  this.arrayOfGunSmokeParticles = [];
  this.generateSmoke = function()
  {
    let x = this.position*(gameCanvas.width/3) + 50;
    let y = gameCanvas.height - 175;
    let smoke = new GunSmokeParticle(x,y);
    this.arrayOfGunSmokeParticles.push(smoke);
  }
}

function unRotateGun()
{
  gameClassManager.currentGame.playerCharacter.gunRotated = false;
}

function GunSmokeParticle(x,y)
{

  this.image = 'images\\sprites\\cVc shooter\\smokeParticle.png';
  this.x = x;
  this.y = y;

  this.alpha = 1;
  this.alphaDecreaseRate = 0.99;
  this.width = getRandomArbitrary(75,125);
  this.height = getRandomArbitrary(100,150);
  this.xVelocity = getRandomArbitrary(-1,1);
  this.yVelocity = getRandomArbitrary(1,2);

  this.draw = function()
  {
    gameCanvasContext.globalAlpha = this.alpha;
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
    gameCanvasContext.globalAlpha = 1;
  }

  this.move = function()
  {
    this.x += this.xVelocity;
    this.y -= this.yVelocity;

    this.width -= 1;
    this.height -= 1;

    this.alpha *= this.alphaDecreaseRate;

  }
}

function Bullet(i)
{
  this.xPosition = cVcShooterGame.playerCharacter.position*200 + 97;
  this.yPosition = gameCanvas.height - 170;

  this.move = function()
  {
    this.yPosition -= 50;
  }

  this.draw = function()
  {
    drawFromSheet('images\\sprites\\cVc shooter\\bullet.png', this.xPosition,this.yPosition, 10,30);
    //gameCanvasContext.drawImage(galleryBulletImage, this.xPosition,this.yPosition, 10,30);
  }

  this.handleLetterCollisions = function(i)
  {
    if (this.yPosition <= 150)
    {
      if (cVcShooterGame.playerShouldBeTargetingFirstLetter &&
          this.xPosition > cVcShooterGame.cVcManager.currentCVC.firstLetterCollisionRangeLeftPoint &&
          this.xPosition < cVcShooterGame.cVcManager.currentCVC.firstLetterCollisionRangeRightPoint)
      {
        amountCorrect++;
        cVcShooterGame.playerShouldBeTargetingFirstLetter = false;
        cVcShooterGame.playerShouldBeTargetingSecondLetter = true;
        arrayOfBullets.splice(i,1);
        gameAudio.targetHit.play();
        calculateAccuracy();
        return;
      }
      else if (cVcShooterGame.playerShouldBeTargetingSecondLetter &&
               this.xPosition > cVcShooterGame.cVcManager.currentCVC.secondLetterCollisionRangeLeftPoint &&
               this.xPosition < cVcShooterGame.cVcManager.currentCVC.secondLetterCollisionRangeRightPoint)
      {
          amountCorrect++;
          cVcShooterGame.playerShouldBeTargetingSecondLetter = false;
          cVcShooterGame.playerShouldBeTargetingThirdLetter = true;
          arrayOfBullets.splice(i,1);
          gameAudio.targetHit.play();
          calculateAccuracy();
          return;
      }
      else if (cVcShooterGame.playerShouldBeTargetingThirdLetter &&
               this.xPosition > cVcShooterGame.cVcManager.currentCVC.thirdLetterCollisionRangeLeftPoint &&
               this.xPosition < cVcShooterGame.cVcManager.currentCVC.thirdLetterCollisionRangeRightPoint)
      {
        {
          amountCorrect++;
          cVcShooterGame.playerShouldBeTargetingThirdLetter = false;
          arrayOfBullets = [];
          gameAudio.targetHit.play();
          calculateAccuracy();
          cVcShooterGame.cVcManager.currentCVC = cVcShooterGame.cVcManager.chooseARandomCVC(cVcShooterGame.currentLanguageArray);
          cVcShooterGame.cVcManager.currentCVC.initialize();
          promptersManager.loadCurrentPrompter(imageAndAudioPrompterForCVCs);
          promptersManager.currentPrompter.loadCurrentImage(cVcShooterGame.cVcManager.currentCVC.imageAssociation);
          promptersManager.currentPrompter.loadCurrentAudio(cVcShooterGame.cVcManager.currentCVC.audioAssociation);
          cVcShooterGame.playerShouldBeTargetingFirstLetter = true;
          // promptersManager.currentPrompter.togglePromptingBoolean();
          promptersManager.currentPrompter.currentWidth = 150;
          promptersManager.currentPrompter.currentHeight = 150;
          if (nextGame === SINGLE_PLAYER_RANDOM || nextGame === TWO_PLAYER_RANDOM)
          {
            cycleCount++;
            if (cycleCount === CYCLE_LIMIT_FOR_RANDOM_GAME_RELOAD)
            {
              loadRandomGame();
              cycleCount = 0;
            }
          }

          promptersManager.currentPrompter.promptThePlayer();
          return;
        }
      }
      else
      {
        amountIncorrect++;
        arrayOfBullets.splice(i,1);
        calculateAccuracy();
        return;
      }//end of letter order checks and collision range checks
    }//end of y position check
  }//end of handleLetterCollisions
}//end of bulletClass

var arrayOfBullets = [];

function fireBullet()
{
  let bullet = new Bullet();
  arrayOfBullets.push(bullet);
  gameAudio.gunPop.play();
  gameAudio.gunshotBass.play();
}

function moveBullets()
{
  for (let i = 0; i < arrayOfBullets.length; i++)
  {
    arrayOfBullets[i].move();
  }
}

function drawBullets()
{
  for (let i = 0; i < arrayOfBullets.length; i++)
  {
    arrayOfBullets[i].draw();
  }
}

function handleBulletCollisionsWithLetters()
{
  for (let i = 0; i < arrayOfBullets.length; i++)
  {
    arrayOfBullets[i].handleLetterCollisions();
  }

}

function cVc(firstLetter,secondLetter,thirdLetter, imageAssociation, audioAssociation)
{
  this.backgroundImage = 'images\\Backgrounds\\target.png';

  this.imageAssociation = imageAssociation;
  this.audioAssociation = audioAssociation;

  this.firstLetter = firstLetter;//string
  this.firstLetterPosition = undefined;//integer from arrayOfLetterPositions
  this.firstLetterCollisionRangeLeftPoint = undefined;
  this.firstLetterCollisionRangeRightPoint = undefined;

  this.secondLetter = secondLetter;
  this.secondLetterPosition = undefined;
  this.secondLetterCollisionRangeLeftPoint = undefined;
  this.secondLetterCollisionRangeRightPoint = undefined;

  this.thirdLetter = thirdLetter;
  this.thirdLetterPosition = undefined;
  this.thirdLetterCollisionRangeLeftPoint = undefined;
  this.thirdLetterCollisionRangeRightPoint = undefined;

  this.arrayOfLetterPositions = [this.firstLetterPosition,this.secondLetterPosition,this.thirdLetterPosition];

  this.assignLetterPositions = function()
  {
    cVcShooterGame.background.arrayOfGameBoardLetterPositions = [0,1,2];
    let arrayOfGameBoardLetterPositionsLength = 3;
    for (let i = 0; i < arrayOfGameBoardLetterPositionsLength; i++)
    {
      let randomArrayOfLetterPositionsIndex = Math.floor(Math.random()*cVcShooterGame.background.arrayOfGameBoardLetterPositions.length);
      this.arrayOfLetterPositions[i] = cVcShooterGame.background.arrayOfGameBoardLetterPositions[randomArrayOfLetterPositionsIndex];
      cVcShooterGame.background.arrayOfGameBoardLetterPositions.splice(randomArrayOfLetterPositionsIndex,1);
    }
  }

  this.defineCollisionRanges = function()
  {
    this.firstLetterCollisionRangeLeftPoint = this.arrayOfLetterPositions[0] * 199;
    this.firstLetterCollisionRangeRightPoint = this.arrayOfLetterPositions[0] * 200 + 199;

    this.secondLetterCollisionRangeLeftPoint = this.arrayOfLetterPositions[1] * 199;
    this.secondLetterCollisionRangeRightPoint = this.arrayOfLetterPositions[1] * 200 + 199;

    this.thirdLetterCollisionRangeLeftPoint = this.arrayOfLetterPositions[2] * 199;
    this.thirdLetterCollisionRangeRightPoint = this.arrayOfLetterPositions[2] * 200 + 199;
  }

  this.initialize = function()
  {
    this.assignLetterPositions();
    this.defineCollisionRanges();
  }

  this.draw = function()
  {
    gameCanvasContext.fillStyle = 'black';
    gameCanvasContext.font = '30px Helvetica';

    if (cVcShooterGame.playerShouldBeTargetingFirstLetter)
    {

      //gameCanvasContext.drawImage(this.backgroundImage, this.arrayOfLetterPositions[0]*200 + 55,100);
      drawFromSheet(this.backgroundImage, this.arrayOfLetterPositions[0]*200 + 55,100);
      gameCanvasContext.fillText(this.firstLetter, this.arrayOfLetterPositions[0]*200 + 102,153);

      //gameCanvasContext.drawImage(this.backgroundImage, this.arrayOfLetterPositions[1]*200 + 55,100);
      drawFromSheet(this.backgroundImage, this.arrayOfLetterPositions[1]*200 + 55,100);
      gameCanvasContext.fillText(this.secondLetter, this.arrayOfLetterPositions[1]*200 + 102,153);

      //gameCanvasContext.drawImage(this.backgroundImage, this.arrayOfLetterPositions[2]*200 + 55,100);
      drawFromSheet(this.backgroundImage, this.arrayOfLetterPositions[2]*200 + 55,100);
      gameCanvasContext.fillText(this.thirdLetter, this.arrayOfLetterPositions[2]*200 + 102,153);
    }
    else if (cVcShooterGame.playerShouldBeTargetingSecondLetter)
    {
      //gameCanvasContext.drawImage(this.backgroundImage, this.arrayOfLetterPositions[1]*200 + 55,100);
      drawFromSheet(this.backgroundImage, this.arrayOfLetterPositions[1]*200 + 55,100);
      gameCanvasContext.fillText(this.secondLetter, this.arrayOfLetterPositions[1]*200 + 102,153);
      //gameCanvasContext.drawImage(this.backgroundImage, this.arrayOfLetterPositions[2]*200 + 55,100);
      drawFromSheet(this.backgroundImage, this.arrayOfLetterPositions[2]*200 + 55,100);
      gameCanvasContext.fillText(this.thirdLetter, this.arrayOfLetterPositions[2]*200 + 102,153);
    }
    else if (cVcShooterGame.playerShouldBeTargetingThirdLetter)
    {
      //gameCanvasContext.drawImage(this.backgroundImage, this.arrayOfLetterPositions[2]*200 + 55,100);
      drawFromSheet(this.backgroundImage, this.arrayOfLetterPositions[2]*200 + 55,100);
      gameCanvasContext.fillText(this.thirdLetter, this.arrayOfLetterPositions[2]*200 + 102,153);
    }
    else
    {
      //gameCanvasContext.fillText("You win!!!", gameCanvas.width/2,gameCanvas.height/2);
    }
  }
}

function CVCManager()
{
  //english section
  this.CVCcat = new cVc('c','a','t', "images\\sprites\\PromptsAndAnswers\\cat.png", promptAudio.blendedCat);
  this.CVCcot = new cVc('c','o','t', "images\\sprites\\PromptsAndAnswers\\cot.png", promptAudio.blendedCot);

  //mandarin section
  this.CVCMandarinHowAreYou = new cVc('你','好','吗', "images\\sprites\\PromptsAndAnswers\\Mandarin\\howAreYou.png", promptAudio.mandarinHowAreYou);
  this.CVCMandarinHowAmI = new cVc('我','怎么','样', "images\\sprites\\PromptsAndAnswers\\Mandarin\\howAmI.png", promptAudio.mandarinHowAmI);
  this.CVCMandarinHowAreThey = new cVc('他们','怎么','样', "images\\sprites\\PromptsAndAnswers\\Mandarin\\howAreThey.png", promptAudio.mandarinHowAreThey);
  this.CVCMandarinHowAreWe = new cVc('我们','怎么','样', "images\\sprites\\PromptsAndAnswers\\Mandarin\\howAreWe.png", promptAudio.mandarinHowAreWe);
  this.CVCMandarinHowIsHe = new cVc('他','怎么','样', "images\\sprites\\PromptsAndAnswers\\Mandarin\\howIsHe.png", promptAudio.mandarinHowIsHe);
  this.CVCMandarinHowIsShe = new cVc('她','怎么','样', "images\\sprites\\PromptsAndAnswers\\Mandarin\\howIsShe.png", promptAudio.mandarinHowIsShe);
  this.CVCMandarinHowIsItDoing = new cVc('它','怎么','样', "images\\sprites\\PromptsAndAnswers\\Mandarin\\howIsItDoing.png", promptAudio.mandarinHowIsHe);
  this.CVCMandarinImVeryGood = new cVc('我','很','好', "images\\sprites\\PromptsAndAnswers\\Mandarin\\imVeryGood.png", promptAudio.mandarinImVeryGood);
  this.CVCMandarinNotBad = new cVc('还','不','错', "images\\sprites\\PromptsAndAnswers\\Mandarin\\notBad.png", promptAudio.mandarinNotBad);
  this.CVCMandarinImAlsoVeryGood = new cVc('我','也','很好', "images\\sprites\\PromptsAndAnswers\\Mandarin\\imAlsoVeryGood.png", promptAudio.mandarinImAlsoVeryGood);
  this.CVCMandarinVeryNiceToMeetYou = new cVc('很','高兴','认识你', "images\\sprites\\PromptsAndAnswers\\Mandarin\\niceToMeetYou.png", promptAudio.mandarinVeryNiceToMeetYou);
  this.CVCMandarinWhereAreYouFrom = new cVc('你是','哪里','人', "images\\sprites\\PromptsAndAnswers\\Mandarin\\whereAreYouFrom.png", promptAudio.mandarinWhereAreYouFrom);
  this.CVCMandarinImFromAmerica = new cVc('我','来自','美国', "images\\sprites\\PromptsAndAnswers\\Mandarin\\iAmFromAmerica.png", promptAudio.mandarinImFromAmerica);
  this.CVCMandarinWhatDoYouLikeToDo = new cVc('你喜欢','做','什么', "images\\sprites\\PromptsAndAnswers\\Mandarin\\whatDoYouLikeToDo.png", promptAudio.mandarinWhatDoYouLikeToDo);
  this.CVCMandarinWhatPartOfChina = new cVc('你来自','中国','哪里', "images\\sprites\\PromptsAndAnswers\\Mandarin\\whatPartOfChina.png", promptAudio.mandarinWhatPartOfChina);
  this.CVCMandarinWhereDoYouLive = new cVc('你','住在','哪里', "images\\sprites\\PromptsAndAnswers\\Mandarin\\whereDoYouLive.png", promptAudio.mandarinWhereDoYouLive);
  this.CVCMandarinILiveInVietnam = new cVc('我','住在','越南', "images\\sprites\\PromptsAndAnswers\\Mandarin\\iLiveInVietnam.png", promptAudio.mandarinILiveInVietnam);
  this.CVCMandarinMeToo = new cVc('我','也','是', "images\\sprites\\PromptsAndAnswers\\Mandarin\\meToo.png", promptAudio.mandarinMeToo);
  this.CVCMandarinILikeProgramming = new cVc('我','喜欢','编程', "images\\sprites\\PromptsAndAnswers\\Mandarin\\iLikeProgramming.png", promptAudio.mandarinILikeProgramming);
  this.CVCMandarinIAlsoLikeFitness = new cVc('我也','喜欢','健身', "images\\sprites\\PromptsAndAnswers\\Mandarin\\iAlsoLikeFitness.png", promptAudio.mandarinIAlsoLikeFitness);
  this.CVCMandarinWhatIsYourJob = new cVc('你的','工作','是什么', "images\\sprites\\PromptsAndAnswers\\Mandarin\\whatIsYourJob.png", promptAudio.mandarinWhatIsYourJob);
  this.CVCMandarinIAmATeacher = new cVc('我','是','老师', "images\\sprites\\PromptsAndAnswers\\Mandarin\\iAmATeacher.png", promptAudio.mandarinIAmATeacher);
  this.CVCMandarinAnythingElse = new cVc('还','有','吗', "images\\sprites\\PromptsAndAnswers\\Mandarin\\somethingElse.png", promptAudio.mandarinAnythingElse);
  this.CVCMandarinILikeWatchingMovies = new cVc('我','喜欢','看电影', "images\\sprites\\PromptsAndAnswers\\Mandarin\\iLikeWatchingMovies.png", promptAudio.mandarinILikeWatchingMovies);
  this.CVCMandarinILikeRockClimbing = new cVc('我','喜欢','攀岩', "images\\sprites\\PromptsAndAnswers\\Mandarin\\iLikeRockClimbing.png", promptAudio.mandarinILikeRockClimbing);
  this.CVCMandarinWhatIsYourName = new cVc('你叫','什么','名字', "images\\sprites\\PromptsAndAnswers\\Mandarin\\whatIsYourName.png", promptAudio.mandarinWhatIsYourName);
  this.CVCMandarinMyNameIsSteven = new cVc('我叫','史','蒂文', "images\\sprites\\PromptsAndAnswers\\Mandarin\\myNameIsSteven.png", promptAudio.mandarinMyNameIsSteven);
  this.CVCMandarinHowOldAreYou = new cVc('你','几','岁', "images\\sprites\\PromptsAndAnswers\\Mandarin\\howOldAreYou.png", promptAudio.mandarinHowOldAreYou);
  this.CVCMandarinIAm37YearsOld = new cVc('我今年','三十七','岁', "images\\sprites\\PromptsAndAnswers\\Mandarin\\iAm37.png", promptAudio.mandarinIAm37YearsOld);

  //central vietnamese Section
  this.CVCCentralVietnameseHelloMan = new cVc('xin', 'chào', 'anh', "images\\sprites\\PromptsAndAnswers\\CentralVietnamese\\helloMan.png", promptAudio.centralVietnameseHelloMan);
  this.CVCCentralVietnameseHelloWoman = new cVc('xin', 'chào', 'em', "images\\sprites\\PromptsAndAnswers\\CentralVietnamese\\helloWoman.png", promptAudio.centralVietnameseHelloWoman);
  this.CVCCentralVietnameseWhatsYourNameGeneral = new cVc('bạn', 'tên', 'là gì', "images\\sprites\\PromptsAndAnswers\\CentralVietnamese\\whatIsYourNameBrother.png", promptAudio.centralVietnameseWhatsYourNameGeneral);
  this.CVCCentralVietnameseWhatsYourNameBrother = new cVc('anh', 'tên', 'là gì', "images\\sprites\\PromptsAndAnswers\\CentralVietnamese\\whatIsYourNameBrother.png", promptAudio.centralVietnameseWhatsYourNameBrother);
  this.CVCCentralVietnameseWhatsYourNameBaby = new cVc('em', 'tên', 'là gì', "images\\sprites\\PromptsAndAnswers\\CentralVietnamese\\whatIsYourNameBaby.png", promptAudio.centralVietnameseWhatsYourNameBaby);
  this.CVCCentralVietnameseMyNameIsSteven = new cVc('tôi', 'tên', 'là Steven', "images\\sprites\\PromptsAndAnswers\\Mandarin\\myNameIsSteven.png", promptAudio.centralVietnameseMyNameIsSteven);
  this.CVCCentralVietnameseWhereAreYouFrom = new cVc('anh là','người nước','nào', "images\\sprites\\PromptsAndAnswers\\Mandarin\\whereAreYouFrom.png", promptAudio.centralVietnameseWhereAreYouFrom);
  this.CVCCentralVietnameseIAmFromAmerica = new cVc('tôi là','người', 'Mỹ', "images\\sprites\\PromptsAndAnswers\\Mandarin\\iAmFromAmerica.png", promptAudio.centralVietnameseIAmFromAmerica);
  this.CVCCentralVietnameseVeryNiceToMeetYou = new cVc('rất vui', 'được', 'bạn', "images\\sprites\\PromptsAndAnswers\\Mandarin\\niceToMeetYou.png", promptAudio.centralVietnameseVeryNiceToMeetYou);
  this.CVCCentralVietnameseWhatDoYouLikeToEat = new cVc('Bạn', 'thích ăn', 'gì', "images\\sprites\\PromptsAndAnswers\\CentralVietnamese\\whatDoYouLikeToEat.png", promptAudio.centralVietnameseWhatDoYouLikeToEat);
  this.CVCCentralVietnameseILikeToEatVegetarian = new cVc('tôi', 'thích ăn', 'chay', "images\\sprites\\PromptsAndAnswers\\CentralVietnamese\\iLikeToEatVegetarian.png", promptAudio.centralVietnameseILikeToEatVegetarian);



  this.arrayOfEnglishCVCs = [];
  this.arrayOfMandarinCVCs = [];
  this.arrayOfCentralVietnameseCVCs = [];

  this.initializeArraysOfCVCs = function()
  {
    //english
    this.arrayOfEnglishCVCs.push(this.CVCcat);
    this.arrayOfEnglishCVCs.push(this.CVCcot);


    //mandarin

    // this.arrayOfMandarinCVCs.push(this.CVCMandarinHowAreYou);
    // this.arrayOfMandarinCVCs.push(this.CVCMandarinHowAmI);
    // this.arrayOfMandarinCVCs.push(this.CVCMandarinHowAreThey);
    // this.arrayOfMandarinCVCs.push(this.CVCMandarinHowAreWe);
    // this.arrayOfMandarinCVCs.push(this.CVCMandarinHowIsHe);
    // this.arrayOfMandarinCVCs.push(this.CVCMandarinHowIsShe);
    // this.arrayOfMandarinCVCs.push(this.CVCMandarinHowIsItDoing);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinImVeryGood);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinNotBad);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinImAlsoVeryGood);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinVeryNiceToMeetYou);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinWhereAreYouFrom);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinImFromAmerica);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinWhatDoYouLikeToDo);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinWhatPartOfChina);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinWhereDoYouLive);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinILiveInVietnam);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinMeToo);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinILikeProgramming);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinIAlsoLikeFitness);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinIAmATeacher);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinAnythingElse);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinILikeWatchingMovies);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinILikeRockClimbing);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinWhatIsYourName);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinMyNameIsSteven);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinHowOldAreYou);
    this.arrayOfMandarinCVCs.push(this.CVCMandarinIAm37YearsOld);

    //central vietnamese
    this.arrayOfCentralVietnameseCVCs.push(this.CVCCentralVietnameseHelloWoman);
    this.arrayOfCentralVietnameseCVCs.push(this.CVCCentralVietnameseHelloMan);
    this.arrayOfCentralVietnameseCVCs.push(this.CVCCentralVietnameseWhatsYourNameGeneral);
    this.arrayOfCentralVietnameseCVCs.push(this.CVCCentralVietnameseWhatsYourNameBrother);
    this.arrayOfCentralVietnameseCVCs.push(this.CVCCentralVietnameseWhatsYourNameBaby);
    this.arrayOfCentralVietnameseCVCs.push(this.CVCCentralVietnameseMyNameIsSteven);
    this.arrayOfCentralVietnameseCVCs.push(this.CVCCentralVietnameseWhereAreYouFrom);
    this.arrayOfCentralVietnameseCVCs.push(this.CVCCentralVietnameseIAmFromAmerica);
    this.arrayOfCentralVietnameseCVCs.push(this.CVCCentralVietnameseVeryNiceToMeetYou);


  }

  this.chooseARandomCVC = function(currentLanguageArray)
  {
    let randomArrayOfCVCsIndex = getRandomIntInclusive(0,currentLanguageArray.length - 1);
    return currentLanguageArray[randomArrayOfCVCsIndex];
  }

  this.currentCVC = undefined;
}
SpaceShooterCollisionsManager = function() {
    CollisionsWithAnswersManager.call(this);

    this.resetAnswers = function()
    {
        CollisionsWithAnswersManager.prototype.resetAnswers();
        gameClassManager.currentGame.arrayOfBullets = [];
    }
}
SpaceShooterCollisionsManager.prototype = new CollisionsWithAnswersManager();
SpaceShooterCollisionsManager.prototype.constructor = SpaceShooterCollisionsManager;var spaceShooterStartingXCoordinate = 100;
var spaceShooterStartingYCoordinate = 100;
var spaceShooterPlayerSpeed = 7;

var spaceShooterLetterSpawnRate = 2000;
var spaceShooterLetterColor = 'red';

spaceShooterGameClass.prototype = new GameClass();
function spaceShooterGameClass() {
	this.name = 'spaceShooter';
	//shots section
	this.arrayOfBullets = [];
	this.bulletDimensionX = undefined;
	this.bulletDimensionY = undefined;;
	var bulletSpeed = 25;
	this.playerCharacter = undefined;
	this.defineAndInitializePlayerCharacter = function()
	{
		this.playerCharacter = new Spaceship();
		this.playerCharacter.initialize();
	}

	this.textAnswerFontSize = '30';
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';
	this.titleScreenData = [
	  {name: "Space", fontSize: 25, spacing: 12, x: 130, y: 270},
	  {name: "Shooter", fontSize: 17, spacing: 10, x: 129, y: 305}
	];

	this.drawTransitionText = function()
  {
    customFontFillText(['Shoot the answers', symbolExclamationPointImage], 60,30, 50,50);
    customFontFillText([upArrowImage, ' ', symbolEqualsImage, ' Fly up'], 30,15, 210,200);
    customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' Fly right'], 30,15, 350,350);
    customFontFillText([downArrowImage, ' ', symbolEqualsImage, ' Fly down'], 30,15, 200,500);
    customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' Fly left'], 30,15, 50,350);
		customFontFillText(['Space Bar ',  symbolEqualsImage, ' Shoot'], 30,15, 175,650);
  }

	this.imageAnswerHolderWidth = undefined;
  this.imageAnswerHolderHeight = undefined;

	this.audioImageAnswerHolderWidth = undefined;
  this.audioImageAnswerHolderHeight = undefined;

  this.correctTextAnswerHolderWidth = undefined;
  this.incorrectTextAnswerHolderWidth = undefined;

	this.spaceRockAnswerHolder1 = undefined;
	this.spaceRockAnswerHolder2 = undefined;
	this.arrayOfAnswerHolders = [];

	this.FRAME_RATE = 1000/30;

	this.spaceRockParticleManager = undefined;
	this.shipSmokeManager = undefined;

	this.collisionsWithAnswersManager = new SpaceShooterCollisionsManager();
	this.rocketExplosionsManager = undefined;


  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/200421.mp3', 90.6);

  this.pregameSpecialCode = function()
  {
    //console.log("pregame special code for space shooter");
	// playerShouldSeeTitleScreen = false;
  //   fullGameStateMachine.playingAGameState = true;
  //   levelIsTransitioning = true;

    gameAudio = {};
    gameAudio.shoot = new sfxOneShot("audio/SpaceShot01.mp3");
		gameAudio.laserShoot = new sfxOneShot('audio/V/laser.mp3');
		gameAudio.move = new sfxLooping("audio/SpaceMove.mp3");
		gameAudio.rockExplosion = new sfxOneShot('audio/V/explosion.mp3');
  };

	this.superInitialize = function()
	{
		this.bulletDimensionX = 25;
		this.bulletDimensionY = 15;

		this.backgroundPic1XCoordinate = 0;
		this.backgroundPic2XCoordinate = gameCanvas.width;
		this.jupiter1XCoordinate = gameCanvas.width*0.2;
		this.jupiter2XCoordinate = gameCanvas.width*0.2 + gameCanvas.width;

		this.imageAnswerHolderWidth = gameCanvas.width/4;
		this.imageAnswerHolderHeight = gameCanvas.height/5;
		this.audioImageAnswerHolderWidth = gameCanvas.width/5;
    this.audioImageAnswerHolderHeight = gameCanvas.height/6;

		this.spaceRockParticleManager = new SpaceRockParticleManager();
		this.rocketExplosionsManager = new RocketExplosionsManager();
		this.shipSmokeManager = new ShipSmokeManager();
		this.shipSmokerInterval = setInterval(this.shipSmokeManager.generateSmoke,250);

		this.spaceRockAnswerHolder1 = new SpaceRockAnswerHolder('images\\sprites\\spaceShooter\\spaceRock.png');
		this.spaceRockAnswerHolder2 = new SpaceRockAnswerHolder('images\\sprites\\spaceShooter\\spaceRock2.png');
		this.arrayOfAnswerHolders.push(this.spaceRockAnswerHolder1);
		this.arrayOfAnswerHolders.push(this.spaceRockAnswerHolder2);
		// initializePromptAndAnswerObjects();
    // promptsAndAnswersManager.setOrResetPromptsAndAnswers();
    promptersManager.loadAppropriatePrompterBasedOnCurrentPromptsDataType();
	}

	this.update = function()
	{
		this.playerCharacter.move();
		this.moveBullets();
		this.scrollBackgroundsFromRightToLeft();
		this.handleBackgroundPicsOffScreen();

		this.moveAnswers();
		this.handleAnswersOffScreen();
		this.handleBulletCollisionsWithAnswers();
		this.handleBulletsOffScreen();

		this.spaceRockParticleManager.updateParticles();
		this.spaceRockParticleManager.moveParticles();

		this.rocketExplosionsManager.updateExplosions();
		this.rocketExplosionsManager.handleFadedExplosions();

		this.shipSmokeManager.updateSmoke();
		this.shipSmokeManager.deleteFadedSmoke();
	};

	this.assignAnswerHolder = function()
  {
      let randomNumber = getRandomIntInclusive(0, this.arrayOfAnswerHolders.length - 1);
      return this.arrayOfAnswerHolders[randomNumber];
  }

	this.moveBullets = function()
	{
		for (var bulletIndex = 0; bulletIndex < this.arrayOfBullets.length; bulletIndex++)
		{
			this.arrayOfBullets[bulletIndex].x+=bulletSpeed;
		}
	}

	this.draw = function()
	{
		this.drawBackground();
		this.playerCharacter.draw();
		this.drawBullets();

		this.rocketExplosionsManager.drawExplosions();
		this.shipSmokeManager.drawSmoke();

		drawAnswersManager.draw();
    promptersManager.drawPromptsWhenAppropriate();

		this.spaceRockParticleManager.drawParticles();

	};

	this.answersXSpeed = -3;

	this.moveAnswers = function()
  {
    promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate += this.answersXSpeed;
    promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate += this.answersXSpeed;
  }

	this.handleAnswersOffScreen = function()
  {
    if (promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate > gameCanvas.width)
    {
      promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate = -10;
    }
    else if (promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate < -10)
    {
      promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate = gameCanvas.width;
    }

    if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate > gameCanvas.width)
    {
      promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate = -10;
    }
    else if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate < -10)
    {
      promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate = gameCanvas.width;
    }
  }

	this.drawBullets = function()
	{
		let bulletImage = rocketImage;
		gameCanvasContext.fillStyle = 'white';
		for (var bulletIndex = 0; bulletIndex < this.arrayOfBullets.length; bulletIndex++)
		{
			// gameCanvasContext.fillRect(this.arrayOfBullets[bulletIndex].x,this.arrayOfBullets[bulletIndex].y,
			// 						   this.bulletDimensionX,this.bulletDimensionY);
			drawFromSheet('images\\sprites\\spaceShooter\\rocket.png', this.arrayOfBullets[bulletIndex].x,this.arrayOfBullets[bulletIndex].y,
									   this.bulletDimensionX,this.bulletDimensionY)
			// gameCanvasContext.drawImage('images\\sprites\\spaceShooter\\rocket.png', this.arrayOfBullets[bulletIndex].x,this.arrayOfBullets[bulletIndex].y,
			// 						   this.bulletDimensionX,this.bulletDimensionY);
		}
	}

	this.backgroundPic1XCoordinate = undefined;
	this.backgroundPic2XCoordinate = undefined;
	this.jupiter1XCoordinate = undefined;
	this.jupiter2XCoordinate = undefined;//defined in superInitialize to pull gameCanvas width/height

	this.drawBackground = function()
	{
		drawFromSheet('images\\Backgrounds\\SpaceWithJupiter1.png', this.backgroundPic1XCoordinate,0, gameCanvas.width,gameCanvas.height);
		drawFromSheet('images\\Backgrounds\\SpaceWithJupiter2.png', this.backgroundPic2XCoordinate,0, gameCanvas.width,gameCanvas.height);
		//gameCanvasContext.drawImage(spaceShooterBackgroundImage, this.backgroundPic1XCoordinate,0, gameCanvas.width,gameCanvas.height);
		//gameCanvasContext.drawImage(spaceShooterBackgroundImage2, this.backgroundPic2XCoordinate,0, gameCanvas.width,gameCanvas.height);
	};

	this.scrollBackgroundsFromRightToLeft = function()
	{
		this.backgroundPic1XCoordinate -= 5;
		this.backgroundPic2XCoordinate -= 5;
		this.jupiter1XCoordinate -= 5;
		this.jupiter2XCoordinate -= 5;
	}

	this.handleBackgroundPicsOffScreen = function()
	{
		if (this.backgroundPic1XCoordinate + gameCanvas.width < 0)
		{
			this.backgroundPic1XCoordinate = gameCanvas.width;
		}
		if (this.backgroundPic2XCoordinate + gameCanvas.width < 0)
		{
			this.backgroundPic2XCoordinate = gameCanvas.width;
		}
	}

	this.handleLeftArrowDown = function()
	{
		inputManager.leftArrowIsBeingHeld = true;
		gameAudio.move.play();
	}

	this.handleUpArrowDown = function()
	{
		inputManager.upArrowIsBeingHeld = true;
		gameAudio.move.play();
	}

	this.handleRightArrowDown = function()
	{
		inputManager.rightArrowIsBeingHeld = true;
		gameAudio.move.play();
	}

	this.handleDownArrowDown = function()
	{
		inputManager.downArrowIsBeingHeld = true;
		gameAudio.move.play();
	}

	this.handleLeftArrowUp = function()
	{
		inputManager.leftArrowIsBeingHeld = false;
		gameAudio.move.stop();
	}

	this.handleUpArrowUp = function()
	{
		inputManager.upArrowIsBeingHeld = false;
		gameAudio.move.stop();
	}

	this.handleRightArrowUp = function()
	{
		inputManager.rightArrowIsBeingHeld = false;
		gameAudio.move.stop();
	}

	this.handleDownArrowUp = function()
	{
		inputManager.downArrowIsBeingHeld = false;
		gameAudio.move.stop();
	}

	this.handleSpaceBarDown = function()
	{
		this.arrayOfBullets.push({x:this.playerCharacter.x + this.playerCharacter.width,
												 y:this.playerCharacter.y + this.playerCharacter.height/2 - this.bulletDimensionY/2,
											 	 width: this.bulletDimensionX, height: this.bulletDimensionY});
		gameAudio.shoot.play();

	}

	this.handleBulletCollisionsWithAnswers = function()
	{
		if (this.arrayOfBullets.length !== 0)
		{
			for (let bulletIndex = 0; bulletIndex < this.arrayOfBullets.length; bulletIndex++)
			{
				this.collisionsWithAnswersManager.handleCollisionsWithAnswers(this.arrayOfBullets[bulletIndex]);

			}
		}
	}

	this.handleBulletsOffScreen = function()
	{
		for (let bulletIndex = 0; bulletIndex < this.arrayOfBullets.length; bulletIndex++)
		{
			if (this.arrayOfBullets[bulletIndex].x > gameCanvas.width)
			{
				this.arrayOfBullets.splice(this.arrayOfBullets[bulletIndex],1);
			}
		}
	}
};

const spaceShooterGame = new spaceShooterGameClass();

function SpaceRockAnswerHolder(image)
{
	this.image = image;
}
function Spaceship()
{
  this.width = undefined;
	this.height = undefined;

  this.x = 100;
  this.y = 100;

  this.initialize = function()
  {
    this.width = gameCanvas.width/10;
    this.height = gameCanvas.height/10;
  }

  this.draw = function()
	{
    drawFromSheet('images\\sprites\\spaceShooter\\spaceship.png', this.x,this.y, this.width,this.height);
		// gameCanvasContext.drawImage(spaceshipImage, this.x,this.y, this.width,this.height);
	};

  this.move = function()
	{
		//console.log('inside space shooter movePlayer');
		if (inputManager.upArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.y -= spaceShooterPlayerSpeed;
		}
		if (inputManager.rightArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.x += spaceShooterPlayerSpeed;
		}
		if (inputManager.downArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.y += spaceShooterPlayerSpeed;
		}
		if (inputManager.leftArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.x -= spaceShooterPlayerSpeed;
		}
		this.handleShipAtCanvasBoundaries();
	};

	this.handleShipAtCanvasBoundaries = function()
	{
			if (gameClassManager.currentGame.playerCharacter.x + this.playerCharacterWidth >= gameCanvas.width)
			{
				gameClassManager.currentGame.playerCharacter.x = gameCanvas.width - this.playerCharacterHeight;
			}
			if (gameClassManager.currentGame.playerCharacter.x <= 0)
			{
				gameClassManager.currentGame.playerCharacter.x = 0;
			}
			if (gameClassManager.currentGame.playerCharacter.y + this.playerCharacterHeight >= gameCanvas.height)
			{
				gameClassManager.currentGame.playerCharacter.y = gameCanvas.height - this.playerCharacterHeight;
			}
			if (gameClassManager.currentGame.playerCharacter.y <= 0)
			{
				gameClassManager.currentGame.playerCharacter.y = 0
			}
	}
}
function SpaceRockParticle(x,y, xVelocity,yVelocity, image)
{
  this.x = x;
  this.y = y;
  this.xVelocity = xVelocity;
  this.yVelocity = yVelocity;

  this.width = 7;
  this.height = 7;


  this.image = image;

  this.move = function()
  {

    this.x += this.xVelocity;
    this.y += this.yVelocity;
  }

  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
  }
}


function SpaceRockParticleManager()
{
  this.arrayOfGroupsOfParticles = [];
  this.createAGroupOfParticles = function()
  {
    let groupOfParticles = [];
    let randomAmountOfParticles = getRandomIntInclusive(15, 30);

    let currentCollidedAnswer = gameClassManager.currentGame.collisionsWithAnswersManager.currentCollidedAnswer;
    let rockCenterX = undefined;
    let rockCenterY = undefined;
    if (currentCollidedAnswer === promptsAndAnswersManager.correctTargetPromptAndAnswerPairing)
    {
      rockCenterX = drawAnswersManager.currentCorrectAnswerHolderX + drawAnswersManager.currentCorrectAnswerHolderWidth/2;
      rockCenterY = drawAnswersManager.currentCorrectAnswerHolderY + drawAnswersManager.currentCorrectAnswerHolderHeight/2;
    }
    else if (currentCollidedAnswer === promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing){
      console.log('inside create incorrect collided answer');

      rockCenterX = drawAnswersManager.currentIncorrectAnswerHolderX + drawAnswersManager.currentIncorrectAnswerHolderWidth/2;
      rockCenterY = drawAnswersManager.currentIncorrectAnswerHolderY + drawAnswersManager.currentIncorrectAnswerHolderHeight/2;
    }

    for (let particleIndex = 0; particleIndex < randomAmountOfParticles; particleIndex++)
    {
      let xVelocity = getRandomArbitrary(-7, 7);
      let yVelocity = getRandomArbitrary(-7, 7);

      let particle = new SpaceRockParticle(rockCenterX,rockCenterY, xVelocity,yVelocity, 'images\\sprites\\Jumper\\jumperGroundParticle.png');
      groupOfParticles.push(particle);
    }
    this.arrayOfGroupsOfParticles.push(groupOfParticles);
  }

  this.updateParticles = function()
  {
    if (this.arrayOfGroupsOfParticles.length === 0)
    {
      return;
    }
    else
    {

      for (let groupsOfParticlesIndex = 0; groupsOfParticlesIndex < this.arrayOfGroupsOfParticles.length; groupsOfParticlesIndex++)
      {
        for (let individualParticlesIndex = 0; individualParticlesIndex < this.arrayOfGroupsOfParticles[groupsOfParticlesIndex].length; individualParticlesIndex++)
        {

          if (this.arrayOfGroupsOfParticles[groupsOfParticlesIndex][individualParticlesIndex].y > gameCanvas.height ||
              this.arrayOfGroupsOfParticles[groupsOfParticlesIndex][individualParticlesIndex].y < 0 ||
              this.arrayOfGroupsOfParticles[groupsOfParticlesIndex][individualParticlesIndex].x < 0 ||
              this.arrayOfGroupsOfParticles[groupsOfParticlesIndex][individualParticlesIndex].x > gameCanvas.width)
          {
            this.arrayOfGroupsOfParticles[groupsOfParticlesIndex].splice(individualParticlesIndex,1);
          }
        }
      }
    }

  }

  this.moveParticles = function()
  {
    if (this.arrayOfGroupsOfParticles.length === 0)
    {
      return;
    }
    else
    {

      for (let groupsOfParticlesIndex = 0; groupsOfParticlesIndex < this.arrayOfGroupsOfParticles.length; groupsOfParticlesIndex++)
      {
        for (let individualParticlesIndex = 0; individualParticlesIndex < this.arrayOfGroupsOfParticles[groupsOfParticlesIndex].length; individualParticlesIndex++)
        {
          this.arrayOfGroupsOfParticles[groupsOfParticlesIndex][individualParticlesIndex].move();
        }
      }
    }
  }

  this.drawParticles = function()
  {
    if (this.arrayOfGroupsOfParticles.length === 0)
    {
      return;
    }
    else
    {

      for (let groupsOfParticlesIndex = 0; groupsOfParticlesIndex < this.arrayOfGroupsOfParticles.length; groupsOfParticlesIndex++)
      {
        for (let individualParticlesIndex = 0; individualParticlesIndex < this.arrayOfGroupsOfParticles[groupsOfParticlesIndex].length; individualParticlesIndex++)
        {
          this.arrayOfGroupsOfParticles[groupsOfParticlesIndex][individualParticlesIndex].draw();
        }
      }
    }
  }
}
function RocketExplosion(x,y)
{
  this.x = x;
  this.y = y;

  this.image = 'images\\sprites\\spaceShooter\\rocketExplosion.png';

  this.alpha = 1;
  this.width = 1;
  this.height = 1;

  this.alphaDecreaseRate = 0.05;
  this.widthIncreaseRate = 10;
  this.heightIncreaseRate = 10;

  this.update = function()
  {
    this.alpha -= this.alphaDecreaseRate;
    this.width += this.widthIncreaseRate;
    this.height += this.heightIncreaseRate;
    this.x -= this.widthIncreaseRate/2;
    this.y -= this.heightIncreaseRate/2;
  }

  this.draw = function()
  {
    gameCanvasContext.globalAlpha = this.alpha;
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
    gameCanvasContext.globalAlpha = 1;
  }
}

function RocketExplosionsManager()
{
  this.arrayOfExplosions = [];

  this.createAnExplosion = function()
  {
    let currentCollidedAnswer = gameClassManager.currentGame.collisionsWithAnswersManager.currentCollidedAnswer;
    let x = undefined;
    let y = undefined;

    if (currentCollidedAnswer === promptsAndAnswersManager.correctTargetPromptAndAnswerPairing)
    {
      x = drawAnswersManager.currentCorrectAnswerHolderX + gameClassManager.currentGame.bulletDimensionX;
      y = drawAnswersManager.currentCorrectAnswerHolderY + drawAnswersManager.currentCorrectAnswerHolderHeight/2;
    }
    else if (currentCollidedAnswer === promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing){

      x = drawAnswersManager.currentIncorrectAnswerHolderX + gameClassManager.currentGame.bulletDimensionX;
      y = drawAnswersManager.currentIncorrectAnswerHolderY + drawAnswersManager.currentIncorrectAnswerHolderHeight/2;
    }

    let explosion = new RocketExplosion(x,y);
    this.arrayOfExplosions.push(explosion);
    gameAudio.laserShoot.play();
    gameAudio.rockExplosion.play();
  }

  this.drawExplosions = function()
  {
    for (let i = 0; i < this.arrayOfExplosions.length; i++)
    {
      this.arrayOfExplosions[i].draw();
    }
  }

  this.updateExplosions = function()
  {
    for (let i = 0; i < this.arrayOfExplosions.length; i++)
    {
      this.arrayOfExplosions[i].update();
    }
  }

  this.handleFadedExplosions = function()
  {
    for (let i = 0; i < this.arrayOfExplosions.length; i++)
    {
      if (this.arrayOfExplosions[i].alpha < 0.2)
      {
        this.arrayOfExplosions.splice(i,1);
      }
    }
  }
}
function Smoke(x,y)
{
  this.x = x;
  this.y = y;

  this.image = 'images\\sprites\\cVc shooter\\smokeParticle.png';

  this.width = 5;
  this.height = gameClassManager.currentGame.playerCharacter.height/2;

  this.alpha = 1;
  this.alphaDecreaseRate = 0.97;

  this.update = function()
  {
    this.width += 4;
    this.x -= 5;
    this.alpha *= this.alphaDecreaseRate;
  }

  this.draw = function()
  {
    gameCanvasContext.globalAlpha = this.alpha;
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
    gameCanvasContext.globalAlpha = 1;
  }
}

function ShipSmokeManager()
{
  this.arrayOfSmoke = [];

  this.generateSmoke = function()
  {
    let ship = gameClassManager.currentGame.playerCharacter;
    let smoke = new Smoke(ship.x,ship.y + ship.height*0.3);
    gameClassManager.currentGame.shipSmokeManager.arrayOfSmoke.push(smoke);
    // this.arrayOfSmoke.push(smoke);

  }

  this.deleteFadedSmoke = function()
  {
    for (let i = 0; i < this.arrayOfSmoke.length; i++)
    {
      if (this.arrayOfSmoke[i].alpha < 0.1 || this.arrayOfSmoke[i].x < 0)
      {
        // gameClassManager.currentGame.shipSmokeManager.arrayOfSmoke.splice(i,1);
        this.arrayOfSmoke.splice(i,1);

      }
    }
  }

  this.drawSmoke = function()
  {
    for (let i = 0;  i < this.arrayOfSmoke.length; i++)
    {
      // gameClassManager.currentGame.shipSmokeManager.arrayOfSmoke[i].draw();
      this.arrayOfSmoke[i].draw();

    }
  }

  this.updateSmoke = function()
  {
    for (let i = 0;  i < this.arrayOfSmoke.length; i++)
    {
      // gameClassManager.currentGame.shipSmokeManager.arrayOfSmoke[i].update();
      this.arrayOfSmoke[i].update();

    }
  }
}
var arrayOfRunnerRunningImages = [];

runnerGameClass.prototype = new GameClass();
function runnerGameClass() {
  const RUNNERSPEED = 10;
  const RUNNERWIDTH = 100;
  const RUNNERHEIGHT = 220;
  const RUNNERGRAVITY = 0.44;
  const RUNNERJUMPSPEED = 20;
  const RUNNERMAXJUMPHEIGHT = 75;
  const RUNNERFRAMERATE = 1000/30;
  const parallaxPos = [320,200,440, 0, 0];
  let runnerStatus = 'run'; // 'run', 'jump', 'slide', or 'stumble'
  let arrayOfRunnerRunningImagesIndex = 0;

  this.currentRunnerRunningImage;
  let runnerSpeedY = 0;
  let runnerFloorLevel = 0;

  this.drawTransitionText = function()
  {
    customFontFillText(['Run and Jump to '], 35,30, 100,50);
    customFontFillText(['Collect Coins!', symbolExclamationPointImage], 35,30, gameCanvas.width/2 - 200,100);
    customFontFillText(['Space Bar ', symbolEqualsImage, ' Jump up'], 30,15, 210,gameCanvas.height/2);
  }

  this.name = 'runnerGame';
  this.textAnswerFontSize = '30';
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';
  this.titleScreenData = [{
	name: "Runner",
	fontSize: 27,
	spacing: 13,
	x: 225, y: 285
  }];

  this.imageAnswerWidth = undefined;
  this.imageAnswerHeight = undefined;
  this.imageAnswerHolderWidth = undefined;
  this.imageAnswerHolderHeight = undefined;

  this.audioImageAnswerWidth = undefined;
  this.audioImageAnswerHeight = undefined;
  this.audioImageAnswerHolderWidth = undefined;
  this.audioImageAnswerHolderHeight = undefined;

  this.correctTextAnswerHolderWidth = undefined;
  this.incorrectTextAnswerHolderWidth = undefined;

  this.answerHolderImage = 'images\\sprites\\runner\\Coin.png';

  this.assignAnswerHolder = function()
  {
    let coinAnswerHolder = new CoinAnswerHolder(this.answerHolderImage);
    return coinAnswerHolder;
  }

  this.basketIsMovingForward = true;
  function cycleRunnerRunningImages()
  {

    if (arrayOfRunnerRunningImagesIndex === arrayOfRunnerRunningImages.length - 1)
    {
      this.basketIsMovingForward = false;
    }
    if (arrayOfRunnerRunningImagesIndex === 0)
    {
      this.basketIsMovingForward = true;
    }

  	if (this.basketIsMovingForward === true)
  	{

  	  arrayOfRunnerRunningImagesIndex++;
  	}
    else if (!this.basketIsMovingForward)
    {
      arrayOfRunnerRunningImagesIndex--;
    }

  	this.currentRunnerRunningImage = arrayOfRunnerRunningImages[arrayOfRunnerRunningImagesIndex];
  }

  // this.postLoadInit = function() {
  // 	if (gameIsOnAServerAndCanUseWebAudioAPI) {
  //          backgroundMusicBufferSource = webAudioAPIContext.createBufferSource();
  //          currentBackgroundMusic = backgroundMusicBufferSource;
  //          loadWebAudioAPISound('audio/backgroundTracks/runnerBackground.mp3', backgroundMusicBufferSource);
  //          backgroundMusicBufferSource.loop = true;
  //          backgroundMusicBufferSource.loopStart = 6.9;
  //          backgroundMusicBufferSource.loopEnd = 1;
  //      	}
  // }

  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/runnerBackground.mp3', 12.8);

  this.superInitialize = this.initialize;
  this.initialize = function() {
    gameAudio.jumpSound = new sfxOneShot('audio/V/playerJump.mp3');
    gameAudio.runningSteps = new sfxLooping('audio/V/runningSteps.mp3');
    gameAudio.runningSteps.play();
    this.imageAnswerWidth = gameCanvas.width/8;
    this.imageAnswerHeight = gameCanvas.height/9;
    this.imageAnswerHolderWidth = gameCanvas.width/4;
    this.imageAnswerHolderHeight = gameCanvas.height/5;

    this.audioImageAnswerWidth = gameCanvas.width/6;
    this.audioImageAnswerHeight = gameCanvas.height/7;
    this.audioImageAnswerHolderWidth = gameCanvas.width/5;
    this.audioImageAnswerHolderHeight = gameCanvas.height/6;

    this.correctTextAnswerHolderWidth = undefined;
    this.incorrectTextAnswerHolderWidth = undefined;

    arrayOfRunnerRunningImages.push('images\\sprites\\runner\\1edited.png');
    arrayOfRunnerRunningImages.push('images\\sprites\\runner\\2edited.png');
    arrayOfRunnerRunningImages.push('images\\sprites\\runner\\3edited.png');
    arrayOfRunnerRunningImages.push('images\\sprites\\runner\\4edited.png');
    arrayOfRunnerRunningImages.push('images\\sprites\\runner\\5edited.png');
    this.currentRunnerRunningImage = arrayOfRunnerRunningImages[0];

	runnerSpeedY = 0;
	runnerFloorLevel = gameCanvas.height*0.75;
	this.playerCharacter = {
	  x: RUNNERWIDTH,
	  y: runnerFloorLevel - RUNNERHEIGHT,
	  width: RUNNERWIDTH,
	  height: RUNNERHEIGHT
	};
	this.collidingObject = this.playerCharacter;
	setInterval(cycleRunnerRunningImages, 100);
	initializePromptAndAnswerObjects();
    promptsAndAnswersManager.setOrResetPromptsAndAnswers();
    promptersManager.loadAppropriatePrompterBasedOnCurrentPromptsDataType();
	this.superInitialize();
  };

  this.update = function() {
	if (!promptersManager.shouldBeDrawingAPrompt &&
        fullGameStateMachine.currentState !== fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.pausedMiniGame)
    {
	  this.movePlayerCharacter();
	  moveAnswers();
	  this.collisionsWithAnswersManager.handleCollisionsWithAnswers(this.playerCharacter);
	}
	//cloud 1
	parallaxPos[0] -= RUNNERSPEED/100;
	if (parallaxPos[0] + gameCanvasContext.measureText('AMAZING').width < 0) {
	  parallaxPos[0] = gameCanvas.width;
	}
	//cloud 2
	parallaxPos[1] -= RUNNERSPEED/80;
	if (parallaxPos[1] + gameCanvasContext.measureText('PARALLAX').width < 0) {
	  parallaxPos[1] = gameCanvas.width;
	}
	//cloud 3
	parallaxPos[2] -= RUNNERSPEED/120;
	if (parallaxPos[2] + gameCanvasContext.measureText('EFFECT').width < 0) {
	  parallaxPos[2] = gameCanvas.width;
	}
	//mountain
	parallaxPos[3] -= RUNNERSPEED/60;
	if (parallaxPos[3] + gameCanvasContext.measureText('EFFECT').width < 0) {
	  parallaxPos[3] = gameCanvas.width;
	}
	//mushroom
	parallaxPos[4] -= RUNNERSPEED/15;
	if (parallaxPos[4] + gameCanvasContext.measureText('EFFECT').width < 0) {
	  parallaxPos[4] = gameCanvas.width;
	}
  };

  this.draw = function() {
	this.drawBackground();
	gameCanvasContext.fillStyle = 'white';
	let x = this.playerCharacter.x;
	let y = this.playerCharacter.y;
	let width = RUNNERWIDTH;
	let height = RUNNERHEIGHT;
 	if (runnerStatus == 'slide') {
	  width = RUNNERHEIGHT;
	  height = RUNNERWIDTH;
	  y = gameCanvas.height*0.75 - height;
	}
	if (runnerStatus == 'stumble') {
    drawFromSheet(arrayOfRunnerRunningImages[arrayOfRunnerRunningImagesIndex], x, y, width,height, undefined, Math.PI/4, x,y);
	  // gameCanvasContext.save();
	  // gameCanvasContext.translate(x, y);
	  // gameCanvasContext.rotate(Math.PI/4);
	  // // gameCanvasContext.fillRect(width, -height/2, width, height);
	  // gameCanvasContext.drawImage(arrayOfRunnerRunningImages[arrayOfRunnerRunningImagesIndex], x, y, width,height);
	  // gameCanvasContext.restore();
	} else if (runnerStatus == 'jump'){
    drawFromSheet('images\\sprites\\runner\\1jump.png', x,y, width,height);
	  //gameCanvasContext.drawImage('images\\sprites\\runner\\1jump.png', x,y, width,height);
	}else {
	  // gameCanvasContext.fillRect(x, y, width, height);
    drawFromSheet(arrayOfRunnerRunningImages[arrayOfRunnerRunningImagesIndex], x,y, width,height);
	  //gameCanvasContext.drawImage(arrayOfRunnerRunningImages[arrayOfRunnerRunningImagesIndex], x,y, width,height);
	}
	drawAnswersManager.draw();
	promptersManager.drawPromptsWhenAppropriate();
  };

  this.handleUpArrowDown = function() {
	if (runnerStatus == 'run') {
	  runnerStatus = 'jump';
	  runnerSpeedY = RUNNERJUMPSPEED;
    gameAudio.jumpSound.play();
    gameAudio.runningSteps.stop();
	}
  };

  this.handleDownArrowDown = function() {
	if (runnerStatus == 'run') {
	  runnerStatus = 'slide';
	}
  };

  this.handleDownArrowUp = function() {
	if (runnerStatus == 'slide') {
	  runnerStatus = 'run';
	}
  };

  this.movePlayerCharacter = function() {
	if (runnerStatus == 'jump') {
	  this.playerCharacter.y -= runnerSpeedY;
	  runnerSpeedY -= RUNNERGRAVITY;
	  if (this.playerCharacter.y + RUNNERHEIGHT > runnerFloorLevel) {
		this.playerCharacter.y = runnerFloorLevel - RUNNERHEIGHT;
    gameAudio.runningSteps.play();
		runnerStatus = 'run';
		runnerSpeedY = 0;
	  } else if (this.playerCharacter.y < RUNNERMAXJUMPHEIGHT) {
		this.playerCharacter.y = RUNNERMAXJUMPHEIGHT;
	  }
	}
  };

  function moveAnswers() {
	promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate -= RUNNERSPEED/4;
    promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate -= RUNNERSPEED/4;
  }

  function drawParallax() {
	//clouds
  drawFromSheet('images\\Backgrounds\\runnerCloud1.png', parallaxPos[0],gameCanvas.height*0.20, 200,150);
	drawFromSheet('images\\Backgrounds\\runnerCloud1.png', parallaxPos[1],gameCanvas.height*0.07, 150,125);
	drawFromSheet('images\\Backgrounds\\runnerCloud1.png', parallaxPos[2],gameCanvas.height*0.12, 250,200);
	//gameCanvasContext.drawImage(runnerCloud1, parallaxPos[0],gameCanvas.height*0.20, 200,150);
	//gameCanvasContext.drawImage(runnerCloud1, parallaxPos[1],gameCanvas.height*0.07, 150,125);
	//gameCanvasContext.drawImage(runnerCloud1, parallaxPos[2],gameCanvas.height*0.12, 250,200);
	// gameCanvasContext.fillStyle = 'lightgrey';
	// gameCanvasContext.fillText('AMAZING', parallaxPos[0], gameCanvas.height*0.28);

	//mountains


	// gameCanvasContext.fillStyle = 'grey';
	// gameCanvasContext.fillText('PARALLAX', parallaxPos[3], gameCanvas.height/2);
	gameCanvasContext.fillStyle = 'dimgrey';
	gameCanvasContext.fillText('EFFECT', parallaxPos[4], gameCanvas.height*0.8);
  }

  this.drawBackground = function() {
  drawFromSheet('images\\Backgrounds\\runnerSunAndSky.png', 0,0, gameCanvas.width,gameCanvas.height);
  drawFromSheet('images\\Backgrounds\\runnerMountain1.png',  parallaxPos[3],gameCanvas.height*0.20, 200,350);
  drawFromSheet('images\\Backgrounds\\runnerGrass.png', 0,gameCanvas.height*0.7, gameCanvas.width,gameCanvas.height*0.3);
	// gameCanvasContext.drawImage('images\\Backgrounds\\runnerSunAndSky.png', 0,0, gameCanvas.width,gameCanvas.height);
	// gameCanvasContext.drawImage(runnerMountain1Image, parallaxPos[3],gameCanvas.height*0.20, 200,350);
	// gameCanvasContext.drawImage(runnerGrassImage, 0,gameCanvas.height*0.7, gameCanvas.width,gameCanvas.height*0.3);

	drawParallax();
  };

  this.getPromptAndAnswerPairingsCoordinates = function() {
	const coinFlip = Math.random() < 0.5;
	return {
	  correct: {
		x: gameCanvas.width - 80,
		y: coinFlip ? RUNNERMAXJUMPHEIGHT : runnerFloorLevel - 70
	  },
	  incorrect: {
		x: gameCanvas.width - 80,
		y: coinFlip ? runnerFloorLevel - 70 : RUNNERMAXJUMPHEIGHT
	  }
	};
  };
}

const runnerGame = new runnerGameClass();

function CoinAnswerHolder(image)
{
  this.image = image;
}
// McF's bubblePoppingEngine

// Used by Pinata minigame, Bubble Wrap
// v5 - abstracted for multiple game use!

// physics code adapted from work by XEM
// https://github.com/xem/mini2Dphysics


// an abstract mini engine used by multiple games
function bubblePoppingEngine(myName = 'POP!', usePhysics = false) {
    //////////////////////////////////////////////////////
    // game specifics
    //////////////////////////////////////////////////////
    this.gameIsActive = false;
    this.name = myName;
    this.physicsEnabled = usePhysics;
    //this.titleTXT1 = "Piñata Pop";
    this.titleTXT1 = "Pinata Pop";
    this.titleTXT2 = "Click the right letter";
    this.titleTXT3 = "as fast as you can";
    this.spritesheet = null;
    this.gravity = 0.1;//0.05;
    this.spriteH = 256;
    this.spriteW = 256;
    this.shrinking = true;
    this.skipCustomizationScreens = true;
    this.spawnRadius = 50; // size when randomly spawning
    this.spawnRandomly = false;
    this.spawnChance = 0.05;
    this.smashSound = null;
    this.successSound = null;
    this.failSound = null;
    this.introComplete = false; // if false, show a pinata
    //////////////////////////////////////////////////////
    // private vars used internally
    //////////////////////////////////////////////////////
    var me = this; // because events keep this straight
    // list of all known candies
    var objects = [];
    // list of rgba colours
    var rainbow;
    // how many poppable letter choices will fall out
    const CANDY_COUNT = 10;//16;
    const CANDY_MIN_SIZE = 20;
    const CANDY_START_RADIUS = 40;
    const CANDY_SHRINK = -0.2;
    const CANDY_MASS = 1;
    // special case: candies with a "space" as the letter are considered particles of confetti
    const CONFETTI_COUNT = 10;//20; // currently it messes up the physics
    const CONFETTI_RADIUS = 10; // starting size
    const CONFETTI_MASS = 100; // the higher the number, the LESS it weighs! FIXME
    const CONFETTI_SHRINKSPEED = 0.975; // % each frame
    const CONFETTI_ID = " ";
    // tiny functions to handle 2d vectors
    var Vec2 = (x, y) => ({ x, y });
    var length = (x) => dot(x, x) ** .5;
    var add = (x, y) => Vec2(x.x + y.x, x.y + y.y);
    var sub = (x, y) => add(x, scale(y, -1));
    var scale = (x, y) => Vec2(x.x * y, x.y * y);
    var dot = (x, y) => x.x * y.x + x.y * y.y;
    var cross = (x, y) => x.x * y.y - x.y * y.x;
    var normalize = (x) => scale(x, 1 / (length(x) || 1));
    var rndInt = (minimum, maximum) => Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;
    // which one we want to click
    var alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var targetLetter = alphabet[rndInt(0, alphabet.length - 1)];
    // TODO refactor these private vars
    var canv;// canvas
    var nextOne;// c1
    var ctx;// ctx2d
    var otherOne;// c2
    var direction;// vFrom1to2
    var correction;// correctionAmount
    var i, j, k;// loop vars
    var radius1;// r1
    var radius2;// r2
    var relVel;// relativeVelocity
    var velNorm;// rVelocityInNormal
    var scalarVal;// p
    var tScalar;// jN
    var impulseNorm;// impulse
    var tangentVal;// tangent
    var power;// jT

    //////////////////////////////////////////////////////
    // public functions called by the game state machine
    //////////////////////////////////////////////////////
    this.postLoadInit = function () { // NEVER GETS FIRED? FIXME
        //console.log(this.name + " postLoadInit...");
        this.gameIsActive = true;
    }
    this.postGameSpecialCode = function () {
        //console.log(this.name + " postGameSpecialCode...");
        // remove mousedown event listener
        this.gameIsActive = false;
    }
    // FIXME the "this" is invalid here, its a transitioner, not the game itself LOL
    this.drawTransitionText = function () {
        customFontFillText([me.titleTXT1, symbolExclamationPointImage], 80, 42, 100, 50);
        customFontFillText([me.titleTXT2], 32, 24, 80, 250);
        customFontFillText([me.titleTXT3, symbolExclamationPointImage], 32, 24, 80, 290);
    }

    this.initialize = function () {
        //console.log(this.name + " popping game initializing...");
        this.gameIsActive = true; // hmmmmmmmmmmm
        generateRainbowColours();
        ctx = gameCanvasContext;
        canv = gameCanvas;
        //if (window.currentBackgroundMusic) { // exists?
        //    currentBackgroundMusic.pause();
        //    currentBackgroundMusic = pinataBackgroundMusic;
        //}
        if (!this.gameSpecificInits) {
            // Init scene ground floor - defaults
            Circle(Vec2(320, 5700), 5000, 0); // floor!
            Circle(Vec2(2840, 5000), 5000, 0); // r wall
            Circle(Vec2(-2200, 5000), 5000, 0); // l wall
        } else {
            this.gameSpecificInits();
        }
        document.addEventListener('mousedown', pinataClick, false);
    }

    this.maybePromptUser = function() {

        if (!this.introComplete) return;

        const promptDelay = 2000; // ms
        var now = performance.now();
        // first time?
        if (!this.nextPromptTime) this.nextPromptTime = now + promptDelay;
        // each subsequent time
        if (now>this.nextPromptTime) {
            //console.log("playing A-Z voice prompt: " + targetLetter)
            var snd = promptAudio[targetLetter.toLowerCase()];
            if (snd) snd.play();
            this.nextPromptTime = now + promptDelay;
        }
    }


    // called by the game state machine
    this.update = function () {
        //console.log("popping game update()");
        this.maybePromptUser(); // voiceovers

        if (!this.physicsEnabled) return;
        if (window.levelIsTransitioning) return; // update should never be called in this case, but just in case
        if (this.spawnRandomly) {
            if (Math.random() < this.spawnChance) {
                //console.log("Randomly spawning a new popable!");
                this.newcircle(Math.random() * gameCanvas.width, gameCanvas.height + 100, this.spawnRadius, 1);
            }
        }

        // iterate through all objects twice
        for (i = objects.length; i--;) {
            for (j = objects.length; j-- > i;) {
                //for(k = 15; k--;){
                nextOne = objects[i];
                otherOne = objects[j];
                //if((b.M && b.C.y < 400) || (d.M && d.C.y < 400)){ // perf
                // Test collision
                direction = sub(otherOne.C, nextOne.C);
                if (length(direction) < nextOne.R + otherOne.R) { // close enough?
                    D = nextOne.R + otherOne.R - length(direction), // depth
                        N = normalize(direction), // normal
                        S = add(otherOne.C, scale(normalize(scale(direction, -1)), otherOne.R)), // start
                        E = add(S, scale(N, D)) // end
                    // Resolve collision
                    if (nextOne.M || otherOne.M) {
                        //  correct positions
                        correction = scale(N, D / (nextOne.M + otherOne.M) * .8); // .8 = poscorrectionrate = percentage of separation to project objects
                        nextOne.C = add(nextOne.C, scale(correction, -nextOne.M));
                        otherOne.C = add(otherOne.C, scale(correction, otherOne.M));
                        //the direction of collisionInfo is always from b to d
                        //but the Mass is inversed, so start scale with d and end scale with b
                        scalarVal = add(scale(S, otherOne.M / (nextOne.M + otherOne.M)), scale(E, nextOne.M / (nextOne.M + otherOne.M)));
                        //r is vector from center of object to collision point
                        radius1 = sub(scalarVal, nextOne.C);
                        radius2 = sub(scalarVal, otherOne.C);
                        //newV = V + D cross R
                        relVel = sub(add(otherOne.V, Vec2(-1 * otherOne.D * radius2.y, otherOne.D * radius2.x)), add(nextOne.V, Vec2(-1 * nextOne.D * radius1.y, nextOne.D * radius1.x)));
                        //if objects moving apart ignore
                        //if(dot(n, N) < 0){
                        // Calc t scalar
                        // the formula of s can be found in http://www.myphysicslab.com/collision.html
                        tScalar = (-1.5 * dot(relVel, N)) / (nextOne.M + otherOne.M + cross(radius1, N) ** 2 * nextOne.M + cross(radius2, N) ** 2 * otherOne.M);
                        //t is in direction of normal ( from b to d)
                        impulseNorm = scale(N, tScalar);
                        // t = F dt = m * ?v
                        // ?v = t / m
                        nextOne.V = sub(nextOne.V, scale(impulseNorm, nextOne.M));
                        otherOne.V = add(otherOne.V, scale(impulseNorm, otherOne.M));
                        nextOne.D -= cross(radius1, N) * tScalar * nextOne.M;
                        otherOne.D += cross(radius2, N) * tScalar * otherOne.M;
                        tangentVal = scale(normalize(sub(relVel, scale(N, dot(relVel, N)))), -1);
                        power = -1.5 * dot(relVel, tangentVal) * .5 / (nextOne.M + otherOne.M + cross(radius1, tangentVal) ** 2 * nextOne.M + cross(radius2, tangentVal) ** 2 * otherOne.M);
                        //t is from b to d (in opposite direction of velocity)
                        impulseNorm = scale(tangentVal, power);
                        nextOne.V = sub(nextOne.V, scale(impulseNorm, nextOne.M));
                        otherOne.V = add(otherOne.V, scale(impulseNorm, otherOne.M));
                        nextOne.D -= cross(radius1, tangentVal) * power * nextOne.M;
                        otherOne.D += cross(radius2, tangentVal) * power * otherOne.M;
                    } // collision resolved
                } // close enough
                // }
            } // i

            // animate them falling and bouncing
            if (this.introComplete || this.noIntro) { // not waiting for smash?
                // Update scene
                nextOne.V = add(nextOne.V, scale(nextOne.A, this.gravity)); // A=gravity
                nextOne.C = add(nextOne.C, scale(nextOne.V, .01));
                nextOne.D += nextOne.E * .01;
                nextOne.B += nextOne.M ? nextOne.D * .01 : .001;
                // shrink!
                if (this.shrinking && nextOne.M && nextOne.R > CANDY_MIN_SIZE) nextOne.R += CANDY_SHRINK;
                if (nextOne.Z == CONFETTI_ID) {
                    nextOne.R *= CONFETTI_SHRINKSPEED;
                }
            } else { // if we have not yet Smashed:
                // leave animation on pause for now
            }
        }
    }
    // called by the game state machine
    this.draw = function () {
        //console.log("popping game draw()");
        // clear the screen
        ctx.fillStyle = "rgba(150,220,255,1)";
        ctx.fillRect(0, 0, canv.width, canv.height);
        // do we have a custom background?
        if (this.drawBG) {
            this.drawBG();
        } else { // draw a nice sky
            for (i = 0; i < rainbow.length; i++) {
                ctx.fillStyle = rainbow[i];
                ctx.beginPath();
                ctx.arc(320, 900 + i * 50, 1000, 0, 7);
                ctx.fill();
            }
        }
        // draw all bubbles
        for (i = objects.length; i--;) {
            nextOne = objects[i];
            // Draw
            ctx.save();
            ctx.beginPath();
            ctx.translate(nextOne.C.x, nextOne.C.y);
            ctx.rotate(nextOne.B);
            if (!this.spritesheet) {
                ctx.arc(0, 0, nextOne.R, 0, 7);
            } else {
                // really big: balloons assumed: FIXME
                // ctx.drawImage(this.spritesheet, 0, 0, this.spriteW, this.spriteH, -nextOne.R, -nextOne.R, nextOne.R * 2, nextOne.R * 2);
                drawFromSheet("images\\sprites\\balloonPop\\balloonPopSpritesheet.png",
                    -nextOne.R,-nextOne.R,
                    nextOne.R * 2, nextOne.R * 2);
            }
            //c.lineWidth = 3;
            ctx.font = nextOne.R * 1.9 + "px a";
            ctx.textAlign = "center";
            if (objects[i].M) { // does it have mass? then draw a candy
                if (nextOne.Z == targetLetter) {
                    // debug mode: easy to find flashing balls
                    ctx.fillStyle = "rgba(" + rndInt(100, 255) + "," + rndInt(100, 255) + "," + rndInt(100, 255) + ",1)";
                } else {
                    ctx.fillStyle = objects[i].color; // selet ball colour
                }
                if (!this.spritesheet) ctx.fill(); // the circle
                if (nextOne.Z == CONFETTI_ID) {
                    // draw the letter using html
                    // emoji! works on most modern devices but not all
                    //c.fillStyle = "white"; // txt color
                    ctx.fillText(String.fromCodePoint(0x1F600 + (i % 69/*56*/)), nextOne.R * 1.5, 0, 0 - nextOne.R * 0.75, 0 - nextOne.R * 0.75);
                } else {
                    // draw the letter using bitmap font
                    if (window.customFontFillText) {
                        customFontFillText([nextOne.Z], nextOne.R * 1.5, 0, 0 - nextOne.R * 0.75, 0 - nextOne.R * 0.75);
                    } else { // debug only
                        ctx.fillStyle = 'black';
                        ctx.fillText(nextOne.Z, 0, nextOne.R * 0.666);
                    }
                }
            }
            else { // no mass? must be the ground
                ctx.fillStyle = "rgba(80,60,40,1)";
                ctx.fill(); // the ground
            }
            ctx.restore();
            // ^---- end draw

            if (this.introComplete) {
                if (window.customFontFillText) {
                    customFontFillText(['Click the letter ' + targetLetter], 32, 24, 80, 32);
                } else { // debug only
                    ctx.fillStyle = 'white';
                    ctx.font = "32px Arial";
                    ctx.fillText('Click the letter ' + targetLetter, 200, 32);
                }
            } else {
                //if (window.pinataImage) {
                    // let's draw an actual pinata here
                    var wobblex = 180 + Math.cos(performance.now() / 1000) * 60;
                    var wobbley = 100 - Math.cos(performance.now() / 500) * 15;
                    // first the string
                    ctx.beginPath();
                    ctx.moveTo(320, 0);
                    ctx.lineTo(wobblex + 120, wobbley + 108);
                    ctx.strokeStyle = "rgba(80,80,80,1)";
                    ctx.lineWidth = 4;
                    ctx.stroke();
                    // now the pinata itself
                    // ctx.drawImage(pinataImage, wobblex, wobbley);
                    drawFromSheet("images\\sprites\\pinata\\pinata.png",
                                wobblex, wobbley);
                    // and the instructions
                //}
                //if (window.customFontFillText) customFontFillText(['Smash the Piñata', symbolExclamationPointImage], 32, 24, 120, 32);
                if (window.customFontFillText) customFontFillText(['Smash the Pinata', symbolExclamationPointImage], 32, 24, 120, 32);
            }
        } // loop thru all
        //drawBackButton(); // FIXME
    }

    //////////////////////////////////////////////////////
    // private functions used internally
    //////////////////////////////////////////////////////
    function boom(x, y, wasCorrect) {

        var resetAnyways = false;
        if (wasCorrect && me.alwaysPopLetters) { // bubble wrap etc
            if (objects.length) {
                targetLetter = objects[Math.floor(Math.random() * objects.length)].Z;
                //console.log("new target letter without erasing board: " + targetLetter);
            } else {
              //  console.log("entire board cleared!!!");
                //resetAnyways = true; // force full new choices? NO - this is done elsewhere
            }
        }

        if (wasCorrect && (!me.alwaysPopLetters || resetAnyways)) {
            //pinataSmashed = false; // reset!!!!!!!! fixme: or do we like spam
            /*
            // destroy the world!
            objects = [];
            // Init scene ground floor
            Circle(Vec2(320, 5700), 5000, 0); // floor!
            Circle(Vec2(2840, 5000), 5000, 0); // r wall
            Circle(Vec2(-2200, 5000), 5000, 0); // l wall
            */
            // select a new letter
            targetLetter = alphabet[rndInt(0, alphabet.length - 1)];
            // ensure the target one is there at least one matching letter, quite high up
            Circle(Vec2(x + Math.random() * 300 - 250, y + Math.random() * -100 - 75), 40, 5 / 40, targetLetter);
            // create many little candies
            for (i = CANDY_COUNT; i--;) {
                Circle(Vec2(x + Math.random() * 100 - 50, y + Math.random() * -100)); // a bit higher please
            }
        }
        if (!me.noConfetti) {
            // reuse old confetti
            let found = 0;
            for (let i = objects.length; i--;) {
                if (objects[i].Z == CONFETTI_ID) { // gotcha
                    found++;
                    objects[i].R = CONFETTI_RADIUS;
                    objects[i].M = CONFETTI_MASS;
                    objects[i].C.x = x + Math.random() * 80 - 40;
                    objects[i].C.y = y + Math.random() * -80 - 40;
                    // add some random velocity
                    objects[i].V.x = Math.random() * 2000 - 1000;
                    objects[i].V.y = Math.random() * 2000 - 1000;
                }
            }
            // spawn some particles of confetti if we need them
            if (!found) { // first time init
                for (i = CONFETTI_COUNT; i--;) {
                    let c = new Circle(
                        Vec2(x + Math.random() * 80 - 40,
                            y + Math.random() * -80 - 40),
                        CONFETTI_RADIUS,
                        CONFETTI_MASS,
                        CONFETTI_ID);
                    // add some random velocity
                    c.V.x = Math.random() * 2000 - 1000;
                    c.V.y = Math.random() * 2000 - 1000;
                }
            }
        }
    }

    // NOTE: DO NOT USE "THIS." HERE!
    // IT DOES *NOT* REFER TO THE GAME HERE
    // "me" is the game's "this"
    function pinataClick(e) {
        if (!me.gameIsActive) return;
        console.log("pinataClick");
        //if (!window.playerShouldBePlayingPinata) return; // dont do anything if another game is running
        let correct = false;
        if (levelIsTransitioning) {
            // stop the slow fade in early
            levelIsTransitioning = false;
            transitionIsFadingIn = false;
            transitionIsFadingOut = false;
            gameCanvasContext.globalAlpha = 1;
            var snd = promptAudio.balloonPop;
            if (snd) snd.play();
            return; // dont register this click in game yet
        }
        // first click open the pinata!
        if (!me.introComplete && !me.noIntro) {
            console.log("Pinata just got smashed!")
            me.introComplete = true;
            boom(e.pageX, e.pageY, true);
            var snd = promptAudio.balloonPop;
            if (snd) snd.play();
            if (window.audioManager) {
                audioManager.pinataHitSound.play();
            } else {
                if (me.smashSound) me.smashSound.play();
            }
            return;
        }
        // detect WHICH circle we clicked!
        var clickXY = Vec2(e.pageX, e.pageY);
        var clickedABubble = false;
        for (let i = objects.length; i--;) {
            let checkme = objects[i];
            let dist = sub(clickXY, checkme.C);
            // ignores GIANT bubbles (like the floors)
            if ((length(dist) < checkme.R + 2) && (checkme.R < 200)) { // the +2 is a little extra leeway =)
                //console.log("You clicked letter " + checkme.Z + ' at a distance of ' + length(dist) + ' which is less than ' + checkme.R);
                // FIXME - handle >1 positive on same frame etc
                // did we succeed?
                clickedABubble = true;
                if (checkme.Z == targetLetter) {
                    //console.log("You clicked the right letter: " + checkme.Z);
                    //depreciated playARandomSoundInAMultisoundArray(arrayOfGeneralPositiveFeedbackSounds);
                    correct = true;
                }
                else {
                    //console.log("You clicked the wrong answer: " + checkme.Z + " not " + targetLetter);
                    correct = false;
                    //depreciated playARandomSoundInAMultisoundArray(arrayOfGeneralNegativeFeedbackSounds);
                }

                if (me.alwaysPopLetters) {
                    if (me.name=='bubbleWrap')
                    {
                        var snd = promptAudio.bubbleWrapPop;
                        if (snd) snd.play();
                    } else {
                        var snd = promptAudio.balloonPop;
                        if (snd) snd.play();
                    }
                    // destroy the clicked bubble (only)
                    objects.splice(i, 1);
                    //correct = true; // always!?
                } else {
                    var snd = promptAudio.balloonPop;
                    if (snd) snd.play();
                }
            }
        }
        if (correct) {
            amountCorrect++;

            if (window.audioManager) {
                audioManager.multisoundPlayer.playARandomSoundInAMultisoundArray
                    (audioManager.multisoundPlayer.arrayOfGeneralPositiveFeedbackSounds);
                audioManager.pinataEatSound.play();
            } else {
                if (me.successSound) me.successSound.play();
            }
            boom(e.pageX, e.pageY, true);
        } else if (clickedABubble) { // don't count clicks on empty space as incorrect, since it might be a gui button etc
            amountIncorrect++;
            if (window.audioManager) {
                audioManager.multisoundPlayer.playARandomSoundInAMultisoundArray
                    (audioManager.multisoundPlayer.arrayOfGeneralNegativeFeedbackSounds);
            } else {
                if (me.failSound) me.failSound.play();
            }
            boom(e.pageX, e.pageY, false);
        }

        // make sure there are choices left!
        if (objects.length<1) {

            //console.log("all bubbles popped!");
            if (me.gameSpecificInits) {
                me.gameSpecificInits();
                return; // maybe we have a custom init func
            }
            else if (me.name=='bubbleWrap') {
                bubbleWrapGame.gameSpecificInits(); //???
            }
        }

    }

    // rainbow generator
    // does not draw it! fills an array with colours
    function generateRainbowColours() {
        var size = 16;
        rainbow = new Array(size);
        for (var i = 0; i < size; i++) {
            var red = sin_to_hex(i, 0 * Math.PI * 2 / 3); // 0   deg
            var blue = sin_to_hex(i, 1 * Math.PI * 2 / 3); // 120 deg
            var green = sin_to_hex(i, 2 * Math.PI * 2 / 3); // 240 deg
            rainbow[i] = "#" + red + green + blue;
        }
        function sin_to_hex(i, phase) {
            var sin = Math.sin(Math.PI / size * 2 * i + phase);
            var int = Math.floor(sin * 127) + 128;
            var hex = int.toString(16);
            return hex.length === 1 ? "0" + hex : hex;
        }
    }

    // vars:
    // a: canvas
    // b: c1
    // c: ctx2d
    // d: c2
    // e: vFrom1to2
    // h: correctionAmount
    // i, j, k: loop vars
    // l: r1
    // m: r2
    // n: relativeVelocity
    // o: rVelocityInNormal
    // p: p
    // s: jN
    // t: impulse
    // u: tangent
    // x: jT
    // b.bgColor="#333";
    // a class constructor:
    function Circle(C, R = Math.random() * CANDY_START_RADIUS + CANDY_MIN_SIZE, M = CANDY_MASS, forcedString) {
        var newCircle = {
            C, // center
            I: 0, // inertia
            V: Vec2(M ? Math.random() * 1000 - 500 : 0, M ? Math.random() * -500 : 0), // velocity (speed)
            M, // inverseMass (0 if immobile)
            A: Vec2(0, M ? 250 : 0), // acceleration
            B: 0, //M ? Math.random() * 7 : 0, // angle? could start at random rotation
            D: 0, // angle velocity (stays on!)
            E: 0, // angle acceleration,
            R, // radius
            // random emojoi! works on most modern devices but not all
            //Z: String.fromCodePoint(0x1F600 + Math.random() * 69/*56*/ | 0)
            // random letter A-Z
            Z: forcedString || String.fromCharCode(65 + Math.floor(Math.random() * 26)),
            //color: "rgba("+rndInt(0,255)+","+rndInt(0,255)+","+rndInt(0,255)+",1)" //0.25)"
            color: "rgba(" + rndInt(64, 255) + "," + rndInt(64, 255) + "," + rndInt(64, 255) + ",1)" //0.25)"
            //I: M,   // (here it's simplified as M) Inertia = mass * radius ^ 2. 12 is a magic constant that can be changed
        };
        objects.push(newCircle);
        return newCircle;
    }
    this.newcircle = function (x, y, r, m) { // so other games can call this
        return new Circle(Vec2(x, y), r, m);
    }
}

var bubbleWrapGame = new bubblePoppingEngine('bubbleWrap',false);
bubbleWrapGame.titleScreenData = [
  {name: "Bubble", fontSize: 27, spacing: 12, x: 130, y: 565},
  {name: "Wrap", fontSize: 27, spacing: 12, x: 140, y: 605}
];

// morph the defaults
bubbleWrapGame.noIntro = true; // no swinging pinata
bubbleWrapGame.noConfetti = true;
bubbleWrapGame.alwaysPopLetters = true;
bubbleWrapGame.titleTXT1 = "Bubble Wrap";
bubbleWrapGame.titleTXT2 = "Pop the bubbles";
bubbleWrapGame.titleTXT3 = "as fast as you can";
bubbleWrapGame.introComplete = true; // no swinging pinata
bubbleWrapGame.noIntro = true;
bubbleWrapGame.spritesheet = bubbleWrapSpritesheet;
bubbleWrapGame.shrinking = false;
bubbleWrapGame.smashSound = null;//window.audioManager?audioManager.balloonPopSound:document.getElementById('smashSound');
bubbleWrapGame.successSound = window.audioManager?audioManager.bubbleWrapPopSound:document.getElementById('successSound');
bubbleWrapGame.failSound = null;//window.audioManager?audioManager.pinataFailSound:document.getElementById('failSound');;

// build a grid of bubbles
bubbleWrapGame.gameSpecificInits = function() {
    // console.log("Bubble Wrap game specific inits...");
    var r = 30;
    var margin = -8;
    var spacing = (r*2)+margin;
    var rows = Math.floor(gameCanvas.height / spacing) - 4; // less to allow for top+bottom header
    var cols = Math.floor(gameCanvas.width / spacing);
    var offsetx=8;
    var offsety=12 + spacing + spacing; // we add spacing for header
    for (var col=0; col<cols; col++) {
        for (var row=0; row<rows; row++) {
            this.newcircle(margin+r+col*spacing+offsetx, margin+r+row*spacing+offsety, r, 10); // given some mass
        }
    }
}

// attempting to leverage for this game type, seems to not work for this case though
bubbleWrapGame.postLoadInit = function() { // code may not be getting called
    // console.log("postLoadInit for bubble wrap");
    gameInterval.reset(PINATAFRAMERATE);
    // do we still need to set these?
    playerShouldSeeTitleScreen = false;
    fullGameStateMachine.playingAGameState = true;
    levelIsTransitioning = true;
}

bubbleWrapGame.drawBG = function() {
    gameCanvasContext.drawImage(bubbleWrapBG,0,0);
}

if (window.AVAILABLE_GAMES) AVAILABLE_GAMES.push(bubbleWrapGame);

var balloonPopGame = new bubblePoppingEngine('balloonPop',true);
balloonPopGame.titleScreenData = [
  {name: "Balloon", fontSize: 27, spacing: 12, x: 420, y: 370},
  {name: "Pop", fontSize: 27, spacing: 12, x: 440, y: 405}
];

// morph the defaults
balloonPopGame.noIntro = true; // no swinging pinata
balloonPopGame.noConfetti = true;
balloonPopGame.gravity = -0.001; // going UP!
balloonPopGame.alwaysPopLetters = true;
balloonPopGame.titleTXT1 = "Balloon Pop";
balloonPopGame.titleTXT2 = "Pop the balloons";
balloonPopGame.titleTXT3 = "before they fly away";
balloonPopGame.introComplete = true; // no swinging pinata
balloonPopGame.noIntro = true;
balloonPopGame.spritesheet = balloonPopSpritesheet;
balloonPopGame.spawnRandomly = true;
balloonPopGame.spawnChance = 0.05;
balloonPopGame.shrinking = false;
balloonPopGame.smashSound = null;//window.audioManager?audioManager.balloonPopSound:document.getElementById('smashSound');
balloonPopGame.successSound = window.audioManager?audioManager.pinataEatSound:document.getElementById('successSound');;
balloonPopGame.failSound = null;//window.audioManager?audioManager.pinataFailSound:document.getElementById('failSound');;


// build a grid of bubbles
balloonPopGame.gameSpecificInits = function() {
    //console.log("Balloon Pop Game specific inits...");
    /*
    var r = 25;
    var margin = 24;
    var spacing = (r*2)+margin;
    var yoffset = gameCanvas.height; // start below screen
    var rows = Math.floor(gameCanvas.height / spacing);
    var cols = Math.floor(gameCanvas.width / spacing)-1;
    for (var col=0; col<cols; col++) {
        for (var row=0; row<rows; row++) {
            this.newcircle(margin+r+col*spacing, margin+r+row*spacing + yoffset, r, 10); // given some mass
        }
    }
    */
}


// attempting to leverage for this game type, seems to not work for this case though
balloonPopGame.postLoadInit = function() { // code may not be getting called
    //console.log("postLoadInit for balloonPopGame");
    gameInterval.reset(PINATAFRAMERATE);
    // do we still need to set these?
    playerShouldSeeTitleScreen = false;
    fullGameStateMachine.playingAGameState = true;
    levelIsTransitioning = true;
}

//balloonPopGame.drawBG = function() {
    //gameCanvasContext.drawImage(balloonPopBG,0,0);
//}
////////////////////////////////////////
var pinataGame = new bubblePoppingEngine('pinataGame',true);
//pinataGame.titleScreenData = [{name:"Piñata",fontSize:27,spacing:15,x:322,y:285}]; // n with an accent missing in drawFromSheet
pinataGame.titleScreenData = [{name:"Pinata",fontSize:27,spacing:15,x:322,y:285}];
// these USED to work but seem to do nothing now
pinataGame.smashSound = window.audioManager?audioManager.pinataHitSound:document.getElementById('smashSound');
pinataGame.successSound = window.audioManager?audioManager.pinataEatSound:document.getElementById('successSound');;
pinataGame.failSound = window.audioManager?audioManager.pinataFailSound:document.getElementById('failSound');;
const PINATAFRAMERATE = 1000/60;
if (window.AVAILABLE_GAMES) AVAILABLE_GAMES.push(pinataGame);
////////////////////////////////////////
AirGrabGameClass.prototype = new GameClass();

function AirGrabGameClass()
{
  this.name = 'airGrabGame';

  this.FRAME_RATE = 1000/30;

  this.textAnswerFontSize = 30;
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';

  this.LETTER_COLOR = 'black';

  this.drawTransitionText = function()
  {
    customFontFillText(['Grab the Money!', symbolExclamationPointImage], 55,30, 75,50);
    customFontFillText(['Move the Mouse', ' ', symbolEqualsImage, ' Move the arms'], 40,15, gameCanvas.width*0.125,250);
    customFontFillText(['Mouse Click', ' ', symbolEqualsImage, ' Reach and Grab'], 40,15, gameCanvas.width*0.125,450);
  }

  this.imageAnswerWidth = undefined;
  this.imageAnswerHeight = undefined;
  this.imageAnswerHolderWidth = undefined;
  this.imageAnswerHolderHeight = undefined;

  this.audioImageAnswerWidth = undefined;
  this.audioImageAnswerHeight = undefined;
  this.audioImageAnswerHolderWidth = undefined;
  this.audioImageAnswerHolderHeight = undefined;

  this.correctTextAnswerHolderWidth = undefined;
  this.incorrectTextAnswerHolderWidth = undefined;

  this.answerHolderImage = undefined;
  this.arrayOfAnswerHolders = [];
  this.assignAnswerHolder = function()
  {
      let randomNumber = getRandomIntInclusive(0, this.arrayOfAnswerHolders.length - 1);
      return this.arrayOfAnswerHolders[randomNumber];
  }

  this.titleScreenData = [
	  {name: "Money", fontSize: 27, spacing: 15, x: 428, y: 265},
	  {name: "Grab", fontSize: 27, spacing: 15, x: 432, y: 300}
	];

  this.playerCharacter = undefined;
  this.defineAndInitializePlayerCharacter = function()
  {
    this.playerCharacter = new GrabberPlayer();
    this.playerCharacter.initialize();
    this.collidingObject = this.playerCharacter;
  }

  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/200412.mp3', 121.62);

  this.background = undefined;

  this.pregameSpecialCode = function()
  {
    gameAudio = {};
    gameAudio.clap = new sfxOneShot('audio/clap1.mp3');
    gameAudio.paperCrumple = new sfxOneShot('audio/paper1.mp3');
  };

  this.superInitialize = function()
  {
    this.imageAnswerWidth = gameCanvas.width/8;
    this.imageAnswerHeight = gameCanvas.height/9;
    this.imageAnswerHolderWidth = gameCanvas.width/4;
    this.imageAnswerHolderHeight = gameCanvas.height/5;

    this.audioImageAnswerWidth = gameCanvas.width/6;
    this.audioImageAnswerHeight = gameCanvas.height/7;
    this.audioImageAnswerHolderWidth = gameCanvas.width/5;
    this.audioImageAnswerHolderHeight = gameCanvas.height/6;

    this.correctTextAnswerHolderWidth = undefined;
    this.incorrectTextAnswerHolderWidth = undefined;

    this.dollarBillAnswerHolder1 = new DollarBillAnswerHolder("images\\sprites\\air grab\\Bill.png");
    this.dollarBillAnswerHolder2 = new DollarBillAnswerHolder("images\\sprites\\air grab\\Bill2.png");
    this.dollarBillAnswerHolder3 = new DollarBillAnswerHolder("images\\sprites\\air grab\\Bill3.png");
    this.dollarBillAnswerHolder4 = new DollarBillAnswerHolder("images\\sprites\\air grab\\Bill4.png");
    this.arrayOfAnswerHolders.push(this.dollarBillAnswerHolder1);
    this.arrayOfAnswerHolders.push(this.dollarBillAnswerHolder2);
    this.arrayOfAnswerHolders.push(this.dollarBillAnswerHolder3);
    this.arrayOfAnswerHolders.push(this.dollarBillAnswerHolder4);

    this.initializeAnswerSettings();
    drawAnswersManager.initialize();
    this.background = new AirGrabBackground();
    this.playerCharacter.collisionsWithAnswersManager.initialize(gameClassManager.currentGame);
  }

  this.draw = function()
  {
    this.playerCharacter.draw();
    drawAnswersManager.draw();
    this.background.draw();


    promptersManager.drawPromptsWhenAppropriate();
  }

  this.update = function()
  {
    this.moveAnswers();
  }

  this.handleClick = function()
  {
    this.playerCharacter.handleClick();
  }

  this.moveAnswers = function()
  {
    let correctAnswer = promptsAndAnswersManager.correctTargetPromptAndAnswerPairing;
    let incorrectAnswer = promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing;



    correctAnswer.radians += correctAnswer.circlePathVelocity;
    correctAnswer.xCoordinate = correctAnswer.xCoordinate + (Math.cos(correctAnswer.radians) * 10) + correctAnswer.xSpeed;
    correctAnswer.yCoordinate = correctAnswer.yCoordinate + (Math.sin(correctAnswer.radians) * 10) + correctAnswer.ySpeed;

    incorrectAnswer.radians += incorrectAnswer.circlePathVelocity;
    incorrectAnswer.xCoordinate = incorrectAnswer.xCoordinate + (Math.cos(incorrectAnswer.radians) * 10) + incorrectAnswer.xSpeed;
    incorrectAnswer.yCoordinate = incorrectAnswer.yCoordinate + (Math.sin(incorrectAnswer.radians) * 10) + incorrectAnswer.ySpeed;
    this.checkAnswerWallCollisions();
  }

  this.updateAnswerPositions = function()
  {
    let correctAnswer = promptsAndAnswersManager.correctTargetPromptAndAnswerPairing;
    let incorrectAnswer = promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing;
    //move points over time

  }

  this.checkAnswerWallCollisions = function()
  {
    let correctAnswer = promptsAndAnswersManager.correctTargetPromptAndAnswerPairing;
    let incorrectAnswer = promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing;

    if (correctAnswer.xCoordinate + 50 > 500 || correctAnswer.xCoordinate  - 50 < 100)
    {
      correctAnswer.xSpeed *= -1;
    }
    if (correctAnswer.yCoordinate + 50 > 600 || correctAnswer.yCoordinate - 50 < 150)
    {
      correctAnswer.ySpeed *= -1;
    }

    if (incorrectAnswer.xCoordinate + 50 > 500 || incorrectAnswer.xCoordinate  - 50 < 100)
    {

      incorrectAnswer.xSpeed *= -1;
    }
    if (incorrectAnswer.yCoordinate + 50 > 600 || incorrectAnswer.yCoordinate - 50 < 150)
    {
      incorrectAnswer.ySpeed *= -1;
    }
  }

  this.initializeAnswerSettings = function()
  {
    promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xSpeed = getRandomArbitrary(-3,3);
    promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.ySpeed = getRandomArbitrary(-3,3);
    promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xSpeed = getRandomArbitrary(-3,3);
    promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.ySpeed = getRandomArbitrary(-3,3);
  }
}

const airGrabGame = new AirGrabGameClass();

function DollarBillAnswerHolder(image)
{
  this.image = image;
}

function AirGrabBackground()
{
  this.draw = function()
  {
    gameCanvasContext.globalAlpha = 0.3;
    drawFromSheet("images\\Backgrounds\\airBoothPlasticLayer.png", 0,0, gameCanvas.width,gameCanvas.height);
    gameCanvasContext.globalAlpha = 1;
    drawFromSheet("images\\Backgrounds\\airBoothTopLayer.png", 0,0, gameCanvas.width,gameCanvas.height);
  }
}

function GrabberPlayer()
{

  this.armlessBodyImage = "images\\sprites\\air grab\\AirGuy.png";
  this.rightArmImage = "images\\sprites\\air grab\\rightArmm.png";
  this.leftArmImage = "images\\sprites\\air grab\\leftArmm.png";

  this.leftArmX = undefined;
  this.leftArmY = undefined;
  this.leftArmWidth = gameCanvas.width/20;
  this.leftArmHeight = gameCanvas.height/5;
  this.leftArmAngle = 90;
  this.leftArmPivotX = undefined;
  this.leftArmPivotY = undefined;


  this.rightArmX = undefined;
  this.rightArmY = undefined;
  this.rightArmAngle = 90;
  this.rightArmWidth = gameCanvas.width/20;
  this.rightArmHeight = gameCanvas.height/5;
  this.rightArmPivotX = undefined;
  this.rightArmPivotY = undefined;


  this.bodyWidth = gameCanvas.width/5;
  this.bodyHeight = gameCanvas.width/3;

  this.shoulderY = 545;

  this.collisionsWithAnswersManager = new CollisionsWithAnswersManager();

  this.initialize = function()
  {
    this.leftArmX = gameCanvas.width/2 - this.bodyWidth/2;
    this.leftArmY = this.shoulderY - this.leftArmHeight;
    this.rightArmX = gameCanvas.width/2 + this.bodyWidth/2 - this.rightArmWidth;
    this.rightArmY = this.shoulderY - this.rightArmHeight;

    this.leftArmPivotX = this.leftArmX + this.leftArmWidth/2;
    this.leftArmPivotY = this.shoulderY;
    this.rightArmPivotX = this.rightArmX + this.rightArmWidth/2;
    this.rightArmPivotY = this.shoulderY;
  }

  this.draw = function()
  {

    drawFromSheet(this.armlessBodyImage, gameCanvas.width/2 - this.bodyWidth/2,
                                gameCanvas.height - this.bodyHeight - gameCanvas.width*0.0225,
                                this.bodyWidth,this.bodyHeight);
    // gameCanvasContext.drawImage(this.armlessBodyImage, gameCanvas.width/2 - this.bodyWidth/2,
    //                             gameCanvas.height - this.bodyHeight - gameCanvas.width*0.0225,
    //                             this.bodyWidth,this.bodyHeight);

    this.calculateLeftArmAngle();
    drawFromSheet(this.leftArmImage, this.leftArmX,this.leftArmY, this.leftArmWidth,this.leftArmHeight, undefined, this.leftArmAngle,this.leftArmPivotX,this.leftArmPivotY);
    // gameCanvasContext.save();//save context so we can do weird stuff and go back to normal drawing afterwards
    // gameCanvasContext.translate(this.leftArmPivotX,this.leftArmPivotY);//place imaginary hand at pivot point
    // gameCanvasContext.rotate(this.leftArmAngle + Math.PI/2);//rotate with hand at pivot based in radians
    // gameCanvasContext.translate(-this.leftArmPivotX,-this.leftArmPivotY);//return hand to 0,0 of canvas
    // gameCanvasContext.drawImage(this.leftArmImage, this.leftArmX,this.leftArmY, this.leftArmWidth,this.leftArmHeight);//normal draw code affected by rotation
    // gameCanvasContext.restore();//erase any errant abnormal draw code

    this.calculateRightArmAngle();
    drawFromSheet(this.rightArmImage, this.rightArmX,this.rightArmY, this.rightArmWidth,this.rightArmHeight, undefined, this.rightArmAngle,this.rightArmPivotX,this.rightArmPivotY);
    // gameCanvasContext.save();//save context so we can do weird stuff and go back to normal drawing afterwards
    // gameCanvasContext.translate(this.rightArmPivotX,this.rightArmPivotY);//place imaginary hand at pivot point
    // gameCanvasContext.rotate(this.rightArmAngle + Math.PI/2);//rotate with hand at pivot based in radians
    // gameCanvasContext.translate(-this.rightArmPivotX,-this.rightArmPivotY);//return hand to 0,0 of canvas
    // gameCanvasContext.drawImage(this.rightArmImage, this.rightArmX,this.rightArmY, this.rightArmWidth,this.rightArmHeight);//normal draw code affected by rotation
    // gameCanvasContext.restore();//erase any errant abnormal draw code
  }

  this.calculateLeftArmAngle = function()
  {
      this.leftArmAngle = Math.atan2(inputManager.mouseCoordinates.y - this.shoulderY,
                                     inputManager.mouseCoordinates.x - this.leftArmPivotX);
  }

  this.calculateRightArmAngle = function()
  {
      this.rightArmAngle = Math.atan2(inputManager.mouseCoordinates.y - this.shoulderY,
                                      inputManager.mouseCoordinates.x - this.rightArmPivotX);
  }

  this.handleClick = function()
  {
    this.leftArmY = inputManager.mouseCoordinates.y;
    this.rightArmY = inputManager.mouseCoordinates.y;
    this.leftArmPythagoreanALength = Math.abs(this.shoulderY - this.leftArmY);
    this.rightArmPythagoreanALength = Math.abs(this.shoulderY - this.rightArmY);
    this.leftArmPythagoreanBLength = Math.abs(inputManager.mouseCoordinates.x - this.leftArmPivotX);
    this.rightArmPythagoreanBLength = Math.abs(inputManager.mouseCoordinates.x - this.rightArmPivotX);
    this.leftArmHeight = Math.sqrt( (this.leftArmPythagoreanALength*this.leftArmPythagoreanALength) +
                                    (this.leftArmPythagoreanBLength*this.leftArmPythagoreanBLength) );

    this.rightArmHeight = Math.sqrt( (this.rightArmPythagoreanALength*this.rightArmPythagoreanALength) +
                                     (this.rightArmPythagoreanBLength*this.rightArmPythagoreanBLength) );
    this.leftArmY = this.shoulderY - this.leftArmHeight;
    this.rightArmY = this.shoulderY - this.rightArmHeight;
    setTimeout(resetArmSettings, 500);

    this.handleCollisionsWithAnswers(promptsAndAnswersManager.correctTargetPromptAndAnswerPairing,
                                     promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing);
  }

  this.handleCollisionsWithAnswers = function(correctAnswer,incorrectAnswer)
  {
    let mouseX = inputManager.mouseCoordinates.x;
    let mouseY = inputManager.mouseCoordinates.y;
    let correctAnswerX = correctAnswer.xCoordinate;
    let correctAnswerY = correctAnswer.yCoordinate;
    let incorrectAnswerX = incorrectAnswer.xCoordinate;
    let incorrectAnswerY = incorrectAnswer.yCoordinate;
    let correctAnswerWidth = undefined;
    let incorrectAnswerWidth = undefined
    let correctAnswerHeight = undefined;
    let incorrectAnswerHeight = undefined;
    if (promptsAndAnswersManager.currentAnswerDataType === 'string')
    {
      correctAnswerWidth = promptsAndAnswersManager.getCorrectAnswerWidthFromFontStyle(
          gameClassManager.currentGame.textAnswerFontStyle
      );
      incorrectAnswerWidth = promptsAndAnswersManager.getIncorrectAnswerWidthFromFontStyle(
          gameClassManager.currentGame.textAnswerFontStyle
      );

      correctAnswerHeight = 30;
      incorrectAnswerHeight = 30;
      correctAnswerY -= correctAnswerHeight;
      incorrectAnswerY -= correctAnswerHeight;
    }
    else if (promptsAndAnswersManager.currentAnswerDataType === 'IMG')
    {
      correctAnswerWidth = gameClassManager.currentGame.imageAnswerWidth;
      correctAnswerHeight = gameClassManager.currentGame.imageAnswerHeight;
      incorrectAnswerWidth = gameClassManager.currentGame.imageAnswerWidth;
      incorrectAnswerHeight = gameClassManager.currentGame.imageAnswerHeight;
    }
    else if (promptsAndAnswersManager.currentAnswerDataType === 'AUDIO')
    {
      correctAnswerWidth = gameClassManager.currentGame.audioImageAnswerWidth;
      correctAnswerHeight = gameClassManager.currentGame.audioImageAnswerHeight;
      incorrectAnswerWidth = gameClassManager.currentGame.audioImageAnswerWidth;
      incorrectAnswerHeight = gameClassManager.currentGame.audioImageAnswerHeight;
    }


    if (mouseX >= correctAnswerX && mouseX <= correctAnswerX + correctAnswerWidth &&
        mouseY >= correctAnswerY && mouseY <= correctAnswerY + correctAnswerHeight)
        {
          this.collisionsWithAnswersManager.processCollisionWithCorrectAnswer();
          this.collisionsWithAnswersManager.resetAnswers();
          gameClassManager.currentGame.initializeAnswerSettings();
          gameAudio.paperCrumple.play();
        }
    else if (mouseX >= incorrectAnswerX && mouseX <= incorrectAnswerX + incorrectAnswerWidth &&
        mouseY >= incorrectAnswerY && mouseY <= incorrectAnswerY + incorrectAnswerHeight)
        {
          this.collisionsWithAnswersManager.processCollisionWithIncorrectAnswer();
          this.collisionsWithAnswersManager.resetAnswers();
          gameClassManager.currentGame.initializeAnswerSettings();
          gameAudio.paperCrumple.play();
        }

      gameAudio.clap.play();

  }
}

function resetArmSettings()
{
  let airGuy = gameClassManager.currentGame.playerCharacter;
  airGuy.leftArmHeight = gameCanvas.height/5;
  airGuy.rightArmHeight = gameCanvas.height/5;
  airGuy.leftArmY = airGuy.shoulderY - airGuy.leftArmHeight;
  airGuy.rightArmY = airGuy.shoulderY - airGuy.rightArmHeight;
  airGuy.leftArmX = gameCanvas.width/2 - airGuy.bodyWidth/2;
  airGuy.rightArmX = gameCanvas.width/2 + airGuy.bodyWidth/2 - airGuy.rightArmWidth;
}
frogRiverGameClass.prototype = new GameClass();

function frogRiverGameClass()
{
  this.name = 'frogRiverGame';
  this.playerCharacter = undefined;
  this.textAnswerFontSize = '30';
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';

  this.imageAnswerWidth = 70;
  this.imageAnswerHeight = 70;
  // this.imageAnswerHolderWidth = 60;
  // this.imageAnswerHolderHeight = 60;
  this.audioImageAnswerWidth = 70;
  this.audioImageAnswerHeight = 70;
  // this.audioImageAnswerHolderWidth = 60;
  // this.audioImageAnswerHolderHeight = 60;

  this.titleScreenData = [{name: "Frog",fontSize: 27,spacing: 15,x: 530, y: 265},
                          {name: "River",fontSize: 27,spacing: 15,x: 525, y: 305}];

  this.drawTransitionText = function()
  {
    customFontFillText(['Jump on the Answer', symbolExclamationPointImage], 60,30, 50,50);
    customFontFillText([upArrowImage, ' ', symbolEqualsImage, ' Jump Up'], 30,15, 210,200);
    customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' Move right'], 30,15, 350,350);
    customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' Move left'], 30,15, 50,350);
  }

  this.FRAME_RATE = 1000/30;

  this.playerCharacter = undefined;
  this.defineAndInitializePlayerCharacter = function()
  {
    this.playerCharacter = new FrogRiverPlayer();
  }
  this.background = undefined;
  this.lilyPadManager = undefined;
  this.backButtonColor = 'yellow';
  this.backButtonTextColor = 'blueViolet';

  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/200410.mp3', 73.46);

  this.pregameSpecialCode = function()
  {
    this.lilyPadManager = new LilyPadManager();
    this.lilyPadManager.initializeLilyPads();
    gameAudio.frogJump = new sfxOneShot('audio/V/frogJump.mp3');
    gameAudio.riverComplete = new sfxOneShot('audio/V/riverComplete.mp3');
  }

  this.superInitialize = function()
  {
    this.background = new FrogRiverBackground();
    // initializePromptAndAnswerObjects();
    // promptsAndAnswersManager.setOrResetPromptsAndAnswers();
    // promptersManager.loadAppropriatePrompterBasedOnCurrentPromptsDataType();
  }

  this.draw = function()
  {
    this.background.draw();
    this.lilyPadManager.drawLilyPads();
    this.playerCharacter.draw();

    if(this.answerCount > -1){
      drawAnswersManager.draw();
    }

    promptersManager.drawPromptsWhenAppropriate();
  }

  this.update = function()
  {
    this.lilyPadManager.moveLilyPads();
    this.lilyPadManager.handleOffScreenLilyPads();
    this.playerCharacter.updateCenterX();
    this.playerCharacter.moveWhileOnLilyPad();
    this.playerCharacter.handleOffScreen();
  }

  this.handleLeftArrowDown = function()
  {
    if (this.playerCharacter.y === 600)
    {
      this.playerCharacter.x -= 3;
    }
  };

  this.handleRightArrowDown = function()
  {
    if (this.playerCharacter.y === 600)
    {
      this.playerCharacter.x += 3;
    }
  }

  this.handleUpArrowDown = function()
  {
    if (this.answerCount === -1)
    {
      gameAudio.riverComplete.play();
    }

    if (this.answerCount === -1)
    {
      this.playerCharacter.y = 600;
      this.playerCharacter.currentLilyPad = undefined;
      this.answerCount = 4;
      this.additiveToAnswers = 4;
      this.collisionsWithAnswersManager.resetAnswers();
    }
    else{
      this.playerCharacter.checkForLilyLanding();
    }

  }

  this.answerCount = 4;
  this.additiveToAnswers = 4;
}

const frogRiverGame = new frogRiverGameClass();

function FrogRiverPlayer()
{
  this.x = Math.random() * 640;
  this.y = 600;

  this.width = 64;
  this.height = 50;
  this.centerX = this.x + this.width/2;

  this.updateCenterX = function()
  {
    this.centerX = this.x + this.width/2;
  }

  this.color = 'DarkGreen';
  this.sprite = "images\\sprites\\frogRiver\\Frog.png";

  this.draw = function()
  {
    drawFromSheet(this.sprite, this.x, this.y, this.width, this.height);
    //gameCanvasContext.drawImage(this.sprite, this.x, this.y, this.width, this.height);
  }

  this.checkForLilyLanding = function()
  {
    let answerCount = frogRiverGame.answerCount;
    let additive = frogRiverGame.additiveToAnswers;
    let leftLilyIndex = answerCount + additive;

    for (let i = leftLilyIndex; i < leftLilyIndex + 2; i++)
    {

        let lilyToCheck = frogRiverGame.lilyPadManager.arrayOfLilyPads[i];
        let lilyLeftBoundary = lilyToCheck.xCoordinate;
        let lilyRightBoundary = lilyLeftBoundary + lilyToCheck.width;
        let frogCenterPoint = this.centerX;

        if (frogCenterPoint > lilyLeftBoundary && frogCenterPoint < lilyRightBoundary)
        {
          this.y = lilyToCheck.yCoordinate + 10;

          this.currentLilyPad = lilyToCheck;

          if (lilyToCheck.answer === promptsAndAnswersManager.correctTargetPromptAndAnswerPairing)
          {
            frogRiverGame.collisionsWithAnswersManager.processCollisionWithCorrectAnswer();// amountCorrect++;
          }
          else
          {
            frogRiverGame.collisionsWithAnswersManager.processCollisionWithIncorrectAnswer();
          }
          calculateAccuracy();

          gameAudio.frogJump.play();

          this.resetAnswersInOccupiedLilyLine();

          frogRiverGame.answerCount--;
          frogRiverGame.additiveToAnswers--;

          if (frogRiverGame.answerCount > -1)
          {
            frogRiverGame.collisionsWithAnswersManager.resetAnswers();
          }
        }
      }

    }


  this.currentLilyPad = undefined;

  this.moveWhileOnLilyPad = function()
  {
    if (this.currentLilyPad !== undefined)
    {
      this.x += this.currentLilyPad.speed*this.currentLilyPad.direction;
    }
  }

  this.handleOffScreen = function()
  {
    if (this.x > 690)
    {
      {
        this.x = -50;
      }
    }
    if (this.x < -50)
    {
      this.x = 690;
    }
  }

  this.resetAnswersInOccupiedLilyLine = function() {
    this.currentLilyPad.answer = undefined;
    this.currentLilyPad.lilyNeighbourOnSameLine.answer = undefined;
  }
}

function LilyPadClass()
{
  this.xCoordinate = undefined;
  this.yCoordinate = undefined;

  this.image = undefined;
  this.answer = undefined;

  this.width = 100;
  this.height = 75;

  this.speed = 2;

  this.color = 'Chartreuse';

  this.direction = undefined;

  this.lilyNeighbourOnSameLine = undefined;

  this.draw = function()
  {
    drawFromSheet(this.image, this.xCoordinate,this.yCoordinate, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.xCoordinate,this.yCoordinate, this.width,this.height);
  }

  this.move = function()
  {
    this.xCoordinate += this.speed*this.direction;
    if (this.answer !== undefined)
    {
      this.centerAnswersXCoordinate();
    }
  }

  this.centerAnswersXCoordinate = function() {
    this.answer.xCoordinate = this.xCoordinate + this.width / 2;

    if (promptsAndAnswersManager.currentAnswerDataType === 'string'){
      var answerWidth = gameCanvasContext.measureText(this.answer.textAssociation).width;
      this.answer.xCoordinate -= answerWidth / 2;
    }
    else if (promptsAndAnswersManager.currentAnswerDataType === 'IMG'){
      this.answer.xCoordinate -= gameClassManager.currentGame.imageAnswerWidth / 2;
    }
    else if (promptsAndAnswersManager.currentAnswerDataType === 'AUDIO'){
      this.answer.xCoordinate -= gameClassManager.currentGame.audioImageAnswerWidth / 2;
    }
}

  this.handleOffScreen = function()
  {
    if (this.xCoordinate > 690)
    {
      {
        this.xCoordinate = -50;
        if (this.answer !== undefined)
        {
          this.centerAnswersXCoordinate();
        }
      }
    }

    if (this.xCoordinate < -50)
    {
      this.xCoordinate = 690;
      if (this.answer !== undefined)
      {
        this.centerAnswersXCoordinate();
      }
    }
  }
}

function FrogRiverBackground()
{
  this.image = "images\\Backgrounds\\river.png";

  this.draw = function()
  {
    drawFromSheet(this.image, 0,0, gameCanvas.width,gameCanvas.height);
    //gameCanvasContext.drawImage(this.image, 0,0, gameCanvas.width,gameCanvas.height);
  }
}



function initializeOrResetLilyPads()
{

}

function drawLilyPads()
{
  for (let arrayOfLilyPadsIndex = 0; arrayOfLilyPadsIndex < arrayOfLilyPads.length; arrayOfLilyPadsIndex++)
  {
    arrayOfLilyPads[arrayOfLilyPadsIndex].draw();
  }
}

function moveLilyPads()
{
  for (let arrayOfLilyPadsIndex = 0; arrayOfLilyPadsIndex < arrayOfLilyPads.length; arrayOfLilyPadsIndex++)
  {
    arrayOfLilyPads[arrayOfLilyPadsIndex].move();
  }
}

function handleOffScreenLilyPads()
{
  for (let arrayOfLilyPadsIndex = 0; arrayOfLilyPadsIndex < arrayOfLilyPads.length; arrayOfLilyPadsIndex++)
  {
    arrayOfLilyPads[arrayOfLilyPadsIndex].handleOffScreen();
  }
}

function LilyPadManager()
{
  this.arrayOfLilyPads = [];

  this.arrayOfLilyPadImages = ["images\\sprites\\frogRiver\\lilyImage1.png","images\\sprites\\frogRiver\\lilyImage2.png","images\\sprites\\frogRiver\\lilyImage3.png","images\\sprites\\frogRiver\\lilyImage4.png"];

  this.answerCount = 0;

  this.initializeLilyPads = function()
  {
    for (let arrayOfLilyPadsIndex = 0; arrayOfLilyPadsIndex < 5; arrayOfLilyPadsIndex++)
    {
      let lilyPad1 = new LilyPadClass();
      lilyPad1.yCoordinate = 150 + arrayOfLilyPadsIndex*90;
      lilyPad1.xCoordinate = Math.floor(Math.random()*640);
      let randomNumber = getRandomIntInclusive(0,this.arrayOfLilyPadImages.length - 1);
      lilyPad1.image = this.arrayOfLilyPadImages[randomNumber];
      let lilyPad2 = new LilyPadClass();
      lilyPad2.xCoordinate = Math.floor(Math.random()*640);

      do
      {
        lilyPad2.xCoordinate = Math.floor(Math.random()*640);
      }
      while (Math.abs(lilyPad2.xCoordinate - lilyPad1.xCoordinate) < 150)

      randomNumber = getRandomIntInclusive(0,this.arrayOfLilyPadImages.length - 1);
      lilyPad2.image = this.arrayOfLilyPadImages[randomNumber];
      lilyPad2.yCoordinate = 150 + arrayOfLilyPadsIndex*90;

      if (arrayOfLilyPadsIndex%2 === 0)
      {
        lilyPad1.direction = 1;//move to the right
        lilyPad2.direction = 1;//move to the right
      } else {
        lilyPad1.direction = -1;//move to the left
        lilyPad2.direction = -1;//move to the left
      }

      lilyPad1.lilyNeighbourOnSameLine = lilyPad2;
      lilyPad2.lilyNeighbourOnSameLine = lilyPad1;

      this.arrayOfLilyPads.push(lilyPad1);
      this.arrayOfLilyPads.push(lilyPad2);
    }
  }

  this.drawLilyPads = function()
  {
    for (let lilyPadIndex = 0; lilyPadIndex < this.arrayOfLilyPads.length; lilyPadIndex++)
    {
      this.arrayOfLilyPads[lilyPadIndex].draw();
    }
  }

  this.moveLilyPads = function()
  {
    for (let arrayOfLilyPadsIndex = 0; arrayOfLilyPadsIndex < this.arrayOfLilyPads.length; arrayOfLilyPadsIndex++)
    {
      this.arrayOfLilyPads[arrayOfLilyPadsIndex].move();
    }
  }

  this.handleOffScreenLilyPads = function()
  {
    for (let arrayOfLilyPadsIndex = 0; arrayOfLilyPadsIndex < this.arrayOfLilyPads.length; arrayOfLilyPadsIndex++)
    {
      this.arrayOfLilyPads[arrayOfLilyPadsIndex].handleOffScreen();
    }
  }
}
//penaltySpecifics
//2 stated game. 2 letters come to the screen; one on the left, one on the right. Player has to make the correct choice about where to shoot the ball. If player does get it correctly, she wins one point
let arrayOfBallImages = [];
let arrayOfBallImagesIndex = 0
let arrayOfGoalkeeperImages = [];
let arrayOfGoalkeeperImagesIndex = 0;

arrayOfGoalkeeperImages.push("images\\sprites\\Penalty\\goalkeeper\\1.png");
arrayOfGoalkeeperImages.push("images\\sprites\\Penalty\\goalkeeper\\2.png");
arrayOfGoalkeeperImages.push("images\\sprites\\Penalty\\goalkeeper\\3.png");
arrayOfGoalkeeperImages.push("images\\sprites\\Penalty\\goalkeeper\\4.png");
arrayOfGoalkeeperImages.push("images\\sprites\\Penalty\\goalkeeper\\5.png");
arrayOfGoalkeeperImages.push("images\\sprites\\Penalty\\goalkeeper\\6.png");
arrayOfGoalkeeperImages.push("images\\sprites\\Penalty\\goalkeeper\\7.png");
arrayOfGoalkeeperImages.push("images\\sprites\\Penalty\\goalkeeper\\8.png");
arrayOfGoalkeeperImages.push("images\\sprites\\Penalty\\goalkeeper\\9.png");
arrayOfGoalkeeperImages.push("images\\sprites\\Penalty\\goalkeeper\\10.png");
arrayOfGoalkeeperImages.push("images\\sprites\\Penalty\\goalkeeper\\11.png");
arrayOfGoalkeeperImages.push("images\\sprites\\Penalty\\goalkeeper\\12.png");
arrayOfGoalkeeperImages.push("images\\sprites\\Penalty\\goalkeeper\\13.png");
arrayOfGoalkeeperImages.push("images\\sprites\\Penalty\\goalkeeper\\14.png");

arrayOfBallImages.push("images\\sprites\\Penalty\\ball\\ball0000.png");
arrayOfBallImages.push("images\\sprites\\Penalty\\ball\\ball0001.png");
arrayOfBallImages.push("images\\sprites\\Penalty\\ball\\ball0002.png");
arrayOfBallImages.push("images\\sprites\\Penalty\\ball\\ball0003.png");
arrayOfBallImages.push("images\\sprites\\Penalty\\ball\\ball0004.png");
arrayOfBallImages.push("images\\sprites\\Penalty\\ball\\ball0005.png");
arrayOfBallImages.push("images\\sprites\\Penalty\\ball\\ball0006.png");
arrayOfBallImages.push("images\\sprites\\Penalty\\ball\\ball0007.png");
arrayOfBallImages.push("images\\sprites\\Penalty\\ball\\ball0008.png");
arrayOfBallImages.push("images\\sprites\\Penalty\\ball\\ball0009.png");
arrayOfBallImages.push("images\\sprites\\Penalty\\ball\\ball0010.png");

const penaltyBackButtonRectangleColor = 'yellow';
const penaltyBackButtonTextColor = 'red';
const penaltyLetterColor = 'BlueViolet';
const penaltyGameState = {
  DecisionState: 1,
  PenaltyShootingState: 2,
};
const BALL_WIDTH = 100;
const BALL_HEIGHT = 100;
const GOAL_WIDTH = 600;
const GOAL_HEIGHT = 300;

const BALL_RIGHTSIDE_X = 520;
const BALL_RIGHTSIDE_Y = 90;
const BALL_LEFTSIDE_X = 120;
const BALL_LEFTSIDE_Y = 90;

const BALL_X = 295;
const BALL_Y = 500;
const GOAL_X = 15;
const GOAL_Y = 0;

const GOALKEEPER_WIDTH = 500;
const GOALKEEPER_HEIGHT = 300;

const GOALKEEPER_X = 70;
const GOALKEEPER_Y = 70;

penaltyGameClass.prototype = new GameClass();
function penaltyGameClass(){
    this.name = 'penaltyGame';
    this.currentState = penaltyGameState.DecisionState;
    this.selectedSide;
    this.correctSide;
    //this.totalFrameCountToChangeState = 30;
    //this.currentFrame = 0;
    this.frameCountToChangeSpriteForGoalkeeper = 2;
    this.currentFrameToChangeSpriteForGoakeeper = 0;
    this.frameRate = 30;
    this.ballWidth = BALL_WIDTH;
    this.ballHeight = BALL_HEIGHT;
    this.ballX = BALL_X;
    this.ballY = BALL_Y;
    this.goalkeeperX = GOALKEEPER_X;
    this.goalkeeperY = GOALKEEPER_Y;
    this.goalkeeperWidth = GOALKEEPER_WIDTH;
    this.goalkeeperHeight = GOALKEEPER_HEIGHT;
    this.ArrayOfGoalkeeperImages = [];
    this.ArrayOfGoalkeeperImagesIndex = 0;
    this.ArrayOfBallImages = [];
    this.ArrayOfBallImagesIndex = 0;
    this.FlipGoalkeeper = 0;
    this.sides = {
      left : {number : 1, isCorrect : false, drawX : 50, drawY : 125},
      right : {number : 2, isCorrect : false, drawX : 500, drawY : 125}
    };
    this.titleScreenData = [{
    name: "Penalty",
    fontSize: 17,
    spacing: 12,
    x: 324, y: 405
    }];
    this.superInitialize = this.initialize;
    this.initialize = function(){
        gameInterval.reset(this.frameRate);
        this.drawLettersAndCorrectSide();
        this.superInitialize();
    };
    this.defineAndInitializePlayerCharacter = function () {

    };

    this.handleLeftArrowDown = function(){
        if (this.currentState === penaltyGameState.DecisionState) {
          this.selectedSide = this.sides.left;
          this.changeState();
          this.currentFrame = 0;
        }
    };

    this.handleRightArrowDown = function(){
      if (this.currentState === penaltyGameState.DecisionState) {
        this.selectedSide = this.sides.right;
        this.changeState();
        this.currentFrame = 0;
      }
    };

    this.frameRate = 1000/30;
    this.letterSpawnInterval = 2000;

    this.initialize = function(){
      this.setCorrectSide();
      this.currentstate = penaltyGameState.DecisionState;
    };

    this.update = function(){
        this.draw();
        // if (this.currentState === penaltyGameState.PenaltyShootingState){
        //   this.handleFrameCountToChangeState();
        // }
        //collisionsWithAnswersManager.handleCollisionsWithAnswers();
    };

    this.handleFrameCountToChangeState = function(){
      if (arrayOfGoalkeeperImagesIndex >= arrayOfGoalkeeperImages.length) {
        this.changeState();
        promptersManager.promptThePlayer();
      }
    }

    this.draw = function(){
        this.drawBackground();
        this.drawBall();
        this.drawGoal();
        this.drawGoalKeeper();
      if (this.currentState === penaltyGameState.DecisionState) {
        this.drawLetters();
        drawAnswersManager.draw();
        promptersManager.drawPromptsWhenAppropriate();
      }
      else if (this.currentState === penaltyGameState.PenaltyShootingState){
        this.drawShootingAnimation();
      }
    };

    this.drawBackground = function(){
      drawFromSheet('images\\Backgrounds\\Grass.png', 0, 0, gameCanvas.width, gameCanvas.height);
    };

    this.drawBall = function(){
      if (this.currentState === penaltyGameState.DecisionState) {
        arrayOfBallImagesIndex = 0;
        this.ballX = BALL_X;
        this.ballY = BALL_Y;
        this.ballWidth = BALL_WIDTH;
        this.ballHeight = BALL_HEIGHT;
      }
      else {
        arrayOfBallImagesIndex++;
        if (this.selectedSide.number === 1) {
          var direction = Math.atan2( BALL_LEFTSIDE_Y - BALL_Y, BALL_LEFTSIDE_X - BALL_X );
        }
        else {
          var direction = Math.atan2( BALL_RIGHTSIDE_Y - BALL_Y, BALL_RIGHTSIDE_X - BALL_X );
        }
          var speedX = Math.cos(direction) * 11;
					var speedY = Math.sin(direction) * 11;
          this.ballX += speedX;
          this.ballY += speedY;
          this.ballWidth -= 1;
          this.ballHeight -= 1;
        if (arrayOfBallImagesIndex >= arrayOfBallImages.length) {
          arrayOfBallImagesIndex = 0;
        }
      }
      drawFromSheet(arrayOfBallImages[arrayOfBallImagesIndex], this.ballX, this.ballY, this.ballWidth, this.ballHeight);
    };

    this.drawGoal = function(){
      drawFromSheet("images\\sprites\\Penalty\\goal.png", GOAL_X,GOAL_Y, GOAL_WIDTH,GOAL_HEIGHT);
    };

    this.drawGoalKeeper = function(){
      if (this.currentState === penaltyGameState.DecisionState) {
        arrayOfGoalkeeperImagesIndex = 0;
      }
      else {
        if ( this.frameCountToChangeSpriteForGoalkeeper  > this.currentFrameToChangeSpriteForGoakeeper) {
          this.currentFrameToChangeSpriteForGoakeeper++;
        }
        else {
          this.currentFrameToChangeSpriteForGoakeeper = 0;
          arrayOfGoalkeeperImagesIndex++;
        }
        if (arrayOfGoalkeeperImagesIndex >= arrayOfGoalkeeperImages.length) {
          this.changeState();
          promptersManager.promptThePlayer();
          arrayOfGoalkeeperImagesIndex = 0;
        }
      }
      drawFromSheet(arrayOfGoalkeeperImages[arrayOfGoalkeeperImagesIndex], this.goalkeeperX, this.goalkeeperY, this.goalkeeperWidth, this.goalkeeperHeight, this.FlipGoalkeeper);
    };


    this.drawLetters = function(){
      for (var key of Object.keys(this.sides)) {
        // gameCanvasContext.fillStyle = gameClassManager.currentGame.backButtonColor;// FIXME: There will be drawing of the letters here.
        // gameCanvasContext.fillRect( this.sides[key].drawX, this.sides[key].drawY, 50, 50);
        if (this.correctSide === this.sides[key].number) {
          promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate = this.sides[key].drawY;
          promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate = this.sides[key].drawX;
        }
        else {
          promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate = this.sides[key].drawY;
          promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate = this.sides[key].drawX;
        }
      }
    };

    this.changeState = function(){
      switch (this.currentState) {
        case penaltyGameState.DecisionState:
          if (this.correctSide === this.selectedSide.number) {
            genAudio.playPositive();
            amountCorrect++;
            this.collisionsWithAnswersManager.processCollisionWithAnswer();
          }
          else {
            genAudio.playNegative();
            amountIncorrect++;
            this.collisionsWithAnswersManager.processCollisionWithAnswer();
          }
          this.selectedSide == null;
          this.ResetStrikerAndGoalKeeper();
          this.currentState = penaltyGameState.PenaltyShootingState;
          this.setCorrectSide();
          //penaltyGame.changeState();
          break;
        case penaltyGameState.PenaltyShootingState:
          this.ResetSelectionScreen();
          // this.UpdateScore();
          this.currentState = penaltyGameState.DecisionState;
          break;
        default:

      }
    };

    this.setCorrectSide = function(){
      if (this.correctSide === this.sides.left.number){
        this.FlipGoalkeeper = 0;
      }
      else {
        this.FlipGoalkeeper = 1;
      }
      this.correctSide = Math.floor(Math.random() * 2) + 1;
    };

    this.ResetStrikerAndGoalKeeper = function(){
      // TODO: not implemented yet. Will be used for starting animation when decision is made.
    };

    this.ResetSelectionScreen = function(){
      // TODO: not implemented yet. Will be used for reseting selection when animation is finished.
    };

    this.drawShootingAnimation = function(){
     // TODO: animation drawing not implemented yet. So this function only switches to the other state at the moment.
    }
}
function stateChanger(objWhoseStateShouldChange) {
    penaltyGame.changeState();
}
var penaltyGame = new penaltyGameClass();
//flowerSpecifics
//Two seeds (WORDS or LETTERS) fall from a tree.  Catching the correct seed in the pot makes a flower, catching the wrong seed makes a weed.

const flowerBackButtonRectangleColor = 'yellow';
const flowerBackButtonTextColor = 'red';
const flowerLetterColor = 'BlueViolet';

flowerGameClass.prototype = new GameClass();
function flowerGameClass(){
    this.name = 'flowerGame';

    this.FRAME_RATE = 1000/50;
    this.letterSpawnInterval = 2000;
	this.titleScreenData = [{
	  name: "Flower",
	  fontSize: 27,
	  spacing: 15,
	  x: 222, y: 385
	}];

  this.drawTransitionText = function()
  {
    customFontFillText(['Catch the answers!', symbolExclamationPointImage], 55,30, 25,50);
    customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' Move right'], 40,15, gameCanvas.width*0.225,250);
    customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' Move left'], 40,15, gameCanvas.width*0.225,450);
  };

    this.textAnswerFontSize = 30;
    this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';

    this.playerCharacter = undefined;
    this.defineAndInitializePlayerCharacter = function()
    {
      this.playerCharacter = new FlowerClass();
      this.collidingObject = this.playerCharacter;
    }
    this.backgroundMusic = new MusicTrack('audio/backgroundTracks/flowerSong(2).mp3', 18);
    this.background = undefined;
    const SEED_ONE_STARTING_X = 100;
    const SEED_ONE_STARTING_Y = 10;
    const SEED_TWO_STARTING_X = 300;
    const SEED_TWO_STARTING_Y = 10;
    const SEED_flowerWidth = 15;
    const SEED_HEIGHT = 15;

    const GRAVITY = 3;

    this.seedOneXCoordinate = undefined;
    this.seedOneYCoordinate = undefined;
    this.seedTwoXCoordinate = undefined;
    this.seedTwoYCoordinate = undefined;

    this.flowerArray = new Array("images\\sprites\\Flower\\10 Second Flower.png", "images\\sprites\\Flower\\10 Second Flower.png", "images\\sprites\\Flower\\10 Second Flower.png", "images\\sprites\\Flower\\10 Second Flower.png", "images\\sprites\\Flower\\10 Second Flower.png");

    var amountCorrectThisGameSession = undefined;
    var amountCorrectAtStart = undefined;

    this.superInitialize = this.initialize;
    this.initialize = function()
    {

      this.collidingObject = this.playerCharacter;
      this.background = new FlowerBackgroundClass();
      amountCorrectAtStart = amountCorrect;
      amountCorrectThisGameSession = 0;
      //initialize seeds
      this.seedOneXCoordinate = SEED_ONE_STARTING_X;
      this.seedOneYCoordinate = SEED_ONE_STARTING_Y;
      this.seedTwoXCoordinate = SEED_TWO_STARTING_X;
      this.seedTwoYCoordinate = SEED_TWO_STARTING_Y;
      // initializePromptAndAnswerObjects();
      // promptsAndAnswersManager.setOrResetPromptsAndAnswers();
      promptersManager.loadAppropriatePrompterBasedOnCurrentPromptsDataType();
	  this.superInitialize();
    };

    this.startGameSpecialCode = function()
    {
      gameAudio.flowerPotLeft = new sfxOneShot('audio/V/flowerPotL.mp3');
      gameAudio.flowerPotRight = new sfxOneShot('audio/V/flowerPotR.mp3');
    }

    this.handleLeftArrowDown = function(){
        this.playerCharacter.xSpeed = this.playerCharacter.LEFT_ARROW_SPEED;
        gameAudio.flowerPotLeft.play();
    };

    this.handleRightArrowDown = function(){
        this.playerCharacter.xSpeed = this.playerCharacter.RIGHT_ARROW_SPEED;
        gameAudio.flowerPotRight.play();
    };

    this.update = function()
    {
      if (!promptersManager.shouldBeDrawingAPrompt &&
          fullGameStateMachine.currentState === fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.playingMiniGame)
      {
        this.movePlayer();
        this.moveAnswers();
        this.moveSeeds();
        this.handleAnswersOffScreen();
        this.collisionsWithAnswersManager.handleCollisionsWithAnswers(this.collidingObject);

      }
    };

    this.draw = function(){
        this.background.draw();
        this.playerCharacter.draw();
        drawAnswersManager.draw();
        promptersManager.drawPromptsWhenAppropriate();
        this.drawSeeds();
        this.sproutFlowers();
    }

    this.movePlayer = function(){
        this.playerCharacter.x += this.playerCharacter.xSpeed;
        this.handleBoundaries();
    };

    this.moveAnswers = function(){
        promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate += GRAVITY;
        promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate +=GRAVITY;
    }

    this.drawSeeds = function(){
        gameCanvasContext.fillStyle = 'brown';
        gameCanvasContext.fillRect(this.seedOneXCoordinate, this.seedOneYCoordinate, SEED_flowerWidth, SEED_HEIGHT);
        gameCanvasContext.fillRect(this.seedTwoXCoordinate, this.seedTwoYCoordinate, SEED_flowerWidth, SEED_HEIGHT);
    }

    this.moveSeeds = function()
    {
      this.seedOneYCoordinate += GRAVITY;
      this.seedTwoYCoordinate += GRAVITY;
    }

    this.handleBoundaries = function() {
        if (this.playerCharacter.x >= 600) {
            this.playerCharacter.x = 600;
        }
        if (this.playerCharacter.x <= 30) {
            this.playerCharacter.x = 30;
        }
    }

    this.handleAnswersOffScreen = function()
    {
      if (promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate > gameCanvas.height)
      {
        promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate = -10;
      }

      if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate > gameCanvas.height)
      {
        promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate = -10;
      }
    }

    this.sproutFlowers = function(){
      this.flowerWidth = 30;
      this.flowerHeight = 60;
      amountCorrectThisGameSession = amountCorrect - amountCorrectAtStart;
      for(i = 0; i < amountCorrectThisGameSession; i++){
        var LeftOrRight = Math.cos(Math.PI*i);
        var flowerLocationX = this.playerCharacter.x;
        if(i > 0){
        flowerLocationX = this.playerCharacter.x + (this.flowerWidth*LeftOrRight*(-1));
        }
        if(i > 2){
          flowerLocationX = this.playerCharacter.x + (this.flowerWidth*LeftOrRight*(-2));
        }

        drawFromSheet(this.flowerArray[i], (flowerLocationX),(this.playerCharacter.y - this.flowerHeight), this.flowerWidth, this.flowerHeight);
        //gameCanvasContext.drawImage(this.flowerArray[i], (flowerLocationX),(this.playerCharacter.y - this.flowerHeight), this.flowerWidth, this.flowerHeight);

      }

      if(amountCorrect > amountCorrectThisGameSession){
          amountCorrectThisGameSession = amountCorrect;
      }


    }
}

const flowerGame = new flowerGameClass();

function FlowerClass()
{
  this.x = gameCanvas.width/3;
  this.y = gameCanvas.height - gameCanvas.height/9;

  this.width = 20;
  this.height = 20;

  this.LEFT_ARROW_SPEED = -5;
  this.RIGHT_ARROW_SPEED = 5;

  this.xSpeed = 0;

  this.draw = function()
  {
      gameCanvasContext.fillStyle = 'red';
      gameCanvasContext.fillRect(this.x,this.y, this.width, this.height);
  }
}

function FlowerBackgroundClass()
{
  this.color = 'cyan';
  this.draw = function()
  {
    gameCanvasContext.fillStyle = this.color;
    gameCanvasContext.fillRect(0,0, gameCanvas.width,gameCanvas.height);
    drawFromSheet("images\\Backgrounds\\Flower2.png", 0,0, gameCanvas.width,gameCanvas.height);
    //gameCanvasContext.drawImage("images\\Backgrounds\\Flower2.png", 0,0, gameCanvas.width,gameCanvas.height);
  }
}
helloWorldGameClass.prototype = new GameClass();
function helloWorldGameClass()
{
  this.name = 'hello world game';
  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/helloWorldSong.mp3', 16);

  this.playerCharacter = undefined;
  this.NPC = undefined;
  this.defineAndInitializePlayerCharacter = function()
	{
		this.playerCharacter = new HelloWorldCharacter("images\\sprites\\dodgeBall\\Player1.png", gameCanvas.width*0.1);
    this.NPC = new HelloWorldCharacter("images\\sprites\\dodgeBall\\Player4.png", gameCanvas.width*0.8);
		// this.playerCharacter.initialize();

    this.playerCharacterSpeechBubbleHW1A = new CharacterSpeechBubbleHW1("images\\sprites\\dayTime\\speechBubbleFromLeftA.png","images\\sprites\\dayTime\\speechBubbleFromLeftAHighlighted.png", gameCanvas.width*0.1,gameCanvas.height*0.1, gameCanvas.width/3,gameCanvas.height/3);
    this.playerCharacterSpeechBubbleHW1B = new CharacterSpeechBubbleHW1("images\\sprites\\dayTime\\speechBubbleFromLeftB.png","images\\sprites\\dayTime\\speechBubbleFromLeftBHighlighted.png", gameCanvas.width*0.2,gameCanvas.height*0.3, gameCanvas.width/3,gameCanvas.height/3);
    this.NPCSpeechBubble = new CharacterSpeechBubbleHW1("images\\sprites\\dayTime\\speechBubbleFromRIght.png","images\\sprites\\dayTime\\speechBubbleFromRIght.png", gameCanvas.width*0.5,gameCanvas.height*0.2, gameCanvas.width/3,gameCanvas.width/3);
  }

  this.drawTransitionText = function()
  {
    customFontFillText(['Click the correct '], 35,30, 100,50);
    customFontFillText(['reply!', symbolExclamationPointImage], 35,30, gameCanvas.width/2 - 150,100);
    customFontFillText(['Mouse Click ', symbolEqualsImage, ' Choose Reply'], 30,15, 110,gameCanvas.height/2);
  }

  this.FRAME_RATE = 1000/30;

  this.conversationPatternManager = undefined;
  this.conversationAudioManager = undefined;

  this.background = new HelloWorldBackground();

  this.textAnswerFontSize = '30';
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';
	this.titleScreenData = [
	  {name: "Hello", fontSize: 25, spacing: 12, x: 530, y: 365},
	  {name: "World", fontSize: 17, spacing: 10, x: 530, y: 400}
	];

	this.imageAnswerHolderWidth = undefined;
  this.imageAnswerHolderHeight = undefined;

	this.audioImageAnswerHolderWidth = undefined;
  this.audioImageAnswerHolderHeight = undefined;

  this.correctTextAnswerHolderWidth = undefined;
  this.incorrectTextAnswerHolderWidth = undefined;


  this.startGameSpecialCode = function()
  {
    gameClassManager.currentGame.conversationAudioManager.assignOrderOfAudioAnswers();
    musicManager.startDuck();
    gameClassManager.currentGame.conversationAudioManager.assignOnendedFunctions();

    gameClassManager.currentGame.conversationAudioManager.promptBubble.message.play();
    gameClassManager.currentGame.conversationAudioManager.promptBubble.isBeingHeard = true;
  }

  this.initialize = function()
	{
    this.defineAndInitializePlayerCharacter();
    this.conversationPatternManager = new ConversationPatternManager();
    this.conversationAudioManager = new ConversationAudioManager();
    this.conversationPatternManager.initializeArraysOfConvoPatterns();
    this.currentLanguageArray = this.setCurrentLanguageArray();
    this.conversationPatternManager.chooseCorrectConversationPattern(this.currentLanguageArray);
    this.conversationPatternManager.chooseIncorrectConversationPattern(this.currentLanguageArray);
    this.conversationPatternManager.assignAudioClipsToSpeechBubbles();

    this.conversationAudioManager.getAudioClips();
    // this.conversationAudioManager.playAudioClipsInSuccession();
  }

  this.setCurrentLanguageArray = function()
  {
    let currentLanguageArray = undefined;
    if (languageSelectionScreen.languageNum === 0)
    {
      // this.currentLanguageArray = this.conversationPatternManager.arrayOfEnglishConvoPatterns; **doesn't exist yet, use vietnamese
      currentLanguageArray = this.conversationPatternManager.arrayOfCentralVietnameseConvoPatterns;
    }
    else if (languageSelectionScreen.languageNum === 1)
    {
      // this.currentLanguageArray = this.conversationPatternManager.arrayOfMandarinConvoPatterns; **doesn't exist yet, use vietnamese
      currentLanguageArray = this.conversationPatternManager.arrayOfMandarinConvoPatterns;
    }
    else if (languageSelectionScreen.languageNum === 2)
    {
      currentLanguageArray = this.conversationPatternManager.arrayOfCentralVietnameseConvoPatterns;
    }
    return currentLanguageArray;
  }

  this.draw = function()
	{
    this.background.draw();
    this.playerCharacter.draw();
    this.NPC.draw();
    this.playerCharacterSpeechBubbleHW1A.draw();
    this.playerCharacterSpeechBubbleHW1B.draw();
    this.NPCSpeechBubble.draw();
  }

  this.update = function()
  {
    this.playerCharacterSpeechBubbleHW1A.returnMouseOverStatus();
    this.playerCharacterSpeechBubbleHW1B.returnMouseOverStatus();
    this.NPCSpeechBubble.returnMouseOverStatus();
  }

  this.handleClick = function()
  {
    this.playerCharacterSpeechBubbleHW1A.handleClick();
    this.playerCharacterSpeechBubbleHW1B.handleClick();
    this.NPCSpeechBubble.handleClick();
  }
}

const helloWorldGame = new helloWorldGameClass();

function HelloWorldBackground()
{
  this.image = "images\\Backgrounds\\daytimeBackground.png";

  this.draw = function()
  {
    drawFromSheet(this.image, 0,0, gameCanvas.width,gameCanvas.height);
    //gameCanvasContext.drawImage(this.image, 0,0, gameCanvas.width,gameCanvas.height);
  }
}

function HelloWorldCharacter(image, x)
{
  this.image = image;

  this.x = x;
  this.y = gameCanvas.height*0.5;

  this.width = 100;
  this.height = 200;

  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
  }
}

function CharacterSpeechBubbleHW1(image,highlightedImage, x,y, width,height)
{
  this.image = image;
  this.highlightedImage = highlightedImage;
  this.arrowImage = "images\\sprites\\dayTime\\arrow.png";
  this.arrowImageWidth = 50;
  this.arrowImageHeight = 100;

  this.isBeingHeard = false;

  this.x = x;
  this.y = y;
  this.width = width;
  this.height = height;

  this.message = undefined;

  this.highlighted = false;

  this.draw = function()
  {
    if (this.highlighted === true)
    {
      drawFromSheet(this.highlightedImage, this.x,this.y, this.width,this.height);
      //gameCanvasContext.drawImage(this.highlightedImage, this.x,this.y, this.width,this.height);
    }
    else if (this.highlighted === false)
    {
      drawFromSheet(this.image, this.x,this.y, this.width,this.height);
      //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
    }

    if (this.isBeingHeard === true)
    {
      let arrowImageStartingX = this.x + this.width/2 - this.arrowImageWidth/2;
      let arrowImageStartingY = this.y - this.arrowImageHeight;
      // let arrowImageStartingX = gameCanvas.width/2;
      // let arrowImageStartingY = gameCanvas.height/2;
      drawFromSheet(this.arrowImage, arrowImageStartingX,arrowImageStartingY, this.arrowImageWidth,this.arrowImageHeight);
      //gameCanvasContext.drawImage(this.arrowImage, arrowImageStartingX,arrowImageStartingY, this.arrowImageWidth,this.arrowImageHeight);
    }
  }

  this.highlightBoundaryLeftX = this.x;
  this.highlightBoundaryTopY = this.y;
  this.highlightBoundaryRightX = this.x + this.width;
  this.highlightBoundaryBottomY = (this.y + this.height)*0.725;

  this.returnMouseOverStatus = function()
  {
    if (inputManager.mouseCoordinates.x > this.highlightBoundaryLeftX && inputManager.mouseCoordinates.x < this.highlightBoundaryRightX &&
        inputManager.mouseCoordinates.y > this.highlightBoundaryTopY && inputManager.mouseCoordinates.y < this.highlightBoundaryBottomY)
        {
          this.highlighted = true;
        }
        else {
          this.highlighted = false;
        }
  }

  this.handleClick = function()
  {
    if (!this.highlighted)
    {
      return
    }
    else
    {
      if (this.message === gameClassManager.currentGame.conversationPatternManager.currentCorrectConversationPattern.answerAudio)
      {
        amountCorrect++;
        genAudio.playPositive();
      }
      else if (this.message === gameClassManager.currentGame.conversationPatternManager.incorrectConversationPattern.answerAudio)
      {
        amountIncorrect++;
        genAudio.playNegative();
      }
      gameClassManager.currentGame.conversationPatternManager.chooseCorrectConversationPattern(gameClassManager.currentGame.currentLanguageArray);
      gameClassManager.currentGame.conversationPatternManager.promptAudio = gameClassManager.currentGame.conversationPatternManager.currentCorrectConversationPattern.promptAudio;
      gameClassManager.currentGame.conversationPatternManager.chooseIncorrectConversationPattern(gameClassManager.currentGame.currentLanguageArray);
      gameClassManager.currentGame.conversationPatternManager.assignAudioClipsToSpeechBubbles();
      gameClassManager.currentGame.conversationAudioManager.getAudioClips();
      gameClassManager.currentGame.conversationAudioManager.assignOrderOfAudioAnswers();
      gameClassManager.currentGame.conversationAudioManager.assignOnendedFunctions();
      gameClassManager.currentGame.conversationAudioManager.promptAudio.play();
      gameClassManager.currentGame.partyGuestSpeechBubble.isBeingHeard = true;
    }
  }
}

function ConversationPatternManager()
{
  //central vietnamese
  this.centralVietnameseWhatIsYourNameConvoPattern = new ConversationPattern('whats your name convo',promptAudio.centralVietnameseWhatsYourNameGeneral,promptAudio.centralVietnameseMyNameIsSteven);
  this.centralVietnameseWhereAreYouFromConvoPattern = new ConversationPattern('where are you from convo',promptAudio.centralVietnameseWhereAreYouFrom,promptAudio.centralVietnameseIAmFromAmerica);
  this.centralVietnameseWhatDoYouLikeToEatConvoPattern = new ConversationPattern('what do you like to eat convo',promptAudio.centralVietnameseWhatDoYouLikeToEat,promptAudio.centralVietnameseILikeToEatVegetarian);
  this.centralVietnameseGoodbyeVeryNiceToMeetYouConvoPattern = new ConversationPattern('goodbye very nice to meet you pattern',promptAudio.centralVietnameseGoodBye,promptAudio.centralVietnameseVeryNiceToMeetYou);
  this.centralVietnameseHowAreYouGoodAndYouConvoPattern = new ConversationPattern('how are you good and you convo pattern',promptAudio.centralVietnameseHowAreYouGeneral,promptAudio.centralVietnameseGoodAndYouGeneral);
  this.centralVietnameseExcuseMePoliteHelloConvoPattern = new ConversationPattern('excuse me polite hello convo pattern',promptAudio.centralVietnameseExcuseMe,promptAudio.centralVietnamesePoliteHello);

  this.arrayOfCentralVietnameseConvoPatterns = [];

  //mandarin
  this.mandarinHelloConversationPattern = new ConversationPattern('hello conversation pattern', promptAudio.mandarinHello,promptAudio.mandarinHello);
  this.mandarinHowAreYouConversationPattern = new ConversationPattern('how are you conversation pattern', promptAudio.mandarinHowAreYou,promptAudio.mandarinImGoodAndYou);
  this.mandarinWhereAreYouFromConversationPattern = new ConversationPattern('where are you from conversation pattern', promptAudio.mandarinWhereAreYouFrom,promptAudio.mandarinImFromAmerica);
  this.mandarinWhatDoYouLikeToDoConversationPattern = new ConversationPattern('what do you like to do conversation pattern', promptAudio.mandarinWhatDoYouLikeToDo,promptAudio.mandarinILikeProgramming);
  this.mandarinWhereDoYouLiveConversationPattern = new ConversationPattern('where do you live conversation pattern', promptAudio.mandarinWhereDoYouLive,promptAudio.mandarinILiveInVietnam);
  this.mandarinWhatIsYourJobConversationPattern = new ConversationPattern('what is your job conversation pattern', promptAudio.mandarinWhatIsYourJob,promptAudio.mandarinIAmATeacher);
  this.mandarinAnythingElseConversationPattern = new ConversationPattern('anything else conversation pattern', promptAudio.mandarinAnythingElse,promptAudio.mandarinIAlsoLikeFitness);
  this.mandarinWhatIsYourNameConversationPattern = new ConversationPattern('what is your name conversation pattern', promptAudio.mandarinWhatIsYourName,promptAudio.mandarinMyNameIsSteven);
  this.mandarinHowOldAreYouConversationPattern = new ConversationPattern('how old are you conversation pattern', promptAudio.mandarinHowOldAreYou,promptAudio.mandarinIAm37YearsOld);
  this.mandarinWhereAreYouConversationPattern = new ConversationPattern('how old are you conversation pattern', promptAudio.mandarinHowOldAreYou,promptAudio.mandarinIAm37YearsOld);

  this.arrayOfMandarinConvoPatterns = [];
  this.initializeArraysOfConvoPatterns = function()
  {
    //central vietnamese
    this.arrayOfCentralVietnameseConvoPatterns.push(this.centralVietnameseWhatIsYourNameConvoPattern);
    this.arrayOfCentralVietnameseConvoPatterns.push(this.centralVietnameseWhereAreYouFromConvoPattern);
    this.arrayOfCentralVietnameseConvoPatterns.push(this.centralVietnameseWhatDoYouLikeToEatConvoPattern);
    this.arrayOfCentralVietnameseConvoPatterns.push(this.centralVietnameseGoodbyeVeryNiceToMeetYouConvoPattern);
    this.arrayOfCentralVietnameseConvoPatterns.push(this.centralVietnameseHowAreYouGoodAndYouConvoPattern);
    this.arrayOfCentralVietnameseConvoPatterns.push(this.centralVietnameseExcuseMePoliteHelloConvoPattern);

    //mandarin
    this.arrayOfMandarinConvoPatterns.push(this.mandarinHelloConversationPattern);
    this.arrayOfMandarinConvoPatterns.push(this.mandarinHowAreYouConversationPattern);
    this.arrayOfMandarinConvoPatterns.push(this.mandarinWhereAreYouFromConversationPattern);
    this.arrayOfMandarinConvoPatterns.push(this.mandarinWhatDoYouLikeToDoConversationPattern);
    this.arrayOfMandarinConvoPatterns.push(this.mandarinWhereDoYouLiveConversationPattern);
    this.arrayOfMandarinConvoPatterns.push(this.mandarinWhatIsYourJobConversationPattern);
    this.arrayOfMandarinConvoPatterns.push(this.mandarinAnythingElseConversationPattern);
    this.arrayOfMandarinConvoPatterns.push(this.mandarinWhatIsYourNameConversationPattern);
    this.arrayOfMandarinConvoPatterns.push(this.mandarinHowOldAreYouConversationPattern);
  }

  this.currentCorrectConversationPattern = undefined;
  this.chooseCorrectConversationPattern = function(currentLanguageArray)
  {
    let randomArrayOfConvoPatternsIndex = getRandomIntInclusive(0,currentLanguageArray.length - 1);
    this.currentCorrectConversationPattern = currentLanguageArray[randomArrayOfConvoPatternsIndex];
  }

  this.incorrectConversationPattern = undefined;
  this.chooseIncorrectConversationPattern = function(currentLanguageArray)
  {
    let randomArrayOfConvoPatternsIndex = getRandomIntInclusive(0,currentLanguageArray.length - 1);
    this.incorrectConversationPattern = currentLanguageArray[randomArrayOfConvoPatternsIndex];

    while (this.incorrectConversationPattern === this.currentCorrectConversationPattern)
    {
      randomArrayOfConvoPatternsIndex = getRandomIntInclusive(0,currentLanguageArray.length - 1);
      this.incorrectConversationPattern = currentLanguageArray[randomArrayOfConvoPatternsIndex];
    }
  }

  this.assignAudioClipsToSpeechBubbles = function()
  {
    let npcGuestSpeechBubble = gameClassManager.currentGame.NPCSpeechBubble;
    npcGuestSpeechBubble.message = this.currentCorrectConversationPattern.promptAudio;

    let playerCharacterSpeechBubbleHW1A = gameClassManager.currentGame.playerCharacterSpeechBubbleHW1A;
    let playerCharacterSpeechBubbleHW1B = gameClassManager.currentGame.playerCharacterSpeechBubbleHW1B;

    let fiftyFiftyChance = Math.random();
    if (fiftyFiftyChance < 0.5)
    {
      playerCharacterSpeechBubbleHW1A.message = this.currentCorrectConversationPattern.answerAudio;

      playerCharacterSpeechBubbleHW1B.message = this.incorrectConversationPattern.answerAudio;
    }
    else
    {
      playerCharacterSpeechBubbleHW1B.message = this.currentCorrectConversationPattern.answerAudio;

      playerCharacterSpeechBubbleHW1A.message = this.incorrectConversationPattern.answerAudio;

    }
  }

}

function ConversationPattern(name,promptAudio,answerAudio)
{

  this.name = name;
  this.image = "images\\placeholderPlayButtonImage.png";

  this.promptAudioX = undefined;
  this.promptAudioY = undefined;

  this.answerAudioX = undefined;
  this.answerAudioY = undefined;

  this.promptAudio = promptAudio;

  this.answerAudio = answerAudio;

  this.draw = function()
  {
    if (this.promptAudioX !== undefined)
    {
      drawFromSheet(this.image, this.promptAudioX,this.promptAudioY, 100,100);
      //gameCanvasContext.drawImage(this.image, this.promptAudioX,this.promptAudioY, 100,100);
    }

    if (this.answerAudioX !== undefined)
    {
      drawFromSheet(this.image, this.answerAudioX,this.answerAudioY, 100,100);
      //gameCanvasContext.drawImage(this.image, this.answerAudioX,this.answerAudioY, 100,100);
    }
  }
}

function ConversationAudioManager()
{
  this.promptAudio = undefined;
  this.correctAnswerAudio = undefined;


  this.getAudioClips = function()
  {
    let conversationPatternManager = gameClassManager.currentGame.conversationPatternManager;
    this.promptAudio = conversationPatternManager.currentCorrectConversationPattern.promptAudio;
    this.correctAnswerAudio = conversationPatternManager.currentCorrectConversationPattern.answerAudio;
    this.incorrectAnswerAudio = conversationPatternManager.incorrectConversationPattern.answerAudio;
  }

  this.promptBubble = undefined;
  this.firstAnswerBubble = undefined;
  this.secondAnswerBubble = undefined;
  this.assignOrderOfAudioAnswers = function()
  {
    let scopingProblemThis = gameClassManager.currentGame.conversationAudioManager;

    scopingProblemThis.promptBubble = gameClassManager.currentGame.NPCSpeechBubble;


    let fiftyFiftyChance = Math.random();
    if (fiftyFiftyChance < 0.5)
    {
      scopingProblemThis.firstAnswerBubble = gameClassManager.currentGame.playerCharacterSpeechBubbleHW1A;
      scopingProblemThis.secondAnswerBubble = gameClassManager.currentGame.playerCharacterSpeechBubbleHW1B;
    }
    else
    {
      scopingProblemThis.firstAnswerBubble = gameClassManager.currentGame.playerCharacterSpeechBubbleHW1B;
      scopingProblemThis.secondAnswerBubble = gameClassManager.currentGame.playerCharacterSpeechBubbleHW1A;
    }
  }

  this.assignOnendedFunctions = function()
  {
    let scopingProblemThis = gameClassManager.currentGame.conversationAudioManager;
    scopingProblemThis.promptBubble.message.sfx.onended = function()
    {
      scopingProblemThis.firstAnswerBubble.message.play();
      scopingProblemThis.promptBubble.isBeingHeard = false;
      scopingProblemThis.firstAnswerBubble.isBeingHeard = true;
    }

    scopingProblemThis.firstAnswerBubble.message.sfx.onended = function()
    {
      scopingProblemThis.secondAnswerBubble.message.play();
      scopingProblemThis.firstAnswerBubble.isBeingHeard = false;
      scopingProblemThis.secondAnswerBubble.isBeingHeard = true;
    }

    scopingProblemThis.secondAnswerBubble.message.sfx.onended = function()
    {
      scopingProblemThis.secondAnswerBubble.isBeingHeard = false;
      musicManager.endDuck();
    }
  }
}
dodgeballGameClass.prototype = new GameClass();
function dodgeballGameClass()
{
  this.name = 'dodge ball game';
  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/dodgeballWeebleWobble(3).mp3', 21.2);
  this.playerCharacter = undefined;

  this.drawTransitionText = function()
  {
    customFontFillText(['Catch the '], 25,30, gameCanvas.width/2 - 150,30);
    customFontFillText(['correct answer!', symbolExclamationPointImage], 25,30, gameCanvas.width/2 - 250,60);
    customFontFillText(['Avoid the wrong ones!', symbolExclamationPointImage], 25,30, 0,90);
    customFontFillText([upArrowImage, ' ', symbolEqualsImage, ' Move up'], 30,15, 210,200);
    customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' Move right'], 30,15, 350,350);
    customFontFillText([downArrowImage, ' ', symbolEqualsImage, ' Move down'], 30,15, 200,500);
    customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' Move left'], 30,15, 50,350);
  }

  this.NPC1 = undefined;
  this.NPC2 = undefined;
  this.NPC3 = undefined;
  this.NPC4 = undefined;
  this.arrayOfNPCs = [];

  this.dodgeball1 = undefined;
  this.dodgeball2 = undefined;
  this.dodgeball3 = undefined;
  this.dodgeball4 = undefined;
  this.arrayOfDodgeballs = [];

  this.phonicClassManager = undefined;

  this.background = new DodgeballBackground();

  this.startGameSpecialCode = function()
  {
    gameClassManager.currentGame.throwTheBallsAfterTimeouts();
    gameClassManager.currentGame.phonicClassManager.currentCorrectPhonic.promptAudio.sfx.play();
    gameAudio.dodgeballHit = new sfxOneShot('audio/V/ballHit2.mp3', 0.75);
    gameAudio.dodgeballCatch = new sfxOneShot('audio/V/ballCatch2.mp3', 0.75);
    gameAudio.dodgeballThrow = new sfxOneShot('audio/V/ballMiss.mp3', 0.75);
  }

  this.defineAndInitializePlayerCharacter = function()
  {
    this.playerCharacter = new DodgeballPlayerCharacter();

    let oscillationVelocityYForBallAndCharacter1 = getRandomArbitrary(-0.05,0.05);
    let oscillationVelocityXForBallAndCharacter2 = getRandomArbitrary(-0.05,0.05);
    let oscillationVelocityYForBallAndCharacter3 = getRandomArbitrary(-0.05,0.05);
    let oscillationVelocityXForBallAndCharacter4 = getRandomArbitrary(-0.05,0.05);

    this.NPC1 = new DodgeballNPC("images\\sprites\\dodgeBall\\Player2.png", 0,gameCanvas.height/2 - gameCanvas.height/20, undefined,oscillationVelocityYForBallAndCharacter1);//left side of screen
    this.NPC2 = new DodgeballNPC("images\\sprites\\dodgeBall\\Player3.png", gameCanvas.width/2 - gameCanvas.width/24,0,  oscillationVelocityXForBallAndCharacter2,undefined);//top center
    this.NPC3 = new DodgeballNPC("images\\sprites\\dodgeBall\\Player4.png", gameCanvas.width - gameCanvas.width/12,gameCanvas.height/2 - gameCanvas.height/20, undefined,oscillationVelocityYForBallAndCharacter3);//right side
    this.NPC4 = new DodgeballNPC("images\\sprites\\dodgeBall\\Player5.png", gameCanvas.width/2 - gameCanvas.width/24,gameCanvas.height - gameCanvas.height/10,  oscillationVelocityXForBallAndCharacter4,undefined);//bottom center
    this.arrayOfNPCs.push(this.NPC1);
    this.arrayOfNPCs.push(this.NPC2);
    this.arrayOfNPCs.push(this.NPC3);
    this.arrayOfNPCs.push(this.NPC4);

    this.dodgeball1 = new ActualDodgeball('1', this.NPC1.x + this.NPC1.width/2,this.NPC1.y + this.NPC1.height/2, undefined,oscillationVelocityYForBallAndCharacter1);
    this.dodgeball2 = new ActualDodgeball('2', this.NPC2.x + this.NPC2.width/2,this.NPC2.y + this.NPC2.height/2, oscillationVelocityXForBallAndCharacter2,undefined);
    this.dodgeball3 = new ActualDodgeball('3', this.NPC3.x,this.NPC3.y + this.NPC3.height/2, undefined,oscillationVelocityYForBallAndCharacter3);
    this.dodgeball4 = new ActualDodgeball('4', this.NPC4.x + this.NPC4.width/2,this.NPC4.y + this.NPC4.height/4, oscillationVelocityXForBallAndCharacter4,undefined);
    this.arrayOfDodgeballs.push(this.dodgeball1);
    this.arrayOfDodgeballs.push(this.dodgeball2);
    this.arrayOfDodgeballs.push(this.dodgeball3);
    this.arrayOfDodgeballs.push(this.dodgeball4);
  }

  this.textAnswerFontSize = '30';
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';
	this.titleScreenData =
  [
	  {name: "Dodgeball", fontSize: 25, spacing: 12, x: 22, y: 480}
	];


  this.initialize = function()
  {
    this.defineAndInitializePlayerCharacter();
    this.phonicClassManager = new PhonicClassManager();
    this.phonicClassManager.initializeArraysOfPhonics();
    this.phonicClassManager.setCurrentLanguageArray(languageSelectionScreen.languageNum);
    this.phonicClassManager.populateTemporaryArrayOfPhonics();
    this.phonicClassManager.chooseCorrectPhonic();
    this.phonicClassManager.assignPhonicsToDodgeballs();
    this.jumpDistanceX = gameCanvas.width*0.2;
    this.jumpDistanceY = gameCanvas.height*0.3;
  }

  this.draw = function()
  {
    this.background.draw();


    this.playerCharacter.draw();

    for (let i = 0; i < this.arrayOfNPCs.length; i++)
    {
      this.arrayOfNPCs[i].draw();
    }
    for (let i = 0; i < this.arrayOfDodgeballs.length; i++)
    {
      this.arrayOfDodgeballs[i].draw();
    }
  }

  this.throwTheBallsAfterTimeouts = function()
  {
    throwTheBallAfterTimeout(this.arrayOfDodgeballs[0]);
    throwTheBallAfterTimeout(this.arrayOfDodgeballs[1]);
    throwTheBallAfterTimeout(this.arrayOfDodgeballs[2]);
    throwTheBallAfterTimeout(this.arrayOfDodgeballs[3]);
  }

  this.update = function()
  {

    this.playerCharacter.updateAngle();
    this.playerCharacter.updatePivotsForWeebleWobble();
    this.playerCharacter.move();

    for (let i = 0; i < this.arrayOfDodgeballs.length; i++)
    {
      this.arrayOfDodgeballs[i].move();
      this.arrayOfDodgeballs[i].detectCollisionWithPlayer();
      this.arrayOfDodgeballs[i].detectOffScreen();
    }

    this.playerCharacter.updateCenterCoordinates();

    for (let i = 0; i < this.arrayOfNPCs.length; i++)
    {
      this.arrayOfNPCs[i].updateAngle();
      this.arrayOfNPCs[i].updateCenterCoordinates();
      this.arrayOfNPCs[i].move();
      this.arrayOfNPCs[i].updatePivots();
    }

  }

  this.handleLeftArrowDown = function()
	{
		inputManager.leftArrowIsBeingHeld = true;
	}

	this.handleUpArrowDown = function()
	{
		inputManager.upArrowIsBeingHeld = true;
	}

	this.handleRightArrowDown = function()
	{
		inputManager.rightArrowIsBeingHeld = true;
	}

	this.handleDownArrowDown = function()
	{
		inputManager.downArrowIsBeingHeld = true;
	}

	this.handleLeftArrowUp = function()
	{
		inputManager.leftArrowIsBeingHeld = false;
	}

	this.handleUpArrowUp = function()
	{
		inputManager.upArrowIsBeingHeld = false;
	}

	this.handleRightArrowUp = function()
	{
		inputManager.rightArrowIsBeingHeld = false;
	}

	this.handleDownArrowUp = function()
	{
		inputManager.downArrowIsBeingHeld = false;
	}

  this.jumpDistanceX = undefined;
  this.jumpDistanceY = undefined;
  this.handleSpaceBarDown = function()//jump/teleport
  {
    if (inputManager.leftArrowIsBeingHeld && !inputManager.upArrowIsBeingHeld &&
        !inputManager.downArrowIsBeingHeld)//walking left
        {
          this.playerCharacter.x -= this.jumpDistanceX;
        }
    else if (inputManager.rightArrowIsBeingHeld && !inputManager.upArrowIsBeingHeld &&
        !inputManager.downArrowIsBeingHeld)//walking right
        {
          this.playerCharacter.x += this.jumpDistanceX;
        }
    else if (inputManager.upArrowIsBeingHeld && !inputManager.rightArrowIsBeingHeld &&
            !inputManager.leftArrowIsBeingHeld)//walking up
        {
          this.playerCharacter.y -= this.jumpDistanceY;
        }
    else if (inputManager.downArrowIsBeingHeld && !inputManager.rightArrowIsBeingHeld &&
            !inputManager.leftArrowIsBeingHeld)//walking down
        {
          this.playerCharacter.y += this.jumpDistanceY;
        }
    else if (inputManager.downArrowIsBeingHeld && inputManager.rightArrowIsBeingHeld)//walking down/right
        {
          this.playerCharacter.x += this.jumpDistanceX;
          this.playerCharacter.y += this.jumpDistanceY;
        }
    else if (inputManager.downArrowIsBeingHeld && inputManager.leftArrowIsBeingHeld)//walking down/left
        {
          this.playerCharacter.x -= this.jumpDistanceX;
          this.playerCharacter.y += this.jumpDistanceY;
        }
    else if (inputManager.upArrowIsBeingHeld && inputManager.rightArrowIsBeingHeld)//walking up/right
        {
          this.playerCharacter.x += this.jumpDistanceX;
          this.playerCharacter.y -= this.jumpDistanceY;
        }
    else if (inputManager.upArrowIsBeingHeld && inputManager.leftArrowIsBeingHeld)//walking up/left
        {
          this.playerCharacter.x -= this.jumpDistanceX;
          this.playerCharacter.y -= this.jumpDistanceY;
        }
    else {
      return;
    }
  }
}

const dodgeballGame = new dodgeballGameClass();

function DodgeballBackground()
{
  this.image = "images\\Backgrounds\\dodgeball.png";

  this.draw = function()
  {
    drawFromSheet(this.image, 0,0, gameCanvas.width,gameCanvas.height);
    //gameCanvasContext.drawImage(this.image, 150,70,700,630, 0,0,gameCanvas.width,gameCanvas.height);
  }
}

function DodgeballPlayerCharacter()
{
  this.image = "images\\sprites\\dodgeBall\\Player1.png";

  this.width = gameCanvas.width/12;
  this.height = gameCanvas.height/10;

  this.x = gameCanvas.width/2 - this.width/2;
  this.y = gameCanvas.height/2 - this.height/2;

  this.centerX = this.x + this.width/2;
  this.centerY = this.x + this.height/2;

  this.updateCenterCoordinates = function()
  {
    this.centerX = this.x + this.width/2;
    this.centerY = this.y + this.height/2;
  }

  this.pivotX = this.x + this.width/2;
  this.pivotY = this.y + this.height*0.9;

  this.angle = getRandomIntInclusive(-10,10);

  this.draw = function()
  {
    let angleInRadians = (this.angle-90) * 0.01745;

    drawFromSheet(this.image, this.x,this.y, this.width,this.height, undefined, angleInRadians,this.pivotX,this.pivotY);
    // gameCanvasContext.save();
    // gameCanvasContext.translate(this.pivotX,this.pivotY);
    // gameCanvasContext.rotate(angleInRadians);
    // gameCanvasContext.translate(-this.pivotX,-this.pivotY);
    // gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
    // gameCanvasContext.restore();
  }

  this.velocity = 7;

  this.weebleWobbleRate = 2.5;
  this.updateAngle = function()
  {
    this.angle += this.weebleWobbleRate;
    if (this.angle > 14 || this.angle < -14)
    {
      this.weebleWobbleRate *= -1;
    }
  }

  this.updatePivotsForWeebleWobble = function()
  {
    this.pivotX = this.x + this.width/2;
    this.pivotY = this.y + this.height*0.9;
  }

  this.move = function()
	{
		//console.log('inside space shooter movePlayer');
		if (inputManager.upArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.y -= this.velocity;
		}
		if (inputManager.rightArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.x += this.velocity;
		}
		if (inputManager.downArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.y += this.velocity;
		}
		if (inputManager.leftArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.x -= this.velocity;
		}
		// this.handleShipAtCanvasBoundaries();
	};
}

function DodgeballNPC(image, x,y, oscillationVelocityX,oscillationVelocityY)
{
  this.image = image;

  this.width = gameCanvas.width/12;
  this.height = gameCanvas.height/10;

  this.x = x;
  this.y = y;

  this.pivotX = this.x + this.width/2;
  this.pivotY = this.y + this.height*0.9;

  this.oscillationVelocityX = oscillationVelocityX;
  this.oscillationVelocityY = oscillationVelocityY;

  this.angle = getRandomIntInclusive(-10,10);

  this.draw = function()
  {
    let angleInRadians = (this.angle-90) * 0.01745;

    drawFromSheet(this.image, this.x,this.y, this.width,this.height, undefined, angleInRadians,this.pivotX,this.pivotY);
    // gameCanvasContext.save();
    // gameCanvasContext.translate(this.pivotX,this.pivotY);
    // gameCanvasContext.rotate(angleInRadians);
    // gameCanvasContext.translate(-this.pivotX,-this.pivotY);
    // gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
    // gameCanvasContext.restore();
  }

  this.weebleWobbleRate = 2.5;
  this.updateAngle = function()
  {
    this.angle += this.weebleWobbleRate;
    if (this.angle > 14 || this.angle < -14)
    {
      this.weebleWobbleRate *= -1;
    }
  }


  this.circlePathRadius = 250;
  this.circleAngleInRadians = 0;
  this.centerX = this.x + this.width/2;
  this.centerY = this.y + this.height/2;

  this.move = function()
  {
    if (this.oscillationVelocityX !== undefined)
    {
      this.circleAngleInRadians += this.oscillationVelocityX;
      this.x = x + Math.cos(this.circleAngleInRadians)*200;
    }
    if (this.oscillationVelocityY !== undefined)
    {
      this.circleAngleInRadians += this.oscillationVelocityY;
      this.y = y + Math.sin(this.circleAngleInRadians)*200;
    }

  }

  this.updateCenterCoordinates = function()
  {
    this.centerX = this.x + this.width/2;
    this.centerY = this.y + this.height/2;
  }

  this.updatePivots = function()
  {
    this.pivotX = this.x + this.width/2;
    this.pivotY = this.y + this.height*0.9;
  }

  this.dodgeball = undefined;
}

function ActualDodgeball(number, startingX,startingY, oscillationVelocityX,oscillationVelocityY)
{
  this.number = number;
  this.image = "images\\sprites\\dodgeBall\\dodgeBall.png";

  this.x = startingX;
  this.y = startingY;

  this.startingX = startingX;
  this.startingY = startingY;

  this.oscillationVelocityX = oscillationVelocityX;
  this.oscillationVelocityY = oscillationVelocityY;

  this.width = gameCanvas.width/18;
  this.height = gameCanvas.height/18;

  this.phonicClass = undefined;

  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
    gameCanvasContext.fillStyle = 'white';
    gameCanvasContext.fillText(this.phonicClass.textAssociation, this.x + this.width/3,this.y + this.height*0.75);
  }

  this.velocityX = undefined;
  this.velocityY = undefined;
  this.deltaXFromPlayer = undefined;
  this.deltaYFromPlayer = undefined;
  this.angleFromPlayer = undefined;
  this.angleFromPlayerInRadians = undefined;
  this.calculateVelocitiesBetweenBallAndPlayer = function()
  {
    this.deltaXFromPlayer =  gameClassManager.currentGame.playerCharacter.centerX - this.x;
    this.deltaYFromPlayer =  gameClassManager.currentGame.playerCharacter.centerY - this.y;
    this.angleFromPlayerInRadians = Math.atan2(this.deltaYFromPlayer,this.deltaXFromPlayer);
    this.velocityX = 5 * Math.cos(this.angleFromPlayerInRadians);
    this.velocityY = 5 * Math.sin(this.angleFromPlayerInRadians);
  }

  this.isBeingThrown = false;
  this.circlePathRadius = 250;
  this.circleAngleInRadians = 0;
  this.move = function()
  {
    if (this.isBeingThrown === true)
    {
      this.x += this.velocityX;
      this.y += this.velocityY;
    }
    else if (this.isBeingThrown === false)
    {
      let npc1 = gameClassManager.currentGame.arrayOfNPCs[0];
      let npc2 = gameClassManager.currentGame.arrayOfNPCs[1];
      let npc3 = gameClassManager.currentGame.arrayOfNPCs[2];
      let npc4 = gameClassManager.currentGame.arrayOfNPCs[3];

      if (this.number === '1')
      {
        this.x = npc1.x + npc1.width/2;
        this.y = npc1.y + npc1.height/2;
      }
      else if (this.number === '2')
      {
        this.x = npc2.x + npc2.width/2;
        this.y = npc2.y + npc2.height/2;
      }
      else if (this.number === '3')
      {
        this.x = npc3.x + npc3.width/2;
        this.y = npc3.y + npc3.height/2;
      }
      else if (this.number === '4')
      {
        this.x = npc4.x + npc4.width/2;
        this.y = npc4.y + npc4.height/4;
      }
    }
  }

  this.currentTimeoutLength = undefined;
  this.setRandomTimeoutLength = function()
  {
    this.currentTimeoutLength = getRandomArbitrary(0,2000);
  }


  this.throwTheBallAfterTimeout = function()
  {
    // this.setRandomTimeoutLength();
    setTimeout(this.toggleIsBeingThrown,5000);
  }

  this.detectCollisionWithPlayer = function()
  {
    let playerCharacter = gameClassManager.currentGame.playerCharacter;
    if (this.x < playerCharacter.x + playerCharacter.width && this.x + this.width > playerCharacter.x &&
        this.y < playerCharacter.y + playerCharacter.height && this.y + this.height > playerCharacter.y)
        {
          this.isBeingThrown = false;

          if (this.phonicClass.isTheCorrectChoice === true)
          {
            genAudio.playPositive();
            gameAudio.dodgeballCatch.play();
            amountCorrect++;
          }
          else if (this.phonicClass.isTheCorrectChoice === false)
          {
            genAudio.playNegative();
            gameAudio.dodgeballHit.play();
            amountIncorrect++;
          }


          gameClassManager.currentGame.phonicClassManager.setOrResetPhonicsOnDodgeballsAndPlayPromptAudio();
          for (let i = 0; i < gameClassManager.currentGame.arrayOfDodgeballs.length; i++)
          {
            gameClassManager.currentGame.arrayOfDodgeballs[i].x = gameClassManager.currentGame.arrayOfDodgeballs[i].startingX;
            gameClassManager.currentGame.arrayOfDodgeballs[i].y = gameClassManager.currentGame.arrayOfDodgeballs[i].startingY;
            gameClassManager.currentGame.arrayOfDodgeballs[i].isBeingThrown = false;
            gameClassManager.currentGame.throwTheBallsAfterTimeouts();
          }


        }

   }

   this.wentOffScreenThisPromptingRound = false;
   this.detectOffScreen = function()
   {
     if (this.x > gameCanvas.width || this.x + this.width < 0 || this.y > gameCanvas.height || this.y - this.height < -5)
     {
       this.x = startingX;
       this.y = startingY;
       this.isBeingThrown = false;
       this.wentOffScreenThisPromptingRound = true;
     }

     let numberOfBallsThatWentOffScreen;
     for (let i = 0; i < gameClassManager.currentGame.arrayOfDodgeballs.length; i++)
     {
       if (gameClassManager.currentGame.arrayOfDodgeballs[i].wentOffScreenThisPromptingRound === true)
       {
         numberOfBallsThatWentOffScreen++;
       }
     }
     if (numberOfBallsThatWentOffScreen === 4)
     {
       gameClassManager.currentGame.phonicClassManager.setOrResetPhonicsOnDodgeballsAndPlayPromptAudio();
       gameClassManager.currentGame.arrayOfDodgeballs[i].x = gameClassManager.currentGame.arrayOfDodgeballs[i].startingX;
       gameClassManager.currentGame.arrayOfDodgeballs[i].y = gameClassManager.currentGame.arrayOfDodgeballs[i].startingY;
       gameClassManager.currentGame.arrayOfDodgeballs[i].isBeingThrown = false;
       genAudio.playNegative();
       gameClassManager.currentGame.throwTheBallsAfterTimeouts();
       for (let i = 0; i < gameClassManager.currentGame.arrayOfDodgeballs.length; i++)
       {
         gameClassManager.currentGame.arrayOfDodgeballs[i].wentOffScreenThisPromptingRound = false;
       }
     }
   }
}



function throwTheBallAfterTimeout(dodgeball)
{
  setTimeout(toggleIsBeingThrown,Math.random()*3000,dodgeball);
}

function toggleIsBeingThrown(dodgeball)
{
  if (dodgeball.isBeingThrown === false)
  {
    dodgeball.calculateVelocitiesBetweenBallAndPlayer();
    dodgeball.isBeingThrown = true;
    // gameAudio.dodgeballThrow.play();
  }
}

function PhonicClass(name, promptAudio,textAssociation)
{
  this.name = name;

  this.isTheCorrectChoice = false;

  this.promptAudio = promptAudio;
  this.textAssociation = textAssociation;
}

function PhonicClassManager()
{
  this.centralVietnameseStraightToneA = new PhonicClass('central vietnamese a', promptAudio.centralVietnameseStraightToneA,'a');
  this.centralVietnameseFallingToneA = new PhonicClass('central vietnamese à', promptAudio.centralVietnameseFallingToneA,'à');
  this.centralVietnameseRisingToneA = new PhonicClass('central vietnamese á', promptAudio.centralVietnameseRisingToneA,'á');
  this.centralVietnameseRisingStutterToneA = new PhonicClass('central vietnamese ã', promptAudio.centralVietnameseRisingStutterToneA,'ã');
  this.centralVietnameseLowStaccatoToneA = new PhonicClass('central vietnamese ạ', promptAudio.centralVietnameseLowStaccatoToneA,'ạ');
  this.centralVietnameseRisingHatAU = new PhonicClass('central vietnamese â', promptAudio.centralVietnameseRisingHatAU,'â');
  this.centralVietnameseStraightI = new PhonicClass('central vietnamese i', promptAudio.centralVietnameseStraightI, 'i');
  this.centralVietnameseHatE = new PhonicClass('central vietnamese hat e', promptAudio.centralVietnameseHatE, 'ê');
  this.centralVietnameseE = new PhonicClass('central vietnamese e', promptAudio.centralVietnameseE, 'e');
  this.centralVietnameseFallingI = new PhonicClass('central vietnamese falling i', promptAudio.centralVietnameseFallingI, 'ì');
  this.centralVietnameseU = new PhonicClass('central vietnamese u', promptAudio.centralVietnameseU, 'u');
  this.centralVietnameseHatO = new PhonicClass('central vietnamese ô', promptAudio.centralVietnameseHatO, 'ô');
  this.centralVietnameseO = new PhonicClass('central vietnamese ô', promptAudio.centralVietnameseO, 'o');
  this.centralVietnameseQuestionU = new PhonicClass('central vietnamese ư', promptAudio.centralVietnameseQuestionU, 'ư');
  this.centralVietnameseQuestionO = new PhonicClass('central vietnamese ơ', promptAudio.centralVietnameseQuestionO, 'ơ');
  this.centralVietnameseFallingE = new PhonicClass('central vietnamese è', promptAudio.centralVietnameseFallingE, 'è');
  this.centralVietnameseFallingO = new PhonicClass('central vietnamese ò', promptAudio.centralVietnameseFallingO, 'ò');
  this.centralVietnameseFallingU = new PhonicClass('central vietnamese ù', promptAudio.centralVietnameseFallingU, 'ù');
  this.centralVietnameseStutterE = new PhonicClass('central vietnamese ẽ', promptAudio.centralVietnameseStutterE, 'ẽ');
  this.centralVietnameseStutterI = new PhonicClass('central vietnamese ĩ', promptAudio.centralVietnameseStutterI, 'ĩ');
  this.centralVietnameseStutterO = new PhonicClass('central vietnamese õ', promptAudio.centralVietnameseStutterO, 'õ');
  this.centralVietnameseStutterU = new PhonicClass('central vietnamese ũ', promptAudio.centralVietnameseStutterU, 'ũ');
  this.centralVietnameseYoYoA = new PhonicClass('central vietnamese ả', promptAudio.centralVietnameseYoYoA, 'ả');
  this.centralVietnameseYoYoE = new PhonicClass('central vietnamese ẻ', promptAudio.centralVietnameseYoYoE, 'ẻ');
  this.centralVietnameseYoYoI = new PhonicClass('central vietnamese ỉ', promptAudio.centralVietnameseYoYoI, 'ỉ');
  this.centralVietnameseYoYoO = new PhonicClass('central vietnamese ỏ', promptAudio.centralVietnameseYoYoO, 'ỏ');
  this.centralVietnameseYoYoU = new PhonicClass('central vietnamese ủ', promptAudio.centralVietnameseYoYoU, 'ủ');
  this.centralVietnameseRisingE = new PhonicClass('central vietnamese é', promptAudio.centralVietnameseRisingE, 'é');
  this.centralVietnameseRisingO = new PhonicClass('central vietnamese ó', promptAudio.centralVietnameseRisingO, 'ó');
  this.centralVietnameseRisingI = new PhonicClass('central vietnamese í', promptAudio.centralVietnameseRisingI, 'í');
  this.centralVietnameseRisingU = new PhonicClass('central vietnamese ú', promptAudio.centralVietnameseRisingU, 'ú');
  this.centralVietnameseStaccatoE = new PhonicClass('central vietnamese ẹ', promptAudio.centralVietnameseStaccatoE, 'ẹ');
  this.centralVietnameseStaccatoO = new PhonicClass('central vietnamese ọ', promptAudio.centralVietnameseStaccatoO, 'ọ');
  this.centralVietnameseStaccatoI = new PhonicClass('central vietnamese ị', promptAudio.centralVietnameseStaccatoI, 'ị');
  this.centralVietnameseStaccatoU = new PhonicClass('central vietnamese ụ', promptAudio.centralVietnameseStaccatoU, 'ụ');
  this.centralVietnameseHookO = new PhonicClass('central vietnamese ơ', promptAudio.centralVietnameseHookO, 'ơ');
  this.centralVietnameseHalfPipeA = new PhonicClass('central vietnamese ă', promptAudio.centralVietnameseHalfPipeA, 'ă');
  this.centralVietnameseRisingHatA = new PhonicClass('central vietnamese ấ', promptAudio.centralVietnameseRisingHatA, 'ấ');
  this.centralVietnameseFallingHatA = new PhonicClass('central vietnamese ầ', promptAudio.centralVietnameseFallingHatA, 'ầ');
  this.centralVietnameseYoYoHatA = new PhonicClass('central vietnamese ẩ', promptAudio.centralVietnameseYoYoHatA, 'ẩ');
  this.centralVietnameseStutterHatA = new PhonicClass('central vietnamese ẫ', promptAudio.centralVietnameseStutterHatA, 'ẫ');
  this.centralVietnameseStaccatoHatA = new PhonicClass('central vietnamese ậ', promptAudio.centralVietnameseStaccatoHatA, 'ậ');
  this.centralVietnameseFallingHatE = new PhonicClass('central vietnamese ề', promptAudio.centralVietnameseFallingHatE, 'ề');
  this.centralVietnameseYoYoHatE = new PhonicClass('central vietnamese ể', promptAudio.centralVietnameseYoYoHatE, 'ể');
  this.centralVietnameseStutterHatE = new PhonicClass('central vietnamese ễ', promptAudio.centralVietnameseStutterHatE, 'ễ');
  this.centralVietnameseStaccatoHatE = new PhonicClass('central vietnamese ệ', promptAudio.centralVietnameseStaccatoHatE, 'ệ');
  this.centralVietnameseRisingHatO = new PhonicClass('central vietnamese ố', promptAudio.centralVietnameseRisingHatO, 'ố');
  this.centralVietnameseFallingHatO = new PhonicClass('central vietnamese ồ', promptAudio.centralVietnameseFallingHatO, 'ồ');
  this.centralVietnameseYoYoHatO = new PhonicClass('central vietnamese ổ', promptAudio.centralVietnameseYoYoHatO, 'ổ');
  this.centralVietnameseStutterHatO = new PhonicClass('central vietnamese ỗ', promptAudio.centralVietnameseStutterHatO, 'ỗ');

  //consonants
  this.centralVietnameseB = new PhonicClass('central vietnamese b', promptAudio.centralVietnameseB, 'b');
  this.centralVietnameseC = new PhonicClass('central vietnamese c', promptAudio.centralVietnameseC, 'c');
  this.centralVietnameseD = new PhonicClass('central vietnamese d', promptAudio.centralVietnameseD, 'd');
  this.centralVietnameseTh = new PhonicClass('central vietnamese th', promptAudio.centralVietnameseTh, 'th');
  this.centralVietnameseNg = new PhonicClass('central vietnamese ng', promptAudio.centralVietnameseNg, 'ng');
  this.centralVietnameseLinedD = new PhonicClass('central vietnamese linedD', promptAudio.centralVietnameseLinedD, 'đ');
  this.centralVietnameseG = new PhonicClass('central vietnamese g', promptAudio.centralVietnameseG, 'g');
  this.centralVietnameseH = new PhonicClass('central vietnamese h', promptAudio.centralVietnameseH, 'h');
  this.centralVietnameseK = new PhonicClass('central vietnamese k', promptAudio.centralVietnameseK, 'k');
  this.centralVietnameseL = new PhonicClass('central vietnamese l', promptAudio.centralVietnameseL, 'l');
  this.centralVietnameseM = new PhonicClass('central vietnamese m', promptAudio.centralVietnameseM, 'm');
  this.centralVietnameseN = new PhonicClass('central vietnamese n', promptAudio.centralVietnameseN, 'n');
  this.centralVietnameseP = new PhonicClass('central vietnamese p', promptAudio.centralVietnameseP, 'p');
  this.centralVietnameseQ = new PhonicClass('central vietnamese q', promptAudio.centralVietnameseQ, 'q');
  this.centralVietnameseR = new PhonicClass('central vietnamese r', promptAudio.centralVietnameseR, 'r');
  this.centralVietnameseS = new PhonicClass('central vietnamese s', promptAudio.centralVietnameseS, 's');
  this.centralVietnameseT = new PhonicClass('central vietnamese t', promptAudio.centralVietnameseT, 't');
  this.centralVietnameseV = new PhonicClass('central vietnamese v', promptAudio.centralVietnameseV, 'v');
  this.centralVietnameseX = new PhonicClass('central vietnamese x', promptAudio.centralVietnameseX, 'x');

  this.pinyinA = new PhonicClass('pinyin a', promptAudio.pinyinA, 'a');
  this.pinyinO = new PhonicClass('pinyin o', promptAudio.pinyinO, 'o');
  this.pinyinE = new PhonicClass('pinyin e', promptAudio.pinyinE, 'e');
  this.pinyinI = new PhonicClass('pinyin i', promptAudio.pinyinI, 'i');
  this.pinyinU = new PhonicClass('pinyin u', promptAudio.pinyinU, 'u');
  this.pinyinÜ = new PhonicClass('pinyin ü', promptAudio.pinyinU, 'ü');
  this.pinyinEr = new PhonicClass('pinyin er', promptAudio.pinyinEr, 'er');
  this.pinyinB = new PhonicClass('pinyin b', promptAudio.pinyinB, 'b');
  this.pinyinP = new PhonicClass('pinyin p', promptAudio.pinyinP, 'p');
  this.pinyinM = new PhonicClass('pinyin m', promptAudio.pinyinM, 'm');
  this.pinyinF = new PhonicClass('pinyin f', promptAudio.pinyinF, 'f');
  this.pinyinD = new PhonicClass('pinyin d', promptAudio.pinyinD, 'd');
  this.pinyinT = new PhonicClass('pinyin t', promptAudio.pinyinT, 't');
  this.pinyinN = new PhonicClass('pinyin n', promptAudio.pinyinN, 'n');
  this.pinyinL = new PhonicClass('pinyin l', promptAudio.pinyinL, 'l');
  this.pinyinC = new PhonicClass('pinyin c', promptAudio.pinyinC, 'c');
  this.pinyinS = new PhonicClass('pinyin s', promptAudio.pinyinS, 's');
  this.pinyinH = new PhonicClass('pinyin h', promptAudio.pinyinH, 'h');
  this.pinyinK = new PhonicClass('pinyin k', promptAudio.pinyinK, 'k');
  this.pinyinG = new PhonicClass('pinyin g', promptAudio.pinyinG, 'g');
  this.pinyinSi = new PhonicClass('pinyin si', promptAudio.pinyinSi, 'si');
  this.pinyinZi = new PhonicClass('pinyin zi', promptAudio.pinyinZi, 'zi');
  this.pinyinSh = new PhonicClass('pinyin sh', promptAudio.pinyinSh, 'sh');
  this.pinyinCh = new PhonicClass('pinyin ch', promptAudio.pinyinCh, 'ch');
  this.pinyinZh = new PhonicClass('pinyin zh', promptAudio.pinyinZh, 'zh');
  this.pinyinR = new PhonicClass('pinyin r', promptAudio.pinyinR, 'r');
  this.pinyinShi = new PhonicClass('pinyin shi', promptAudio.pinyinShi, 'shi');
  this.pinyinChi = new PhonicClass('pinyin chi', promptAudio.pinyinChi, 'chi');
  this.pinyinZhi = new PhonicClass('pinyin zhi', promptAudio.pinyinZhi, 'zhi');
  this.pinyinRi = new PhonicClass('pinyin ri', promptAudio.pinyinRi, 'ri');
  this.pinyinX = new PhonicClass('pinyin x', promptAudio.pinyinX, 'x');
  this.pinyinQ = new PhonicClass('pinyin q', promptAudio.pinyinQ, 'q');
  this.pinyinJ = new PhonicClass('pinyin j', promptAudio.pinyinJ, 'j');
  this.pinyinWa = new PhonicClass('pinyin wa', promptAudio.pinyinWa, 'wa');
  this.pinyinYa = new PhonicClass('pinyin ya', promptAudio.pinyinWa, 'ya');
  this.pinyinWo = new PhonicClass('pinyin wo', promptAudio.pinyinWo, 'wo');
  this.pinyinYe = new PhonicClass('pinyin ye', promptAudio.pinyinYe, 'ye');
  this.pinyinYi = new PhonicClass('pinyin yi', promptAudio.pinyinYi, 'yi');
  this.pinyinWu = new PhonicClass('pinyin wu', promptAudio.pinyinWu, 'wu');
  this.pinyinYu = new PhonicClass('pinyin yu', promptAudio.pinyinYu, 'yu');
  this.pinyinYue = new PhonicClass('pinyin yue', promptAudio.pinyinYue, 'yue');
  this.pinyinAo = new PhonicClass('pinyin ao', promptAudio.pinyinAo, 'ao');
  this.pinyinAi = new PhonicClass('pinyin ai', promptAudio.pinyinAi, 'ai');
  this.pinyinEi = new PhonicClass('pinyin ei', promptAudio.pinyinEi, 'ei');
  this.pinyinIe = new PhonicClass('pinyin ie', promptAudio.pinyinIe, 'ie');
  this.pinyinUo = new PhonicClass('pinyin uo', promptAudio.pinyinUo, 'uo');
  this.pinyinUa = new PhonicClass('pinyin ua', promptAudio.pinyinUa, 'ua');
  this.pinyinIa = new PhonicClass('pinyin ia', promptAudio.pinyinIa, 'ia');
  this.pinyinUe = new PhonicClass('pinyin ue', promptAudio.pinyinUe, 'ue');
  this.pinyinIao = new PhonicClass('pinyin iao', promptAudio.pinyinIao, 'iao');
  this.pinyinIou = new PhonicClass('pinyin iou', promptAudio.pinyinIou, 'iou');
  this.pinyinUai = new PhonicClass('pinyin uai', promptAudio.pinyinUai, 'uai');
  this.pinyinUei = new PhonicClass('pinyin uei', promptAudio.pinyinUei, 'uei');

  // English
  this.englishA = new PhonicClass('english a', promptAudio.a, 'a');
  this.englishB = new PhonicClass('english b', promptAudio.b, 'b');
  this.englishC = new PhonicClass('english c', promptAudio.c, 'c');
  this.englishD = new PhonicClass('english d', promptAudio.d, 'd');
  this.englishE = new PhonicClass('english e', promptAudio.e, 'e');
  this.englishF = new PhonicClass('english f', promptAudio.f, 'f');
  this.englishG = new PhonicClass('english g', promptAudio.g, 'g');
  this.englishH = new PhonicClass('english h', promptAudio.h, 'h');
  this.englishI = new PhonicClass('english i', promptAudio.i, 'i');
  this.englishJ = new PhonicClass('english j', promptAudio.j, 'j');
  this.englishK = new PhonicClass('english k', promptAudio.k, 'k');
  this.englishL = new PhonicClass('english l', promptAudio.l, 'l');
  this.englishM = new PhonicClass('english m', promptAudio.m, 'm');
  this.englishN = new PhonicClass('english n', promptAudio.n, 'n');
  this.englishO = new PhonicClass('english o', promptAudio.o, 'o');
  this.englishP = new PhonicClass('english p', promptAudio.p, 'p');
  this.englishQ = new PhonicClass('english q', promptAudio.q, 'q');
  this.englishR = new PhonicClass('english r', promptAudio.r, 'r');
  this.englishS = new PhonicClass('english s', promptAudio.s, 's');
  this.englishT = new PhonicClass('english t', promptAudio.t, 't');
  this.englishU = new PhonicClass('english u', promptAudio.u, 'u');
  this.englishV = new PhonicClass('english v', promptAudio.v, 'v');
  this.englishW = new PhonicClass('english w', promptAudio.w, 'w');
  this.englishX = new PhonicClass('english x', promptAudio.x, 'x');
  this.englishY = new PhonicClass('english y', promptAudio.y, 'y');
  this.englishZ = new PhonicClass('english z', promptAudio.z, 'z');

  this.arrayOfEnglishPhonics = [];
  this.arrayOfPinyinPhonics = [];
  this.arrayOfCentralVietnamesePhonics = [];

  this.initializeArraysOfPhonics = function()
  {
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseStraightToneA);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseFallingToneA);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseRisingToneA);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseRisingStutterToneA);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseLowStaccatoToneA);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseRisingHatAU);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseStraightI);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseHatE);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseE);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseFallingI);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseU);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseHatO);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseO);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseQuestionU);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseQuestionO);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseFallingE);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseFallingO);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseFallingU);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseStutterE);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseStutterI);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseStutterO);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseStutterU);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseYoYoA);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseYoYoE);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseYoYoI);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseYoYoO);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseYoYoU);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseRisingE);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseRisingO);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseRisingI);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseRisingU);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseStaccatoE);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseStaccatoO);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseHookO);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseHalfPipeA);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseRisingHatA);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseFallingHatA);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseYoYoHatA);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseStutterHatA);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseStaccatoHatA);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseFallingHatE);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseYoYoHatE);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseStutterHatE);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseStaccatoHatE);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseRisingHatO);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseFallingHatO);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseYoYoHatO);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseStutterHatO);

    //consonants
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseB);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseC);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseD);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseTh);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseNg);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseLinedD);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseG);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseH);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseK);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseL);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseM);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseN);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseP);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseQ);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseR);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseS);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseT);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseV);
    this.arrayOfCentralVietnamesePhonics.push(this.centralVietnameseX);

    //pinyin
    this.arrayOfPinyinPhonics.push(this.pinyinA);
    this.arrayOfPinyinPhonics.push(this.pinyinO);
    this.arrayOfPinyinPhonics.push(this.pinyinE);
    this.arrayOfPinyinPhonics.push(this.pinyinI);
    this.arrayOfPinyinPhonics.push(this.pinyinU);
    this.arrayOfPinyinPhonics.push(this.pinyinU);
    this.arrayOfPinyinPhonics.push(this.pinyinEr);
    this.arrayOfPinyinPhonics.push(this.pinyinB);
    this.arrayOfPinyinPhonics.push(this.pinyinP);
    this.arrayOfPinyinPhonics.push(this.pinyinM);
    this.arrayOfPinyinPhonics.push(this.pinyinF);
    this.arrayOfPinyinPhonics.push(this.pinyinD);
    this.arrayOfPinyinPhonics.push(this.pinyinT);
    this.arrayOfPinyinPhonics.push(this.pinyinN);
    this.arrayOfPinyinPhonics.push(this.pinyinL);
    this.arrayOfPinyinPhonics.push(this.pinyinC);
    this.arrayOfPinyinPhonics.push(this.pinyinS);
    this.arrayOfPinyinPhonics.push(this.pinyinH);
    this.arrayOfPinyinPhonics.push(this.pinyinK);
    this.arrayOfPinyinPhonics.push(this.pinyinG);
    this.arrayOfPinyinPhonics.push(this.pinyinSi);
    this.arrayOfPinyinPhonics.push(this.pinyinZi);
    this.arrayOfPinyinPhonics.push(this.pinyinSh);
    this.arrayOfPinyinPhonics.push(this.pinyinZh);
    this.arrayOfPinyinPhonics.push(this.pinyinR);
    this.arrayOfPinyinPhonics.push(this.pinyinShi);
    this.arrayOfPinyinPhonics.push(this.pinyinChi);
    this.arrayOfPinyinPhonics.push(this.pinyinZhi);
    this.arrayOfPinyinPhonics.push(this.pinyinRi);
    this.arrayOfPinyinPhonics.push(this.pinyinX);
    this.arrayOfPinyinPhonics.push(this.pinyinQ);
    this.arrayOfPinyinPhonics.push(this.pinyinJ);
    this.arrayOfPinyinPhonics.push(this.pinyinWa);
    this.arrayOfPinyinPhonics.push(this.pinyinYa);
    this.arrayOfPinyinPhonics.push(this.pinyinWo);
    this.arrayOfPinyinPhonics.push(this.pinyinYe);
    this.arrayOfPinyinPhonics.push(this.pinyinYi);
    this.arrayOfPinyinPhonics.push(this.pinyinWu);
    this.arrayOfPinyinPhonics.push(this.pinyinYu);
    this.arrayOfPinyinPhonics.push(this.pinyinYue);

    this.arrayOfPinyinPhonics.push(this.pinyinAo);
    this.arrayOfPinyinPhonics.push(this.pinyinAi);
    this.arrayOfPinyinPhonics.push(this.pinyinEi);
    this.arrayOfPinyinPhonics.push(this.pinyinIe);
    this.arrayOfPinyinPhonics.push(this.pinyinUo);
    this.arrayOfPinyinPhonics.push(this.pinyinUa);
    this.arrayOfPinyinPhonics.push(this.pinyinIa);
    this.arrayOfPinyinPhonics.push(this.pinyinUe);
    this.arrayOfPinyinPhonics.push(this.pinyinIao);
    this.arrayOfPinyinPhonics.push(this.pinyinIou);
    this.arrayOfPinyinPhonics.push(this.pinyinUai);
    this.arrayOfPinyinPhonics.push(this.pinyinUei);

    // english
    this.arrayOfEnglishPhonics.push(this.englishA);
    this.arrayOfEnglishPhonics.push(this.englishB);
    this.arrayOfEnglishPhonics.push(this.englishC);
    this.arrayOfEnglishPhonics.push(this.englishD);
    this.arrayOfEnglishPhonics.push(this.englishE);
    this.arrayOfEnglishPhonics.push(this.englishF);
    this.arrayOfEnglishPhonics.push(this.englishG);
    this.arrayOfEnglishPhonics.push(this.englishH);
    this.arrayOfEnglishPhonics.push(this.englishI);
    this.arrayOfEnglishPhonics.push(this.englishJ);
    this.arrayOfEnglishPhonics.push(this.englishK);
    this.arrayOfEnglishPhonics.push(this.englishL);
    this.arrayOfEnglishPhonics.push(this.englishM);
    this.arrayOfEnglishPhonics.push(this.englishN);
    this.arrayOfEnglishPhonics.push(this.englishO);
    this.arrayOfEnglishPhonics.push(this.englishP);
    this.arrayOfEnglishPhonics.push(this.englishQ);
    this.arrayOfEnglishPhonics.push(this.englishR);
    this.arrayOfEnglishPhonics.push(this.englishS);
    this.arrayOfEnglishPhonics.push(this.englishT);
    this.arrayOfEnglishPhonics.push(this.englishU);
    this.arrayOfEnglishPhonics.push(this.englishV);
    this.arrayOfEnglishPhonics.push(this.englishW);
    this.arrayOfEnglishPhonics.push(this.englishX);
    this.arrayOfEnglishPhonics.push(this.englishY);
    this.arrayOfEnglishPhonics.push(this.englishZ);
  }

  this.currentLanguageArray = [];
  this.setCurrentLanguageArray = function(languageNumFromLanguageScreen)
  {
    if (languageNumFromLanguageScreen === 0)
    {
      this.currentLanguageArray = this.arrayOfEnglishPhonics;
    }
    else if (languageNumFromLanguageScreen === 1)
    {
      this.currentLanguageArray = this.arrayOfPinyinPhonics;
    }
    else if (languageNumFromLanguageScreen === 2)
    {
      this.currentLanguageArray = this.arrayOfCentralVietnamesePhonics;
    }
  }

  this.temporaryArrayOfPhonics = [];
  this.populateTemporaryArrayOfPhonics = function()
  {
    let randomArrayOfPhonicsIndex = undefined;
    randomArrayOfPhonicsIndex = getRandomIntInclusive(0,this.currentLanguageArray.length - 1);
    let phonicToMoveAndReturn1 = this.currentLanguageArray.splice(randomArrayOfPhonicsIndex,1);
    this.temporaryArrayOfPhonics.push(phonicToMoveAndReturn1[0]);


    randomArrayOfPhonicsIndex = getRandomIntInclusive(0,this.currentLanguageArray.length - 1);
    let phonicToMoveAndReturn2 = this.currentLanguageArray.splice(randomArrayOfPhonicsIndex,1);
    this.temporaryArrayOfPhonics.push(phonicToMoveAndReturn2[0]);
    this.examplePhonic2 = phonicToMoveAndReturn2;

    randomArrayOfPhonicsIndex = getRandomIntInclusive(0,this.currentLanguageArray.length - 1);
    let phonicToMoveAndReturn3 = this.currentLanguageArray.splice(randomArrayOfPhonicsIndex,1);
    this.temporaryArrayOfPhonics.push(phonicToMoveAndReturn3[0]);
    this.examplePhonic3 = phonicToMoveAndReturn3;

    randomArrayOfPhonicsIndex = getRandomIntInclusive(0,this.currentLanguageArray.length - 1);
    let phonicToMoveAndReturn4 = this.currentLanguageArray.splice(randomArrayOfPhonicsIndex,1);
    this.temporaryArrayOfPhonics.push(phonicToMoveAndReturn4[0]);
    this.examplePhonic4 = phonicToMoveAndReturn4;

    this.currentLanguageArray.push(phonicToMoveAndReturn1[0]);
    this.currentLanguageArray.push(phonicToMoveAndReturn2[0]);
    this.currentLanguageArray.push(phonicToMoveAndReturn3[0]);
    this.currentLanguageArray.push(phonicToMoveAndReturn4[0]);
  }

  this.currentCorrectPhonic = undefined;
  this.chooseCorrectPhonic = function()
  {
    let randomArrayOfPhonicsIndex = getRandomIntInclusive(0,this.temporaryArrayOfPhonics.length - 1);
    this.temporaryArrayOfPhonics[randomArrayOfPhonicsIndex].isTheCorrectChoice = true;
    this.currentCorrectPhonic = this.temporaryArrayOfPhonics[randomArrayOfPhonicsIndex];
  }

  this.assignPhonicsToDodgeballs = function()
  {
    let randomArrayOfPhonicsIndex = getRandomIntInclusive(0,this.temporaryArrayOfPhonics - 1);
    let phonic1ArrayResultFromSplice = this.temporaryArrayOfPhonics.splice(randomArrayOfPhonicsIndex,1);
    gameClassManager.currentGame.arrayOfDodgeballs[0].phonicClass = phonic1ArrayResultFromSplice[0];

    randomArrayOfPhonicsIndex = getRandomIntInclusive(0,this.temporaryArrayOfPhonics - 1);
    let phonic2ArrayResultFromSplice = this.temporaryArrayOfPhonics.splice(randomArrayOfPhonicsIndex,1);
    gameClassManager.currentGame.arrayOfDodgeballs[1].phonicClass = phonic2ArrayResultFromSplice[0];

    randomArrayOfPhonicsIndex = getRandomIntInclusive(0,this.temporaryArrayOfPhonics - 1);
    let phonic3ArrayResultFromSplice = this.temporaryArrayOfPhonics.splice(randomArrayOfPhonicsIndex,1);
    gameClassManager.currentGame.arrayOfDodgeballs[2].phonicClass = phonic3ArrayResultFromSplice[0];

    randomArrayOfPhonicsIndex = getRandomIntInclusive(0,this.temporaryArrayOfPhonics - 1);
    let phonic4ArrayResultFromSplice = this.temporaryArrayOfPhonics.splice(randomArrayOfPhonicsIndex,1);
    gameClassManager.currentGame.arrayOfDodgeballs[3].phonicClass = phonic4ArrayResultFromSplice[0];

  }

  this.setOrResetPhonicsOnDodgeballsAndPlayPromptAudio = function()
  {
    for (let i = 0; i < gameClassManager.currentGame.arrayOfDodgeballs.length; i++)
    {
      gameClassManager.currentGame.arrayOfDodgeballs[i].phonicClass.isTheCorrectChoice = false;
    }
    this.populateTemporaryArrayOfPhonics();
    this.chooseCorrectPhonic();
    this.assignPhonicsToDodgeballs();
    this.currentCorrectPhonic.promptAudio.sfx.play();
  }
}
nighttimeGameClass.prototype = new GameClass();
function nighttimeGameClass()
{
  this.name = 'nighttime game';
  this.playerCharacter = undefined;
  this.ghost1 = undefined;
  this.ghost2 = undefined;

  this.background = new nighttimeBackground();
  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/nightenedForeigner.mp3', 15.85);

  this.drawTransitionText = function()
  {
    customFontFillText(['Shoot the answers!', symbolExclamationPointImage], 60,30, 50,50);
    customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' Move right'], 30,15, 350,350);
    customFontFillText(['Space bar', ' ', symbolEqualsImage, ' Shoot'], 30,15, 175,500);
    customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' Move left'], 30,15, 50,350);
  }

  this.defineAndInitializePlayerCharacter = function()
  {
    this.playerCharacter = new NighttimePlayerCharacter();
  }

  this.imageAnswerWidth = undefined;
  this.imageAnswerHeight = undefined;
  this.imageAnswerHolderWidth = undefined;
  this.imageAnswerHolderHeight = undefined;

  this.audioImageAnswerWidth = undefined;
  this.audioImageAnswerHeight = undefined;
  this.audioImageAnswerHolderWidth = undefined;
  this.audioImageAnswerHolderHeight = undefined;

  this.correctTextAnswerHolderWidth = undefined;
  this.incorrectTextAnswerHolderWidth = undefined;

  this.LETTER_COLOR = 'black';
  this.textAnswerFontSize = '30';
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';

  this.titleScreenData =
  [
	  {name: "Nighttime", fontSize: 20, spacing: 10, x: 222, y: 480}
	];

  this.collidingObject = undefined;
  this.initialize = function()
  {
    this.defineAndInitializePlayerCharacter();
    let ghost1OscillationVelocity = getRandomArbitrary(-0.035,0.035);
    let ghost2OscillationVelocity = getRandomArbitrary(-0.035,0.035);

    this.ghost1 = new Ghost("images\\sprites\\nightTime\\Ghost.png", 1, ghost1OscillationVelocity);
    this.ghost2 = new Ghost("images\\sprites\\nightTime\\ghost2.png", -1, ghost2OscillationVelocity);

    this.imageAnswerWidth = gameCanvas.width*0.1;
		this.imageAnswerHeight = gameCanvas.height*0.1;
		this.audioImageAnswerWidth = gameCanvas.width*0.1;
    this.audioImageAnswerHeight = gameCanvas.height*0.1;

    this.imageAnswerHolderWidth = gameCanvas.width*0.15;
		this.imageAnswerHolderHeight = gameCanvas.height*0.15;
		this.audioImageAnswerHolderWidth = gameCanvas.width*0.15;
    this.audioImageAnswerHolderHeight = gameCanvas.height*0.15;
    drawAnswersManager.initialize();

    promptersManager.loadAppropriatePrompterBasedOnCurrentPromptsDataType();
    this.collidingObject = this.playerCharacter.laserShot;
    gameAudio.laserShoot = new sfxOneShot('audio/V/laser.mp3');

  }

  this.handleLeftArrowDown = function()
  {
    inputManager.leftArrowIsBeingHeld = true;
  }
  this.handleLeftArrowUp = function()
  {
    inputManager.leftArrowIsBeingHeld = false;
  }
  this.handleRightArrowDown = function()
  {
    inputManager.rightArrowIsBeingHeld = true;
  }
  this.handleRightArrowUp = function()
  {
    inputManager.rightArrowIsBeingHeld = false;
  }

  this.handleSpaceBarDown = function()
  {
    this.playerCharacter.initializeLaserShot();
    gameAudio.laserShoot.play();

  }

  this.update = function()
  {
    if (!promptersManager.shouldBeDrawingAPrompt &&
        fullGameStateMachine.currentState !== fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.pausedMiniGame)
    {
      this.playerCharacter.move();
    }
    this.moveGhosts();
    this.handleGhostsAtEdgesOfScreen();
    this.collisionsWithAnswersManager.handleCollisionsWithAnswers(this.collidingObject);
  }

  this.draw = function()
  {
    this.background.draw();
    this.playerCharacter.draw();
    this.ghost1.draw();
    this.ghost2.draw();

    drawAnswersManager.draw();
    promptersManager.drawPromptsWhenAppropriate();
  }

  this.moveGhosts = function()
  {
    this.ghost1.move();
    this.ghost2.move();
  }

  this.handleGhostsAtEdgesOfScreen = function()
  {
    this.ghost1.handleEndOfScreenDirectionChanges();
    this.ghost2.handleEndOfScreenDirectionChanges();
  }
}

const nighttimeGame = new nighttimeGameClass();

function nighttimeBackground()
{
  this.image = "images\\Backgrounds\\nighttimeBackground.png";
  this.draw = function()
  {
    drawFromSheet(this.image, 0,0, gameCanvas.width,gameCanvas.height);
    //gameCanvasContext.drawImage(this.image, 0,0, gameCanvas.width,gameCanvas.height);
  }
}
function NighttimePlayerCharacter()
{
  this.image = "images\\sprites\\dodgeBall\\Player2.png";

  this.width = gameCanvas.width*0.1;
  this.height = gameCanvas.height*0.15;

  this.x = gameCanvas.width/2 - this.width/2;
  this.y = gameCanvas.height - this.height*1.5;

  this.ghostGunX = this.x + this.width;
  this.ghostGunY = this.y - this.height*0.33;
  this.ghostGunWidth = this.width*0.33;
  this.ghostGunHeight = this.height*0.66;

  this.laserShot =
  {
    x: undefined,
    y: 0,
    width: this.ghostGunWidth*0.66,
    height: this.ghostGunY
  };

  this.initializeLaserShot = function()
  {
    this.laserShot.height = this.ghostGunY;
    this.laserShot.y = 0;
    this.laserShot.x = this.ghostGunX + this.ghostGunWidth*0.33;
    let laserShot = this.laserShot;
    setTimeout(function(){
      laserShot.x = undefined;
    },250,laserShot)
  }

  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
    gameCanvasContext.fillStyle = 'yellow';
    gameCanvasContext.fillRect(this.ghostGunX,this.ghostGunY, this.ghostGunWidth,this.ghostGunHeight);
    if (this.laserShot.x !== undefined)
    {
      gameCanvasContext.fillStyle = 'red';
      gameCanvasContext.fillRect(this.laserShot.x,this.laserShot.y, this.laserShot.width,this.laserShot.height);
    }
  }

  this.move = function()
  {
    if (inputManager.leftArrowIsBeingHeld === true)
    {
      this.x -= 5;
      this.ghostGunX -=5;
    }
    if (inputManager.rightArrowIsBeingHeld === true)
    {
      this.x += 5;
      this.ghostGunX += 5;
    }
  }
}
function Ghost(image, initialDirectionNumber, oscillationVelocityY)
{
  this.image = image;
  this.width = gameCanvas.width*0.1;
  this.height = gameCanvas.height*0.15;
  this.x = getRandomArbitrary(0,gameCanvas.width - this.width);
  this.y = getRandomArbitrary(this.height*2,gameCanvas.height*0.3);

  this.answerStringWidth = 10;
  this.answerStringHeight = 100;
  this.answerStringX = this.x + this.width/2 - this.answerStringWidth;
  this.answerStringY = this.y + this.height/2;

  this.isCorrectAnswer = undefined;
  this.answerX = this.answerStringX - 50;
  this.answerY = this.answerStringY + this.answerStringHeight + this.answerStringHeight;

  this.direction = initialDirectionNumber;

  this.draw = function()
  {
    gameCanvasContext.fillStyle = 'brown';
    gameCanvasContext.fillRect(this.answerStringX,this.answerStringY, this.answerStringWidth,this.answerStringHeight);
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
  }

  this.oscillationVelocityY = oscillationVelocityY;
  this.circleAngleInRadians = 0;
  this.move = function()
  {
    this.x += 3*this.direction;
    this.circleAngleInRadians += this.oscillationVelocityY;
    this.y = this.y + Math.sin(this.circleAngleInRadians);

    this.answerStringX += 3*this.direction;
    this.answerStringY = this.answerStringY + Math.sin(this.circleAngleInRadians);

    if (this.isCorrectAnswer === true)
    {
      promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate += 3*this.direction;
      promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate = this.y + Math.sin(this.circleAngleInRadians);
    }
    else if (this.isCorrectAnswer === false)
    {
      promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate += 3*this.direction;
      promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate = this.y + Math.sin(this.circleAngleInRadians);
    }
    this.answerX += 3*this.direction;
    this.answerY = this.y + Math.sin(this.circleAngleInRadians);
  }

  this.handleEndOfScreenDirectionChanges = function()
  {
    if (this.x <= 0)
    {
      this.direction *= -1;
    }
    if (this.x + this.width >= gameCanvas.width)
    {
      this.direction *= - 1;
    }
  }
}
frogCrateGameClass.prototype = new GameClass();
function frogCrateGameClass()
{
  this.name = 'frog crate game';
  this.playerCharacter = undefined;
  this.defineAndInitializePlayerCharacter = function()
  {
    this.playerCharacter = new FrogCratePlayer();
    this.playerCharacter.tongue = new Tongue();
    this.collidingObject = this.playerCharacter.tongue;

    let fly1OscillationVelocity = getRandomArbitrary(-0.035,0.035);
    let fly2OscillationVelocity = getRandomArbitrary(-0.035,0.035);

    this.fly1 = new Fly("images\\sprites\\frogCrate\\cartoonFly.png", 1,fly1OscillationVelocity);
    this.fly2 = new Fly("images\\sprites\\frogCrate\\cartoonFly.png", -1, fly2OscillationVelocity);
  }

  this.drawTransitionText = function()
  {
    customFontFillText(['Catch the answers!', symbolExclamationPointImage], 60,30, 50,50);
    customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' Move right'], 30,15, 350,350);
    customFontFillText(['Space bar', ' ', symbolEqualsImage, ' Shoot'], 30,15, 175,500);
    customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' Move left'], 30,15, 50,350);
  }

  this.textAnswerFontSize = '15';
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';
  this.LETTER_COLOR = "black";

  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/200410.mp3', 73.46);

  this.titleScreenData =
  [
    {name: "Frog", fontSize: 25, spacing: 15, x: 330, y: 465},
    {name: "Crate", fontSize: 25, spacing: 10, x: 330, y: 505}
  ]

  this.background = new FrogCrateBackground();

  this.fly1 = undefined;
  this.fly2 = undefined;

  this.intialize = function()
  {
    this.defineAndInitializePlayerCharacter();

    this.imageAnswerWidth = gameCanvas.width*0.1;
		this.imageAnswerHeight = gameCanvas.height*0.1;
		this.audioImageAnswerWidth = gameCanvas.width*0.1;
    this.audioImageAnswerHeight = gameCanvas.height*0.1;

    this.imageAnswerHolderWidth = gameCanvas.width*0.15;
		this.imageAnswerHolderHeight = gameCanvas.height*0.15;
		this.audioImageAnswerHolderWidth = gameCanvas.width*0.15;
    this.audioImageAnswerHolderHeight = gameCanvas.height*0.15;


  }

  this.update = function()
  {
    if (!promptersManager.shouldBeDrawingAPrompt &&
        fullGameStateMachine.currentState !== fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.pausedMiniGame)
        {
          this.playerCharacter.move();
          this.playerCharacter.stretchTongue();
          this.playerCharacter.returnTongue();
          this.playerCharacter.updateTongueLength();

          this.moveFlys();
          this.handleFliesAtEdgesOfScreen();
          this.collisionsWithAnswersManager.handleCollisionsWithAnswers(this.collidingObject);
        }
  }

  this.moveFlys = function()
  {
    this.fly1.move();
    this.fly2.move();
  }

  this.handleFliesAtEdgesOfScreen = function()
  {
    this.fly1.handleEndOfScreenDirectionChanges();
    this.fly2.handleEndOfScreenDirectionChanges();
  }

  this.draw = function()
  {
    this.background.draw();
    this.playerCharacter.draw();

    this.fly1.draw();
    this.fly2.draw();

    drawAnswersManager.draw();
    promptersManager.drawPromptsWhenAppropriate();
  }

  this.handleRightArrowDown = function()
  {
    inputManager.rightArrowIsBeingHeld = true;
  }
  this.handleRightArrowUp = function()
  {
    inputManager.rightArrowIsBeingHeld = false;
  }

  this.handleLeftArrowDown = function()
  {
    inputManager.leftArrowIsBeingHeld = true;
  }
  this.handleLeftArrowUp = function()
  {
    inputManager.leftArrowIsBeingHeld = false;
  }

  this.handleSpaceBarDown = function()
  {
    if (this.playerCharacter.tongueShouldBeStretchingOut === true || this.playerCharacter.tongueShouldBeReturningToMouth === true)
    {
      return;
    }

    this.playerCharacter.tongueShouldBeStretchingOut = true;
  }
}

const frogCrateGame = new frogCrateGameClass();

function FrogCrateBackground()
{
  this.waterImage = "images\\Backgrounds\\Lake.png";
  this.grassImage = 'images\\Backgrounds\\Grass.png';
  this.skyImage = "images\\Backgrounds\\Sky.png";
  this.bathStoneImage = "images\\sprites\\frogCrate\\bathStone.png";
  this.draw = function()
  {
    drawFromSheet(this.skyImage, 0,0, gameCanvas.width,gameCanvas.height);
    drawFromSheet(this.grassImage, 0,gameCanvas.height*0.35, gameCanvas.width,gameCanvas.height*0.75);
    drawFromSheet(this.waterImage, 0,gameCanvas.height*0.4, gameCanvas.width,gameCanvas.height*0.5);
    drawFromSheet(this.bathStoneImage, 0,gameCanvas.height*0.9, gameCanvas.width,gameCanvas.height*0.15);
    // gameCanvasContext.drawImage(this.skyImage, 0,0, gameCanvas.width,gameCanvas.height);
    // gameCanvasContext.drawImage(this.grassImage, 0,gameCanvas.height*0.35, gameCanvas.width,gameCanvas.height*0.75);
    // gameCanvasContext.drawImage(this.waterImage, 0,gameCanvas.height*0.4, gameCanvas.width,gameCanvas.height*0.5);
    // gameCanvasContext.drawImage(this.bathStoneImage, 0,gameCanvas.height*0.9, gameCanvas.width,gameCanvas.height*0.15);
  }
}

function FrogCratePlayer()
{
  this.frogInBowlImage = "images\\sprites\\frogCrate\\FrogInBowl.png";


  this.width = gameCanvas.width*0.2;
  this.height = gameCanvas.height*0.15;

  this.x = gameCanvas.width/2 - this.width/2;
  this.y = gameCanvas.height*0.8;

  this.tongue = undefined;

  this.draw = function()
  {
    drawFromSheet(this.tongue.image, this.tongue.x,this.tongue.y, this.tongue.width,this.tongue.height);
    drawFromSheet(this.frogInBowlImage, this.x,this.y, this.width,this.height);
    // gameCanvasContext.drawImage(this.tongue.image, this.tongue.x,this.tongue.y, this.tongue.width,this.tongue.height);
    // gameCanvasContext.drawImage(this.frogInBowlImage, this.x,this.y, this.width,this.height);
  }

  this.move = function()
  {
    if (inputManager.rightArrowIsBeingHeld === true)
    {
      this.x += 5;
      this.tongue.x += 5;
    }
    if (inputManager.leftArrowIsBeingHeld === true)
    {
      this.x -= 5;
      this.tongue.x -= 5;
    }
  }

  this.tongueShouldBeStretchingOut = false;
  this.stretchTongue = function()
  {
    if (this.tongueShouldBeStretchingOut === true)
    {
      this.tongue.y -= 10;
      if (this.tongue.y <= 0)
      {
        this.tongueShouldBeStretchingOut = false;
        this.tongueShouldBeReturningToMouth = true;
      }
    }
  }

  this.tongueShouldBeReturningToMouth = false;
  this.returnTongue = function()
  {
    if (this.tongueShouldBeReturningToMouth === true)
    {
      this.tongue.y += 10;
      if (this.tongue.y >= this.y - 10)
      {
        this.tongue.y = this.y - 10;
        this.tongueShouldBeReturningToMouth = false;
      }
    }
  }

  this.updateTongueLength = function()
  {
    this.tongue.height = this.y - this.tongue.y + 10;
  }
}

function Tongue()
{
  let playerCharacter = gameClassManager.currentGame.playerCharacter;

  this.image = "images\\sprites\\frogCrate\\frogTongue.png";
  this.width = 10;
  this.x = playerCharacter.x + playerCharacter.width/2 - 1.5;
  this.y = playerCharacter.y - 10;
  this.height = playerCharacter.y - playerCharacter.tongueY + 10;
}

function Fly(image, initialDirectionNumber, oscillationVelocityY)
{
  this.image = image;
  this.width = gameCanvas.width*0.1;
  this.height = gameCanvas.height*0.15;
  this.x = getRandomArbitrary(0,gameCanvas.width - this.width);
  this.y = getRandomArbitrary(this.height*2,gameCanvas.height*0.3);

  this.answerStringWidth = 10;
  this.answerStringHeight = 100;
  this.answerStringX = this.x + this.width/2 - this.answerStringWidth;
  this.answerStringY = this.y + this.height/2;

  this.isCorrectAnswer = undefined;
  this.answerX = this.answerStringX - 50;
  this.answerY = this.answerStringY + this.answerStringHeight + this.answerStringHeight;

  this.direction = initialDirectionNumber;

  this.draw = function()
  {
    gameCanvasContext.fillStyle = 'brown';
    gameCanvasContext.fillRect(this.answerStringX,this.answerStringY, this.answerStringWidth,this.answerStringHeight);
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
  }

  this.oscillationVelocityY = oscillationVelocityY;
  this.circleAngleInRadians = 0;
  this.move = function()
  {
    this.x += 3*this.direction;
    this.circleAngleInRadians += this.oscillationVelocityY;
    this.y = this.y + Math.sin(this.circleAngleInRadians);

    this.answerStringX += 3*this.direction;
    this.answerStringY = this.answerStringY + Math.sin(this.circleAngleInRadians);

    if (this.isCorrectAnswer === true)
    {
      promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate += 3*this.direction;
      promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate = this.y + Math.sin(this.circleAngleInRadians);
    }
    else if (this.isCorrectAnswer === false)
    {
      promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate += 3*this.direction;
      promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate = this.y + Math.sin(this.circleAngleInRadians);
    }
    this.answerX += 3*this.direction;
    this.answerY = this.y + Math.sin(this.circleAngleInRadians);
  }

  this.handleEndOfScreenDirectionChanges = function()
  {
    if (this.x <= 0)
    {
      this.direction *= -1;
    }
    if (this.x + this.width >= gameCanvas.width)
    {
      this.direction *= - 1;
    }
  }
}
helloWorld2GameClass.prototype = new GameClass();
function helloWorld2GameClass()
{
  this.name = 'hello world 2 game';
  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/helloWorldSong.mp3', 16);

  this.playerCharacter = undefined;
  this.NPC = undefined;
  this.defineAndInitializePlayerCharacter = function()
	{
		this.playerCharacter = new HelloWorldCharacter("images\\sprites\\dodgeBall\\Player1.png", gameCanvas.width*0.1);
    this.NPC = new HelloWorldCharacter("images\\sprites\\dodgeBall\\Player4.png", gameCanvas.width*0.8);
		// this.playerCharacter.initialize();

    this.playerCharacterSpeechBubbleHW2A = new CharacterSpeechBubbleHW2("images\\sprites\\dayTime\\speechBubbleFromLeftA.png","images\\sprites\\dayTime\\speechBubbleFromLeftAHighlighted.png", gameCanvas.width*0.1,gameCanvas.height*0.1, gameCanvas.width/3,gameCanvas.height/3);
    this.playerCharacterSpeechBubbleHW2B = new CharacterSpeechBubbleHW2("images\\sprites\\dayTime\\speechBubbleFromLeftB.png","images\\sprites\\dayTime\\speechBubbleFromLeftBHighlighted.png", gameCanvas.width*0.2,gameCanvas.height*0.3, gameCanvas.width/3,gameCanvas.height/3);
  }

  this.drawTransitionText = function()
  {
    customFontFillText(['Click the correct '], 35,30, 100,50);
    customFontFillText(['question!', symbolExclamationPointImage], 35,30, gameCanvas.width/2 - 150,100);
    customFontFillText(['Mouse Click ', symbolEqualsImage, ' Choose Question'], 30,15, 110,gameCanvas.height/2);
  }

  this.questionClassManager = undefined;
  this.questionAudioManager = undefined;
  this.imagePrompter = undefined;

  this.background = new HelloWorldBackground();

  this.textAnswerFontSize = '30';
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';
	this.titleScreenData = [
	  {name: "Hello", fontSize: 25, spacing: 12, x: 530, y: 565},
	  {name: "World 2", fontSize: 17, spacing: 10, x: 530, y: 600}
	];

	this.imageAnswerHolderWidth = undefined;
  this.imageAnswerHolderHeight = undefined;

	this.audioImageAnswerHolderWidth = undefined;
  this.audioImageAnswerHolderHeight = undefined;

  this.correctTextAnswerHolderWidth = undefined;
  this.incorrectTextAnswerHolderWidth = undefined;

  this.startGameSpecialCode = function()
  {
      gameClassManager.currentGame.questionAudioManager.assignOrderOfAudioQuestions();
      musicManager.startDuck();
      gameClassManager.currentGame.questionAudioManager.assignOnendedFunctions();

      gameClassManager.currentGame.imagePrompter.promptThePlayer();
  }


  this.initialize = function()
	{
    this.defineAndInitializePlayerCharacter();
    this.questionClassManager = new QuestionClassManager();
    this.questionAudioManager = new QuestionAudioManager();
    this.imagePrompter = new HelloWorld2ImagePrompter();
    this.questionClassManager.populateArraysOfConvoPatterns();
    this.currentLanguageArray = this.setCurrentLanguageArray();

    this.questionClassManager.chooseCorrectQuestion(this.currentLanguageArray);
    this.questionClassManager.chooseIncorrectQuestion(this.currentLanguageArray);
    this.questionClassManager.assignAudioClipsToSpeechBubbles();
    this.questionAudioManager.assignOrderOfAudioQuestions();
    this.questionAudioManager.assignOnendedFunctions();
    this.questionAudioManager.getAudioClips();

    // this.conversationAudioManager.playAudioClipsInSuccession();
  }

  this.setCurrentLanguageArray = function()
  {
    let currentLanguageArray = undefined;
    if (languageSelectionScreen.languageNum === 0)
    {
      // this.currentLanguageArray = this.conversationPatternManager.arrayOfEnglishConvoPatterns; **doesn't exist yet, use vietnamese
      currentLanguageArray = this.questionClassManager.arrayOfCentralVietnameseQuestions;
    }
    else if (languageSelectionScreen.languageNum === 1)
    {
      // this.currentLanguageArray = this.conversationPatternManager.arrayOfMandarinConvoPatterns; **doesn't exist yet, use vietnamese
      currentLanguageArray = this.questionClassManager.arrayOfMandarinQuestions;
    }
    else if (languageSelectionScreen.languageNum === 2)
    {
      currentLanguageArray = this.questionClassManager.arrayOfCentralVietnameseQuestions;

    }
    return currentLanguageArray;
  }

  this.draw = function()
	{
    this.background.draw();
    this.playerCharacter.draw();
    this.NPC.draw();
    this.playerCharacterSpeechBubbleHW2A.draw();
    this.playerCharacterSpeechBubbleHW2B.draw();
    if (this.imagePrompter.shouldBeDrawingAPrompt === true)
    {
      this.imagePrompter.drawThePrompt();
    }
  }

  this.update = function()
  {
    this.playerCharacterSpeechBubbleHW2A.returnMouseOverStatus();
    this.playerCharacterSpeechBubbleHW2B.returnMouseOverStatus();
    if (this.imagePrompter.shouldBeDrawingAPrompt === true)
    {
      this.imagePrompter.updatePromptImage();
    }
  }

  this.handleClick = function()
  {
    this.playerCharacterSpeechBubbleHW2A.handleClick();
    this.playerCharacterSpeechBubbleHW2B.handleClick();
  }
}

const helloWorld2Game = new helloWorld2GameClass();

function HelloWorld2Background()
{
  this.image = "images\\Backgrounds\\daytimeBackground.png";

  this.draw = function()
  {
    drawFromSheet(this.image, 0,0, gameCanvas.width,gameCanvas.height);
    //gameCanvasContext.drawImage(this.image, 0,0, gameCanvas.width,gameCanvas.height);
  }
}

function HelloWorldCharacter(image, x)
{
  this.image = image;

  this.x = x;
  this.y = gameCanvas.height*0.5;

  this.width = 100;
  this.height = 200;

  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
  }
}

function CharacterSpeechBubbleHW2(image,highlightedImage, x,y, width,height)
{
  this.image = image;
  this.highlightedImage = highlightedImage;
  this.arrowImage = "images\\sprites\\dayTime\\arrow.png";
  this.arrowImageWidth = 50;
  this.arrowImageHeight = 100;

  this.isBeingHeard = false;

  this.x = x;
  this.y = y;
  this.width = width;
  this.height = height;

  this.message = undefined;

  this.highlighted = false;

  this.draw = function()
  {
    if (this.highlighted === true)
    {
      drawFromSheet(this.highlightedImage, this.x,this.y, this.width,this.height);
      //gameCanvasContext.drawImage(this.highlightedImage, this.x,this.y, this.width,this.height);
    }
    else if (this.highlighted === false)
    {
      drawFromSheet(this.image, this.x,this.y, this.width,this.height);
      //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
    }

    if (this.isBeingHeard === true)
    {
      let arrowImageStartingX = this.x + this.width/2 - this.arrowImageWidth/2;
      let arrowImageStartingY = this.y - this.arrowImageHeight;
      // let arrowImageStartingX = gameCanvas.width/2;
      // let arrowImageStartingY = gameCanvas.height/2;
      drawFromSheet(this.arrowImage, arrowImageStartingX,arrowImageStartingY, this.arrowImageWidth,this.arrowImageHeight);
      //gameCanvasContext.drawImage(this.arrowImage, arrowImageStartingX,arrowImageStartingY, this.arrowImageWidth,this.arrowImageHeight);
    }
  }

  this.highlightBoundaryLeftX = this.x;
  this.highlightBoundaryTopY = this.y;
  this.highlightBoundaryRightX = this.x + this.width;
  this.highlightBoundaryBottomY = (this.y + this.height)*0.725;

  this.returnMouseOverStatus = function()
  {
    if (inputManager.mouseCoordinates.x > this.highlightBoundaryLeftX && inputManager.mouseCoordinates.x < this.highlightBoundaryRightX &&
        inputManager.mouseCoordinates.y > this.highlightBoundaryTopY && inputManager.mouseCoordinates.y < this.highlightBoundaryBottomY)
        {
          this.highlighted = true;
        }
        else {
          this.highlighted = false;
        }
  }

  this.handleClick = function()
  {
    if (!this.highlighted)
    {
      return
    }
    else
    {
      if (this.message === gameClassManager.currentGame.questionClassManager.currentCorrectQuestion.questionAudio)
      {
        amountCorrect++;
        genAudio.playPositive();
      }
      else if (this.message === gameClassManager.currentGame.questionClassManager.incorrectQuestion.questionAudio)
      {
        amountIncorrect++;
        genAudio.playNegative();
      }
      gameClassManager.currentGame.questionClassManager.chooseCorrectQuestion(gameClassManager.currentGame.currentLanguageArray);
      gameClassManager.currentGame.questionClassManager.chooseIncorrectQuestion(gameClassManager.currentGame.currentLanguageArray);
      gameClassManager.currentGame.questionClassManager.assignAudioClipsToSpeechBubbles();
      gameClassManager.currentGame.questionAudioManager.getAudioClips();
      gameClassManager.currentGame.questionAudioManager.assignOrderOfAudioQuestions();
      gameClassManager.currentGame.questionAudioManager.assignOnendedFunctions();
      gameClassManager.currentGame.imagePrompter.promptThePlayer();
    }
  }
}

function HelloWorld2ImagePrompter()
{
  this.name = 'hello world 2 image prompter';
  this.image = undefined;
  this.loadCurrentImage = function(imageToLoad)
  {
    this.image = imageToLoad;
  }

  this.backgroundColor = 'rgb(224,224,224)';
  this.currentWidth = 150;
  this.currentHeight = 150;

  this.updatePromptImage = function()
  {
    this.currentWidth += gameClassManager.currentGame.FRAME_RATE/5;
    this.currentHeight += gameClassManager.currentGame.FRAME_RATE/5;
  }

  this.drawThePrompt = function()
  {
    if (this.image !== undefined)
    {
      gameCanvasContext.fillStyle = this.backgroundColor;
      gameCanvasContext.fillRect(gameCanvas.width/2 - this.currentWidth/2,gameCanvas.height/2 - this.currentHeight/2,
                                 this.currentWidth,this.currentHeight);

     customFontFillText(["Ask this question", symbolQuestionMarkImage],
                         this.currentWidth*0.15 /*font size*/,this.currentWidth*0.055 /*spacing*/,
                         gameCanvas.width/2 - this.currentWidth/2  + this.currentWidth*0.0175,//xCoordinate
                         gameCanvas.height/2 - this.currentHeight/2);//yCoordinate
      //(img,
      //sourceImageStartingX,SourceImageStartingY,SourceImageWidthToCrop,SourceImageHeightToCrop,
      //targetCanvasXCoordinateToStartDrawing,targetCanvasYCoordinateToStartDrawing,
      //widthOfImageToDrawOnTargetCanvas,heightOfImageToDrawOnTargetCanvas);
      gameCanvasContext.drawImage(this.image,
                           0,0, 1000,750,
                           gameCanvas.width/2 - this.currentWidth/2 + this.currentWidth*0.225,
                           gameCanvas.height/2 - this.currentHeight/2 + this.currentHeight*0.2,
                           this.currentWidth*0.6,this.currentHeight*0.7);
    }

    dateAndTime.checkForNecessityOfUsingDatesForImagePrompter();
    if (dateAndTime.shouldDrawADate)
    {
      customFontFillText( (dateAndTime.dateToDraw.month + 1).toString(), this.currentWidth*0.1 /*font size*/, this.currentWidth*0.055 /*spacing*/,
                         gameCanvas.width/2 - 20, /*- this.currentWidth/2  + this.currentWidth*0.0175,*///xCoordinate)
                         gameCanvas.height/2 - this.currentHeight/2 + this.currentHeight*0.3);/* - this.currentHeight/2 + this.currentHeight*0.1);*///yCoordinate

      customFontFillText(dateAndTime.dateToDraw.day.toString(), this.currentWidth*0.15 /*font size*/,this.currentWidth*0.055 /*spacing*/,
                         gameCanvas.width/2 - 20,//xCoordinate)
                         gameCanvas.height/2);//yCoordinate
    }
  }

  this.shouldBeDrawingAPrompt = false;
  this.togglePromptingBoolean = function()
  {
    if (gameClassManager.currentGame.imagePrompter.shouldBeDrawingAPrompt === true)
    {
      gameClassManager.currentGame.imagePrompter.shouldBeDrawingAPrompt = false;
      gameClassManager.currentGame.imagePrompter.currentWidth = 150;
      gameClassManager.currentGame.imagePrompter.currentHeight = 150;
      gameClassManager.currentGame.questionAudioManager.firstQuestionBubble.message.sfx.play();
      // gameClassManager.currentGame.questionAudioManager.secondQuestionBubble.message.sfx.onended = function()
      // {
      //   console.log('second question bubble audio onended triggering');
      //   scopingProblemThis.secondQuestionBubble.isBeingHeard = false;
      //   scopingProblemThis.firstQuestionBubble.isBeingHeard = false;
      // }
			gameClassManager.currentGame.questionAudioManager.firstQuestionBubble.isBeingHeard = true;
      gameClassManager.currentGame.questionAudioManager.secondQuestionBubble.isBeingHeard = false;
    }
    else if (gameClassManager.currentGame.imagePrompter.shouldBeDrawingAPrompt === false)
    {
      gameClassManager.currentGame.imagePrompter.shouldBeDrawingAPrompt = true;
      gameClassManager.currentGame.imagePrompter.currentHeight = 150;
      gameClassManager.currentGame.imagePrompter.currentHeight = 150;
    }
  }

  this.promptThePlayer = function()
  {
    this.togglePromptingBoolean();
    setTimeout(this.togglePromptingBoolean,2000);
  }
}

function QuestionAudioManager()
{
  this.correctQuestionAudio = undefined;
  this.incorrectQuestionAudio = undefined;

  this.getAudioClips = function()
  {
    let questionClassManager = gameClassManager.currentGame.questionClassManager;
    this.correctQuestionAudio = questionClassManager.currentCorrectQuestion.questionAudio;
    this.incorrectAnswerAudio = questionClassManager.incorrectQuestion.questionAudio;
  }

  this.firstQuestionBubble = undefined;
  this.secondQuestionBubble = undefined;
  this.assignOrderOfAudioQuestions = function()
  {
    let scopingProblemThis = gameClassManager.currentGame.questionAudioManager;

    let fiftyFiftyChance = Math.random();
    if (fiftyFiftyChance < 0.5)
    {
      scopingProblemThis.firstQuestionBubble = gameClassManager.currentGame.playerCharacterSpeechBubbleHW2A;
      scopingProblemThis.secondQuestionBubble = gameClassManager.currentGame.playerCharacterSpeechBubbleHW2B;
    }
    else
    {
      scopingProblemThis.firstQuestionBubble = gameClassManager.currentGame.playerCharacterSpeechBubbleHW2B;
      scopingProblemThis.secondQuestionBubble = gameClassManager.currentGame.playerCharacterSpeechBubbleHW2A;
    }
  }

  this.assignOnendedFunctions = function()
  {
    let scopingProblemThis = gameClassManager.currentGame.questionAudioManager;
    scopingProblemThis.firstQuestionBubble.message.sfx.onended = function()
    {
      scopingProblemThis.secondQuestionBubble.message.play();
      scopingProblemThis.firstQuestionBubble.isBeingHeard = false;
      scopingProblemThis.secondQuestionBubble.isBeingHeard = true;
    }

    scopingProblemThis.secondQuestionBubble.message.sfx.onended = function()
    {
      scopingProblemThis.secondQuestionBubble.isBeingHeard = false;
      scopingProblemThis.firstQuestionBubble.isBeingHeard = false;
    }

  }
}

function QuestionClass(name, questionAudio,promptImage)
{
  this.name = name;
  this.questionAudio = questionAudio;
  this.promptImage = promptImage;

  this.promptImageX = gameCanvas.width/2;
  this.promptImageY = gameCanvas.height/2;

  this.drawPrompt = function()
  {
    if (this.promptImageX !== undefined)
    {
      gameCanvasContext.drawImage(this.promptImage, this.promptAudioX,this.promptAudioY, 100,100);
    }
  }
}

function QuestionClassManager()
{
  this.centralVietnameseWhatIsYourNameQuestionClass = new QuestionClass('what is your name question', promptAudio.centralVietnameseWhatsYourNameGeneral,whatIsYourNameImage);
  this.centralVietnameseWhereAreYouFromQuestionClass = new QuestionClass('where are you from question', promptAudio.centralVietnameseWhereAreYouFrom,whereAreYouFromImage);
  this.centralVietnameseWhatDoYouLikeToEatQuestionClass = new QuestionClass('what do you like to eat question', promptAudio.centralVietnameseWhatDoYouLikeToEat,whatDoYouLikeToEatImage);
  this.centralVietnameseHowAreYouQuestionClass = new QuestionClass('how are you question', promptAudio.centralVietnameseHowAreYouGeneral,howAreYouImage);
  this.centralVietnameseExcuseMeQuestionClass = new QuestionClass('excuse me question', promptAudio.centralVietnameseExcuseMe,excuseMeQuestionAskingContextImage);

  this.arrayOfCentralVietnameseQuestions = [];

  this.mandarinHowAreYouQuestionClass = new QuestionClass('how are you question', promptAudio.mandarinHowAreYou,howAreYouImage);
  this.mandarinWhereAreYouFromQuestionClass = new QuestionClass('where are you from question', promptAudio.mandarinWhereAreYouFrom,whereAreYouFromImage);
  this.mandarinWhereDoYouLiveQuestionClass = new QuestionClass('where do you live question', promptAudio.mandarinWhereDoYouLive,whereDoYouLiveImage);
  this.mandarinWhatIsYourNameQuestionClass = new QuestionClass('what is your name question', promptAudio.mandarinWhatIsYourName,whatIsYourNameImage);
  this.mandarinWhatIsYourJobQuestionClass = new QuestionClass('what is your job question', promptAudio.mandarinWhatIsYourJob,whatIsYourJobImage);
  this.mandarinWhatDoYouLikeToDoQuestionClass = new QuestionClass('what do you like to do question', promptAudio.mandarinWhatDoYouLikeToDo,whatDoYouLikeToDoImage);
  this.mandarinWhatPartOfChinaQuestionClass = new QuestionClass('what part of China question', promptAudio.mandarinWhatPartOfChina,whatPartOfChinaImage);
  this.mandarinAnythingElseQuestionClass = new QuestionClass('anything else question', promptAudio.mandarinAnythingElse,anythingElseImage);

  this.arrayOfMandarinQuestions = [];

  this.populateArraysOfConvoPatterns = function()
  {
    //central vietnamese
    this.arrayOfCentralVietnameseQuestions.push(this.centralVietnameseWhatIsYourNameQuestionClass);
    this.arrayOfCentralVietnameseQuestions.push(this.centralVietnameseWhereAreYouFromQuestionClass);
    this.arrayOfCentralVietnameseQuestions.push(this.centralVietnameseWhatDoYouLikeToEatQuestionClass);
    this.arrayOfCentralVietnameseQuestions.push(this.centralVietnameseHowAreYouQuestionClass);
    this.arrayOfCentralVietnameseQuestions.push(this.centralVietnameseExcuseMeQuestionClass);

    //mandarin
    this.arrayOfMandarinQuestions.push(this.mandarinHowAreYouQuestionClass);
    this.arrayOfMandarinQuestions.push(this.mandarinWhereAreYouFromQuestionClass);
    this.arrayOfMandarinQuestions.push(this.mandarinWhereDoYouLiveQuestionClass);
    this.arrayOfMandarinQuestions.push(this.mandarinWhatIsYourNameQuestionClass);
    this.arrayOfMandarinQuestions.push(this.mandarinWhatIsYourJobQuestionClass);
    this.arrayOfMandarinQuestions.push(this.mandarinWhatDoYouLikeToDoQuestionClass);
    this.arrayOfMandarinQuestions.push(this.mandarinWhatPartOfChinaQuestionClass);
    this.arrayOfMandarinQuestions.push(this.mandarinAnythingElseQuestionClass);

  }

  this.currentCorrectQuestion = undefined;
  this.chooseCorrectQuestion = function(currentLanguageArray)
  {
    let randomArrayOfQuestionsIndex = getRandomIntInclusive(0,currentLanguageArray.length - 1);
    this.currentCorrectQuestion = currentLanguageArray[randomArrayOfQuestionsIndex];
    gameClassManager.currentGame.imagePrompter.loadCurrentImage(this.currentCorrectQuestion.promptImage);
  }

  this.incorrectQuestion = undefined;
  this.chooseIncorrectQuestion = function(currentLanguageArray)
  {
    let randomArrayOfQuestionsIndex = getRandomIntInclusive(0,currentLanguageArray.length - 1);
    this.incorrectQuestion = currentLanguageArray[randomArrayOfQuestionsIndex];

    while (this.incorrectQuestion === this.currentCorrectQuestion)
    {
      randomArrayOfQuestionsIndex = getRandomIntInclusive(0,currentLanguageArray.length - 1);
      this.incorrectQuestion = currentLanguageArray[randomArrayOfQuestionsIndex];
    }
  }

  this.assignAudioClipsToSpeechBubbles = function()
  {
    let playerCharacterSpeechBubbleHW2A = gameClassManager.currentGame.playerCharacterSpeechBubbleHW2A;
    let playerCharacterSpeechBubbleHW2B = gameClassManager.currentGame.playerCharacterSpeechBubbleHW2B;

    let fiftyFiftyChance = Math.random();
    if (fiftyFiftyChance < 0.5)
    {
      playerCharacterSpeechBubbleHW2A.message = this.currentCorrectQuestion.questionAudio;

      playerCharacterSpeechBubbleHW2B.message = this.incorrectQuestion.questionAudio;
    }
    else
    {
      playerCharacterSpeechBubbleHW2B.message = this.currentCorrectQuestion.questionAudio;

      playerCharacterSpeechBubbleHW2A.message = this.incorrectQuestion.questionAudio;

    }
  }
}
MazeCollisionsManager = function() {
    CollisionsWithAnswersManager.call(this);

    this.resetAnswers = function()
    {
        CollisionsWithAnswersManager.prototype.resetAnswers();
        gameClassManager.currentGame.reset();
    }
}
MazeCollisionsManager.prototype = new CollisionsWithAnswersManager();
MazeCollisionsManager.prototype.constructor = MazeCollisionsManager;function MazeGameClass(){
    GameClass.call(this);

    this.drawTransitionText = function()
    {
      customFontFillText(['Eat the answers', symbolExclamationPointImage], 60,30, 100,50);
      customFontFillText([upArrowImage, ' ', symbolEqualsImage, ' Move up'], 30,15, 210,200);
      customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' Move right'], 30,15, 350,350);
      customFontFillText([downArrowImage, ' ', symbolEqualsImage, ' Move down'], 30,15, 200,500);
      customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' Move left'], 30,15, 50,350);
    }

    this.name = "MazeGame";
    this.FRAME_RATE = 1000/30;

    this.maze = undefined;
    this.isGenerationAlgoRunning = true;
    this.isGamePlaying = false;

    this.deadEndCellForCorrectAnswer = undefined
    this.deadEndCellForIncorrectAnswer = undefined
    this.areAnswersPlacedInDeadEndCells = false;

    this.textAnswerFontSize = 20;
    this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';

    this.imageAnswerWidth = 55;
    this.imageAnswerHeight = 55;
    this.imageAnswerHolderWidth = 60;
    this.imageAnswerHolderHeight = 60;
    this.audioImageAnswerWidth = 75;
    this.audioImageAnswerHeight = 75;
    this.audioImageAnswerHolderWidth = 60;
    this.audioImageAnswerHolderHeight = 60;

    this.correctTextAnswerHolderWidth = undefined;
    this.incorrectTextAnswerHolderWidth = undefined;

    this.answerHolderImage = "images\\sprites\\Maze\\moleFood.png";

    this.assignAnswerHolder = function()
    {
      let moleFoodAnswerHolder = new MoleFoodAnswerHolder(this.answerHolderImage);
      return moleFoodAnswerHolder;
    }

    this.LETTER_COLOR = "black";

    this.playerCharacter = undefined;
    this.defineAndInitializePlayerCharacter = function()
    {
        this.playerCharacter = new MazePlayer();
        this.playerCharacter.isPlaced = false;
    }

    this.titleScreenData = [
        {
            name: "Maze",
            fontSize: 27,
            spacing: 15,
            x: 37,
            y: 385
        }
    ];

    this.backgroundMusic = new MusicTrack('audio/backgroundTracks/mazeRaceMusic.mp3', 11.2);

    this.collisionsWithAnswersManager = new MazeCollisionsManager();

    this.superInitialize = function () {
        this.maze = new MazeClass();
        this.maze.initializeArrayOfCells();
        this.isGenerationAlgoRunning = true;
        this.isGamePlaying = false;

        this.deadEndCellForCorrectAnswer = undefined
        this.deadEndCellForIncorrectAnswer = undefined
        this.areAnswersPlacedInDeadEndCells = false;

        gameAudio.moleNav = new sfxOverlap('audio/V/moleNav.mp3');
    }

    this.update = function (){

        if (this.maze.isGenerationRunning){
            this.maze.generate();
        }
        else if (!this.areAnswersPlacedInDeadEndCells){
            this.selectDeadEndCellsForAnswers();
            this.placeAnswerAtCenterOfCell(
                promptsAndAnswersManager.correctTargetPromptAndAnswerPairing, this.deadEndCellForCorrectAnswer
            )
            this.placeAnswerAtCenterOfCell(
                promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing, this.deadEndCellForIncorrectAnswer
            )

            this.areAnswersPlacedInDeadEndCells = true;
        }
        else if (!this.playerCharacter.isPlaced){
            this.playerCharacter.placeInMazeAndAvoidAnswersCells();
        }
        else{
            this.collisionsWithAnswersManager.handleCollisionsWithAnswers(this.playerCharacter);
        }
    }

    this.reset = function (){
        this.isGenerationAlgoRunning = true;
        this.isGamePlaying = false;

        this.areAnswersPlacedInDeadEndCells = false;
        this.deadEndCellForCorrectAnswer = undefined
        this.deadEndCellForIncorrectAnswer = undefined

        this.playerCharacter.resetPosition();
        this.maze.reset();
    }

    this.draw = function()
    {
        this.drawBackGround();
        this.maze.drawCells();

        if (this.areAnswersPlacedInDeadEndCells){
            drawAnswersManager.draw();
        }

        this.playerCharacter.draw();

        promptersManager.drawPromptsWhenAppropriate();

        // FOR DEBUG
        if (debugOn){
            this.drawMousePosition();
            gameCanvasContext.fillStyle="white";
            gameCanvasContext.fillRect(this.playerCharacter.x-5, this.playerCharacter.y-5, 10, 10);
        }
    }

    this.drawMousePosition = function(){
        gameCanvasContext.save();
        gameCanvasContext.font = "15px Arial"
        gameCanvasContext.fillStyle = "gold";
        gameCanvasContext.fillText(
            "( " + inputManager.mouseCoordinates.x +
            " , " + inputManager.mouseCoordinates.y +
            " )",
            inputManager.mouseCoordinates.x + 10,
            inputManager.mouseCoordinates.y
        );
        gameCanvasContext.fillStyle = "red";
        gameCanvasContext.fillText(
            (
                Math.floor(inputManager.mouseCoordinates.x / CELL_WIDTH) +
                Math.floor(inputManager.mouseCoordinates.y / CELL_HEIGHT)* NUMBER_OF_COLUMNS
            ) + " : " +
            "( "  + Math.floor(inputManager.mouseCoordinates.x / CELL_WIDTH) +
            " , " + Math.floor(inputManager.mouseCoordinates.y / CELL_HEIGHT)+
            " )",
            inputManager.mouseCoordinates.x + 10,
            inputManager.mouseCoordinates.y + 20
        );
        gameCanvasContext.restore();
    }

    this.drawBackGround = function ()
    {
      drawFromSheet("images\\Backgrounds\\mazefloor.png", 0, 0, gameCanvas.width, gameCanvas.height);
        //gameCanvasContext.drawImage(mazeFloor, 0, 0, gameCanvas.width, gameCanvas.height);
    }

    this.selectDeadEndCellsForAnswers = function () {

        this.deadEndCellForCorrectAnswer = getRandomElementFromArray(this.maze.arrayOfDeadEndCells);
        while (this.deadEndCellForCorrectAnswer.isOccupiedByPlayer){
            this.deadEndCellForCorrectAnswer = getRandomElementFromArray(this.maze.arrayOfDeadEndCells);
        }

        this.deadEndCellForIncorrectAnswer = getRandomElementFromArray(this.maze.arrayOfDeadEndCells);
        while (
            this.deadEndCellForCorrectAnswer.index == this.deadEndCellForIncorrectAnswer.index ||
            this.deadEndCellForCorrectAnswer.isOccupiedByPlayer
        ) {
            this.deadEndCellForIncorrectAnswer = getRandomElementFromArray(this.maze.arrayOfDeadEndCells);
        }
    }

    this.placeAnswerAtCenterOfCell = function(answer, cell){
        answer.xCoordinate = cell.columnIndex * CELL_WIDTH;
        answer.yCoordinate = cell.rowIndex * CELL_HEIGHT;
        this.centerAnswerPositionInCorrespondingCell(answer);
    }

    this.centerAnswerPositionInCorrespondingCell = function(answer) {
        var adjustShift = this.adjustAnswerCenteringDependingOnDataType(answer);

        answer.xCoordinate += CELL_WIDTH / 2  - adjustShift.x;
        answer.yCoordinate += CELL_HEIGHT / 2 - adjustShift.y;
    }

    this.adjustAnswerCenteringDependingOnDataType = function(answer){
        var adjustShifX = 0;
        var adjustShifY = 0;

        if (promptsAndAnswersManager.currentAnswerDataType === 'string') {
            var answerWidth = promptsAndAnswersManager.getTextWidthFromFontStyle(
                answer.textAssociation, drawAnswersManager.textAnswerFontStyle
            );

            adjustShifX = answerWidth / 2;
        }
        else {
            adjustShifX = drawAnswersManager.imageWidth / 2;
            adjustShifY = drawAnswersManager.imageHeight / 2;
        }

        return {
            x: adjustShifX,
            y: adjustShifY
        }
    }

    this.handleSpaceBarDown = function () {
        if (debugOn){
            var cellIdx = Math.floor(inputManager.mouseCoordinates.x / CELL_WIDTH) +
                Math.floor(inputManager.mouseCoordinates.y / CELL_HEIGHT) * NUMBER_OF_COLUMNS;

            this.playerCharacter.currentCell = this.maze.arrayOfCells[cellIdx];
            this.playerCharacter.placeAtCenteOfCurrentCell();
        }
    }

    this.handleUpArrowDown = function(){
        if (this.playerCharacter.isPlaced){
            this.playerCharacter.moveUp();
            gameAudio.moleNav.play();
        }
    }

    this.handleDownArrowDown = function(){
        if (this.playerCharacter.isPlaced){
            this.playerCharacter.moveDown();
            gameAudio.moleNav.play();
        }
    }

    this.handleLeftArrowDown = function(){
        if (this.playerCharacter.isPlaced){
            this.playerCharacter.moveLeft();
            gameAudio.moleNav.play();
        }
    }

    this.handleRightArrowDown = function(){
        if (this.playerCharacter.isPlaced){
            this.playerCharacter.moveRight();
            gameAudio.moleNav.play();
        }
    }
}
MazeGameClass.prototype = new GameClass();
MazeGameClass.prototype.constructor = MazeGameClass;

const mazeGame = new MazeGameClass();
const CELL_WIDTH  = 80;
const CELL_HEIGHT = 100;
const WALL_THICKNESS = 20;

function CellClass(
  rowIndex, columnIndex,
  numRows=NUMBER_OF_ROWS,
  numCols=NUMBER_OF_COLUMNS
  )
{
  this.rowIndex = rowIndex;
  this.columnIndex = columnIndex;

  this.index = (this.rowIndex * numCols) + this.columnIndex;

  this.worldCenterX = this.columnIndex * CELL_WIDTH + CELL_WIDTH / 2;
  this.worldCenterY = this.rowIndex * CELL_HEIGHT + CELL_HEIGHT / 2;

  this.hasBeenVisited = false;
  this.isVisitedByGenerationAlgorithm = false;

  this.topNeighboringCellIndex = undefined;
  this.bottomNeighboringCellIndex = undefined;
  this.leftNeighboringCellIndex = undefined;
  this.rightNeighboringCellIndex = undefined;

  this.neighborIdx = [];

  this.topWallExist    = true;
  this.bottomWallExist = true;
  this.leftWallExist   = true;
  this.rightWallExist  = true;

  this.isDeadEnd = false;

  this.isOccupiedByPlayer = false;

  this.checkForExistenceOfNeighboringCells = function(numRows, numCols)
  {
    if (rowIndex > 0)
    {
      this.topNeighboringCellIndex = ( (this.rowIndex - 1) * numCols ) + this.columnIndex;
      this.neighborIdx.push(this.topNeighboringCellIndex);
    }

    if (rowIndex < numRows - 1)
    {
      this.bottomNeighboringCellIndex = ( ( (this.rowIndex + 1 ) * numCols ) + this.columnIndex );
      this.neighborIdx.push(this.bottomNeighboringCellIndex);
    }

    if (columnIndex > 0)
    {
      this.leftNeighboringCellIndex = ( (this.rowIndex * numCols) + (this.columnIndex - 1) );
      this.neighborIdx.push(this.leftNeighboringCellIndex);
    }

    if (columnIndex < numCols - 1)
    {
      this.rightNeighboringCellIndex = (this.rowIndex * numCols ) + this.columnIndex + 1;
      this.neighborIdx.push(this.rightNeighboringCellIndex);
    }

  }

  this.checkIfIsDeadEnd = function(){
    var numWalls = 0;

    if (this.topWallExist){
      numWalls++;
    }

    if (this.bottomWallExist){
      numWalls++;
    }

    if (this.leftWallExist){
      numWalls++;
    }

    if (this.rightWallExist){
      numWalls++;
    }

    if (numWalls == 3){
      this.isDeadEnd = true;
    }
    else {
      this.isDeadEnd = false;
    }

  }

  this.reset = function() {
    this.topWallExist    = true;
    this.bottomWallExist = true;
    this.leftWallExist   = true;
    this.rightWallExist  = true;
    this.isDeadEnd = false;
    this.isOccupiedByPlayer = false;
    this.hasBeenVisited = false;
    this.isVisitedByGenerationAlgorithm = false;
  }

  this.draw = function()
  {
    var xCoordinate = this.columnIndex * CELL_WIDTH;
    var yCoordinate = this.rowIndex * CELL_HEIGHT;

    gameCanvasContext.save();
    gameCanvasContext.lineWidth = WALL_THICKNESS;
    gameCanvasContext.strokeStyle = 'blue';

    if (this.isVisitedByGenerationAlgorithm)
    {
      gameCanvasContext.fillStyle = 'orange';
      gameCanvasContext.fillRect(xCoordinate,yCoordinate, CELL_WIDTH, CELL_HEIGHT);
    }

    //top wall
    if (this.topWallExist)
    {
      drawFromSheet("images\\Backgrounds\\topWall.png",xCoordinate - WALL_THICKNESS/2,
      yCoordinate - WALL_THICKNESS/2,
      CELL_WIDTH + WALL_THICKNESS, WALL_THICKNESS);
      // gameCanvasContext.drawImage(
      //   mazeTopWall, xCoordinate - WALL_THICKNESS/2,
      //   yCoordinate - WALL_THICKNESS/2,
      //   CELL_WIDTH + WALL_THICKNESS, WALL_THICKNESS
      // );
    }

    // //bottom wall
    // if (this.bottomWallExist)
    // {
    //   gameCanvasContext.drawImage(
    //     mazeBottomWall, xCoordinate,
    //     yCoordinate + CELL_HEIGHT-WALL_THICKNESS/2, CELL_WIDTH, WALL_THICKNESS
    //   );
    // }

    //left wall
    if (this.leftWallExist)
    {
      drawFromSheet("images\\Backgrounds\\leftWall.png", xCoordinate-WALL_THICKNESS/2,
      yCoordinate - WALL_THICKNESS/2,
      WALL_THICKNESS, CELL_HEIGHT + WALL_THICKNESS);
      // gameCanvasContext.drawImage(
      //   mazeLeftWall, xCoordinate-WALL_THICKNESS/2,
      //   yCoordinate - WALL_THICKNESS/2,
      //   WALL_THICKNESS, CELL_HEIGHT + WALL_THICKNESS
      // );
    }

    // //right wall
    // if (this.rightWallExist)
    // {
    //   gameCanvasContext.drawImage(
    //     mazeRightWall, xCoordinate + CELL_WIDTH - WALL_THICKNESS/2,
    //     yCoordinate, WALL_THICKNESS, CELL_HEIGHT
    //   );
    // }


    gameCanvasContext.restore();

  }

  // call methods from constructor
  this.checkForExistenceOfNeighboringCells(numRows, numCols);

}

const NUMBER_OF_COLUMNS = 8;
const NUMBER_OF_ROWS    = 7;

function MazeClass(){

    this.arrayOfCells = [];
    this.currentCellVisitedByGenerationAlgo = undefined;
    this.previousCellsVisitedByGenerationAlgo = [];

    this.isGenerationInitialized = false;
    this.isGenerationRunning = true;

    this.numVisitedCellsByGenerationAlgo = 0;

    this.arrayOfDeadEndCells = [];

    this.initializeArrayOfCells = function ()
    {
        for (let rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
        {
            for (let columnIndex = 0; columnIndex < NUMBER_OF_COLUMNS; columnIndex++)
            {
                let cell = new CellClass(rowIndex, columnIndex);
                this.arrayOfCells.push(cell);
            }
        }
    }

    this.generate = function ()
    {
        if (!this.isGenerationInitialized){
            this.initializeGeneration();
        }
        else{
            this.generateOneStep();
        }

        this.checkIfAllCellsHaveBeenVisited()
    }

    this.checkIfAllCellsHaveBeenVisited = function() {
        if (this.numVisitedCellsByGenerationAlgo == this.arrayOfCells.length){
            this.detectDeadEndCells();
            this.currentCellVisitedByGenerationAlgo.isVisitedByGenerationAlgorithm = false;
            this.isGenerationRunning = false;
        }
    }

    this.detectDeadEndCells = function () {
        for (var i = 0 ; i < this.arrayOfCells.length ; i++){
            var cell = this.arrayOfCells[i];
            if (cell.isDeadEnd){
                this.arrayOfDeadEndCells.push(cell);
            }
        }
    }

    this.generateOneStep = function() {
        // Get next cell to visit
        var nextCellToVisit = this.getNextCellToVisit();
        if (!nextCellToVisit.hasBeenVisited){
            this.tearDownTheWallBetweenCells(
                this.currentCellVisitedByGenerationAlgo, nextCellToVisit
            );
        }
        this.currentCellVisitedByGenerationAlgo.checkIfIsDeadEnd();
        this.markCurrentCellAsVisited();
        this.moveFromCurrentCellTo(nextCellToVisit);
    }

    this.moveFromCurrentCellTo = function(nextCellToVisit){
        this.currentCellVisitedByGenerationAlgo.isVisitedByGenerationAlgorithm = false;
        this.currentCellVisitedByGenerationAlgo = nextCellToVisit;
        this.currentCellVisitedByGenerationAlgo.isVisitedByGenerationAlgorithm = true;
    }

    this.markCurrentCellAsVisited = function() {
        if (!this.currentCellVisitedByGenerationAlgo.hasBeenVisited) {
            this.currentCellVisitedByGenerationAlgo.hasBeenVisited = true;
            this.numVisitedCellsByGenerationAlgo++;
            this.previousCellsVisitedByGenerationAlgo.push(this.currentCellVisitedByGenerationAlgo);
        }
    }

    this.tearDownTheWallBetweenCells = function(cell1, cell2){
        var cell1ToCell2Distance = cell1.index - cell2.index;

        switch(cell1ToCell2Distance)
        {
            case NUMBER_OF_COLUMNS:
                cell1.topWallExist    = false;
                cell2.bottomWallExist = false;
                break;

            case -NUMBER_OF_COLUMNS:
                cell1.bottomWallExist = false;
                cell2.topWallExist    = false;
                break;

            case 1:
                cell1.leftWallExist  = false;
                cell2.rightWallExist = false;
                break;

            case -1:
                cell1.rightWallExist = false;
                cell2.leftWallExist  = false;
                break;
        }
    }

    this.getNextCellToVisit = function() {
        var arrayOfNextCandidates = this.getArrayOfNextPossibleCandidates();

        if (!arrayOfNextCandidates.length){
            return this.previousCellsVisitedByGenerationAlgo.pop();
        }

        return getRandomElementFromArray(arrayOfNextCandidates);
    }

    this.getArrayOfNextPossibleCandidates = function () {
        var arrayOfNextCandidates = [];

        var arrayOfCurrentCellNeighborsIdx = this.currentCellVisitedByGenerationAlgo.neighborIdx;
        for (var idx = 0 ; idx < arrayOfCurrentCellNeighborsIdx.length ; idx++){
            var neighborIdx = arrayOfCurrentCellNeighborsIdx[idx];
            var neighbor = this.arrayOfCells[neighborIdx];
            if (!neighbor.hasBeenVisited){
                arrayOfNextCandidates.push(neighbor);
            }
        }

        return arrayOfNextCandidates;
    }


    this.initializeGeneration = function ()
    {
        this.currentCellVisitedByGenerationAlgo = getRandomElementFromArray(this.arrayOfCells);
        this.currentCellVisitedByGenerationAlgo.isVisitedByGenerationAlgorithm = true;
        this.isGenerationInitialized = true;
    }


    this.reset = function()
    {
        this.arrayOfCells.forEach(function(cell){cell.reset();});

        this.currentCellVisitedByGenerationAlgo = undefined;
        this.previousCellsVisitedByGenerationAlgo = [];

        this.isGenerationInitialized = false;
        this.isGenerationRunning = true;

        this.numVisitedCellsByGenerationAlgo = 0;

        this.arrayOfDeadEndCells = [];
    }


    this.drawCells = function ()
    {
        for (let currentCellIndex = 0; currentCellIndex < this.arrayOfCells.length; currentCellIndex++)
        {
            this.arrayOfCells[currentCellIndex].draw();
        }

        drawFromSheet("images\\Backgrounds\\topWall.png", 0, -WALL_THICKNESS/2,
        gameCanvas.width, WALL_THICKNESS);

        // gameCanvasContext.drawImage(
        //     mazeTopWall, 0, -WALL_THICKNESS/2,
        //     gameCanvas.width, WALL_THICKNESS
        // );

        drawFromSheet("images\\Backgrounds\\bottomWall.png", 0, gameCanvas.height - WALL_THICKNESS/2,
        gameCanvas.width, WALL_THICKNESS);
        // gameCanvasContext.drawImage(
        //     mazeBottomWall, 0, gameCanvas.height - WALL_THICKNESS/2,
        //     gameCanvas.width, WALL_THICKNESS
        // );

        drawFromSheet("images\\Backgrounds\\leftWall.png", -WALL_THICKNESS/2, 0,
        WALL_THICKNESS, gameCanvas.height);
        // gameCanvasContext.drawImage(
        //     mazeLeftWall, -WALL_THICKNESS/2, 0,
        //     WALL_THICKNESS, gameCanvas.height
        // );

        drawFromSheet("images\\Backgrounds\\rightWall.png", gameCanvas.width - WALL_THICKNESS/2, 0,
        WALL_THICKNESS, gameCanvas.height);
        // gameCanvasContext.drawImage(
        //     mazeRightWall, gameCanvas.width - WALL_THICKNESS/2, 0,
        //     WALL_THICKNESS, gameCanvas.height
        // );
    }

    this.getCellAtIndex = function(index){
        return this.arrayOfCells[index]
    }

    this.getRandomCell = function() {
        return getRandomElementFromArray(this.arrayOfCells);
    }
}

var maze = new MazeClass();
const MIN_DISTANCE_PLAYER_TO_WALL = 10;

function MazePlayer()
{
    this.width  = 0; //Math.min(CELL_WIDTH, CELL_HEIGHT) - 2*WALL_THICKNESS - 5;
    this.height = 0; //Math.min(CELL_WIDTH, CELL_HEIGHT) - 2*WALL_THICKNESS - 5;

    this.drawWidth = 80;
    this.drawHeight = 80;

    this.x = undefined;
    this.y = undefined;
    this.currentCell = undefined;

    this.speedX = 10;
    this.speedY = 10;
    this.isPlaced = false;

    this.orientation = 0;

    this.resetPosition = function (){
        this.x = undefined;
        this.y = undefined;
        this.currentCell = undefined;

        this.isPlaced = false;
    }


    this.placeInMazeAndAvoidAnswersCells = function() {
        this.currentCell = mazeGame.maze.getRandomCell();

        while (
            this.currentCell == mazeGame.deadEndCellForCorrectAnswer ||
            this.currentCell == mazeGame.deadEndCellForIncorrectAnswer )
        {
            this.currentCell = getRandomElementFromArray(mazeGame.maze);
        }
        this.currentCell.isOccupiedByPlayer = true;
        this.placeAtCenteOfCurrentCell();
        this.isPlaced = true;
    }

    this.placeAtCenteOfCurrentCell = function(){
        this.x = this.currentCell.worldCenterX;
        this.y = this.currentCell.worldCenterY;
    }

    this.draw = function() {
        if (this.isPlaced){
            gameCanvasContext.save();
            gameCanvasContext.translate(
                this.x, this.y
            )
            switch(this.orientation){
                case 0:
                    break;
                case 1:
                    gameCanvasContext.rotate(-Math.PI / 2);
                    break;
                case 2:
                    gameCanvasContext.rotate(Math.PI);
                    break;
                case 3:
                    gameCanvasContext.rotate(Math.PI / 2);
                    break;
            }

            gameCanvasContext.drawImage(
                mazeCharacter,
                - this.drawWidth / 2,
                - this.drawHeight / 2,
                this.drawWidth, this.drawHeight
            )
            gameCanvasContext.restore();
        }
    }

    this.moveUp = function(){
        if (this.orientation != 0){
            this.orientation = 0;
        }
        if (!this.currentCell.topWallExist)
        {
            this.movePlayerToCellAtIndex(
                this.currentCell.topNeighboringCellIndex
            );
            this.placeAtCenteOfCurrentCell();
        }
    }

    this.moveLeft = function(){
        if (this.orientation != 1){
            this.orientation = 1;
        }
        if (!this.currentCell.leftWallExist)
        {
            this.movePlayerToCellAtIndex(
                this.currentCell.leftNeighboringCellIndex
            );
            this.placeAtCenteOfCurrentCell();
        }
    }

    this.moveDown = function(){
        if (this.orientation != 2){
            this.orientation = 2;
        }
        if (!this.currentCell.bottomWallExist)
        {
            this.movePlayerToCellAtIndex(
                this.currentCell.bottomNeighboringCellIndex
            );
            this.placeAtCenteOfCurrentCell();
        }
    }

    this.moveRight = function(){
        if (this.orientation != 3){
            this.orientation = 3;
        }
        if (!this.currentCell.rightWallExist)
        {
            this.movePlayerToCellAtIndex(
                this.currentCell.rightNeighboringCellIndex
            );
            this.placeAtCenteOfCurrentCell();
        }
    }

    this.movePlayerToCellAtIndex = function(index){
        this.currentCell.isOccupiedByPlayer = false;
        this.currentCell = mazeGame.maze.getCellAtIndex(index);
        this.currentCell.isOccupiedByPlayer = true;
    }

}

function MoleFoodAnswerHolder(image)
{
  this.image = image;
}
memoryGameClass.prototype = new GameClass();
function memoryGameClass()
{
  this.name = 'memory game';

  this.backgroundMusic = undefined;

  this.titleScreenData =
  [
    {name: "Memory", fontSize: 27, spacing: 15, x: 122, y: 385}
  ];

  this.drawTransitionText = function()
  {
    customFontFillText(['Tap the Phonics '], 35,30, 100,50);
    customFontFillText(['in order!', symbolExclamationPointImage], 35,30, gameCanvas.width/2 - 150,100);
    customFontFillText(['Mouse Click ', symbolEqualsImage, ' Choose Phonic'], 30,15, 110,gameCanvas.height/2);
  }

  this.LETTER_COLOR = 'lightCoral';
  this.textAnswerFontSize = '30';
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';

  this.simon = undefined;
  this.phonicClassManager = undefined;

  this.initialize = function()
  {
    this.simon = new Simon();
    this.simon.currentPhonicToPlayIndex = 0;
    this.phonicClassManager = new PhonicClassManager();
    this.phonicClassManager.initializeArraysOfPhonics();
    this.phonicClassManager.setCurrentLanguageArray(languageSelectionScreen.languageNum);
    this.phonicClassManager.populateTemporaryArrayOfPhonics();
    gameAudio.buttonPress = new sfxOneShot('audio/V/button_press.mp3');
  }

  this.startGameSpecialCode = function()
  {
    this.simon.grabLeftAndRightPhonics();
    this.simon.chooseCorrectPhonicAndAddToArray();
    this.simon.playPatternOfPhonics();
  }

  this.draw = function()
  {
    this.drawBackground();
    this.simon.draw();
  }

  this.drawBackground = function()
  {
    gameCanvasContext.fillStyle = 'black';
    gameCanvasContext.fillRect(0,0, gameCanvas.width,gameCanvas.height);
  }

  this.handleClick = function()
  {
    this.simon.handleClick();
  }
}

const memoryGame = new memoryGameClass();
function Simon()
{
  this.image = "images\\sprites\\Memory\\Simon.png";
  this.leftHighlightImage = "images\\sprites\\Memory\\simonLeftHighlight.png";
  this.rightHighlightImage = "images\\sprites\\Memory\\simonRightHighlight.png";

  this.width = gameCanvas.width*0.75;
  this.height = gameCanvas.height*0.75;

  this.x = gameCanvas.width/2 - this.width/2;
  this.y = gameCanvas.height/2 - this.height/2;

  this.leftPhonic = undefined;
  this.rightPhonic = undefined;
  this.currentCorrectPhonic = undefined;

  this.leftPhonicX = this.x + this.width*0.15;
  this.leftPhonicY = this.y + this.height/2 + 10;
  this.rightPhonicX = this.x + this.width - this.width*0.3;
  this.rightPhonicY = this.y + this.height/2 + 10;

  this.leftPhonicIsBeingHeard = false;
  this.rightPhonicIsBeingHeard = false;

  this.timeToWaitBeforePlayingPattern = 1000;

  this.computerTurnText = "Listen carefully";
  this.computerTurnTextXPosition = gameCanvas.width/2 - 100;
  this.playerTurnText = "Repeat the pattern";
  this.playerTurnTextXPosition = gameCanvas.width/2 - 120;

  this.grabLeftAndRightPhonics = function()
  {
    let randomPhonicIndex1 = getRandomIntInclusive(0,gameClassManager.currentGame.phonicClassManager.temporaryArrayOfPhonics.length - 1);
    let randomPhonicIndex2 = getRandomIntInclusive(0,gameClassManager.currentGame.phonicClassManager.temporaryArrayOfPhonics.length - 1);
    while (randomPhonicIndex1 === randomPhonicIndex2)
    {
      randomPhonicIndex2 = getRandomIntInclusive(0,gameClassManager.currentGame.phonicClassManager.temporaryArrayOfPhonics.length - 1);
    }

    this.leftPhonic = gameClassManager.currentGame.phonicClassManager.temporaryArrayOfPhonics[randomPhonicIndex1];
    this.rightPhonic = gameClassManager.currentGame.phonicClassManager.temporaryArrayOfPhonics[randomPhonicIndex2];
  }

  this.chooseCorrectPhonicAndAddToArray = function()
  {
    let fiftyFiftyResult = Math.random();
    if (fiftyFiftyResult < 0.5)
    {
      this.currentCorrectPhonic = this.leftPhonic;
    }
    else if (fiftyFiftyResult >= 0.5)
    {
      this.currentCorrectPhonic = this.rightPhonic;
    }
    let phonicToPush = this.currentCorrectPhonic;
    this.currentPatternOfCorrectPhonics.push(phonicToPush);
  }

  this.currentPatternOfCorrectPhonics = [];
  this.currentPhonicToPlayIndex = 0;
  this.isPlayingPatternOfPhonics = true;

  this.playPatternOfPhonics = function()
  {
    if (!this.isPlayingPatternOfPhonics)
    {
      this.isPlayingPatternOfPhonics = true;
    }

    let currentPhonic = this.currentPatternOfCorrectPhonics[this.currentPhonicToPlayIndex];
    if (this.currentPhonicToPlayIndex < this.currentPatternOfCorrectPhonics.length)
    {
      this.currentPhonicToPlayIndex++;
      currentPhonic.promptAudio.sfx.play();
      if (currentPhonic === this.leftPhonic)
      {
        this.leftPhonicIsBeingHeard = true;
        currentPhonic.promptAudio.sfx.onended = function()
        {
          memoryGame.simon.leftPhonicIsBeingHeard = false;
          memoryGame.simon.playPatternOfPhonics();
        }
      }
      else if (currentPhonic === this.rightPhonic)
      {
        this.rightPhonicIsBeingHeard = true;
        currentPhonic.promptAudio.sfx.onended = function()
        {
          memoryGame.simon.rightPhonicIsBeingHeard = false;
          memoryGame.simon.playPatternOfPhonics();
        }
      }
    }
    else if (this.currentPhonicToPlayIndex >= this.currentPatternOfCorrectPhonics.length)
    {
      this.currentPhonicToPlayIndex = 0;
      this.isPlayingPatternOfPhonics = false;
    }
  }


  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
    if (this.leftPhonicIsBeingHeard === true)
    {
      drawFromSheet(this.leftHighlightImage, this.x,this.y, this.width,this.height);
      //gameCanvasContext.drawImage(this.leftHighlightImage, this.x,this.y, this.width,this.height);
    }
    if (this.rightPhonicIsBeingHeard === true)
    {
      drawFromSheet(this.rightHighlightImage, this.x,this.y, this.width,this.height);
      //gameCanvasContext.drawImage(this.rightHighlightImage, this.x,this.y, this.width,this.height);
    }
    gameCanvasContext.fillStyle = 'white';
    gameCanvasContext.font = '100px Helvetica';
    gameCanvasContext.fillText(this.leftPhonic.textAssociation, this.leftPhonicX,this.leftPhonicY);
    gameCanvasContext.fillText(this.rightPhonic.textAssociation, this.rightPhonicX,this.rightPhonicY);

    if (this.isPlayingPatternOfPhonics){
      gameCanvasContext.fillStyle = "gold";
      gameCanvasContext.fillRect(0, 0, gameCanvas.width, 50);
      customFontFillText(
        [this.computerTurnText], 30, 12,
        this.computerTurnTextXPosition, 10
      );
    }
    else{
      gameCanvasContext.fillStyle = "gold";
      gameCanvasContext.fillRect(0, 0, gameCanvas.width, 50);
      customFontFillText(
        [this.playerTurnText], 30, 12,
        this.playerTurnTextXPosition, 10
      );
    }

  }

  this.phonicToCheckIndex = 0;
  this.handleClick = function()
  {
    if(!this.isPlayingPatternOfPhonics)
    {
      if (inputManager.mouseCoordinates.x > this.x && inputManager.mouseCoordinates.x < this.x + this.width/2 &&
          inputManager.mouseCoordinates.y > this.y && inputManager.mouseCoordinates.y < this.y + this.height)
          {//left button clicked
            gameAudio.buttonPress.play();
            if (this.leftPhonic === this.currentPatternOfCorrectPhonics[this.phonicToCheckIndex])
            {
              this.processCorrectAnswer();
            }
            else if (this.leftPhonic !== this.currentPatternOfCorrectPhonics[this.phonicToCheckIndex])
            {
              this.processIncorrectAnswer();
            }
          }
      else if (inputManager.mouseCoordinates.x > this.x + this.width/2 && inputManager.mouseCoordinates.x < this.x + this.width &&
              inputManager.mouseCoordinates.y > this.y && inputManager.mouseCoordinates.y < this.y + this.height)
          {//right button clicked
            gameAudio.buttonPress.play();
            if (this.rightPhonic === this.currentPatternOfCorrectPhonics[this.phonicToCheckIndex])
            {
              this.processCorrectAnswer();
            }
            else if (this.rightPhonic !== this.currentPatternOfCorrectPhonics[this.phonicToCheckIndex])
            {
              this.processIncorrectAnswer();
            }
          }
    }
  }

  this.updatePatternOfPhonics = function() {
    this.phonicToCheckIndex = 0;
    this.chooseCorrectPhonicAndAddToArray();

    this.isPlayingPatternOfPhonics = true;
    setTimeout(
      this.playPatternOfPhonics.bind(this),
      this.timeToWaitBeforePlayingPattern
    );
  }

  this.processCorrectFullAnswer = function() {
    amountCorrect++;
    calculateAccuracy();
    this.updatePatternOfPhonics();
  }

  this.processIncorrectAnswer = function() {
    genAudio.negative.play();
    amountIncorrect++;
    calculateAccuracy();

    this.currentPatternOfCorrectPhonics = [];
    this.updatePatternOfPhonics();
  }

  this.processCorrectAnswer = function() {
    genAudio.positive.play();
    this.phonicToCheckIndex++;
    if (this.phonicToCheckIndex >= this.currentPatternOfCorrectPhonics.length) {
      this.processCorrectFullAnswer();
    }
  }
}
FishingCollisionManager = function() {
    CollisionsWithAnswersManager.call(this);

    this.resetAnswers = function()
    {
        CollisionsWithAnswersManager.prototype.resetAnswers();
        gameClassManager.currentGame.reset();
    }
}
FishingCollisionManager.prototype = new CollisionsWithAnswersManager();
FishingCollisionManager.prototype.constructor = FishingCollisionManager;

var fishSprites = [
  "images\\sprites\\Fishing\\fish.png",
  "images\\sprites\\Fishing\\fish2.png",
  "images\\sprites\\Fishing\\fish3.png"
]

const NUM_FISHES = 4;

fishingGameClass.prototype = new GameClass();
function fishingGameClass()
{
  this.name = 'fishingGame';
  this.playerCharacter = undefined;
  this.textAnswerFontSize = '15';
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';
  this.LETTER_COLOR = "black";

  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/fishingVillageMusic(3).mp3', 24);
  this.titleScreenData = [{
    name: "Fishing",
    fontSize: 27,
    spacing: 15,
    x: 520, y: 480
  }];

  this.background = undefined;
  this.playerCharacter = undefined;

  this.fishes = [];

  this.collisionsWithAnswersManager = new FishingCollisionManager();

  this.superInitialize = function()
  {
    this.background = new FishingBackground();
    this.initializeFishes();
    gameAudio.rodCasting = new sfxOneShot('audio/V/rodCasting.mp3');
  }

  this.initializeFishes = function() {
    this.fishes = [];
    for (var i = 0 ; i < NUM_FISHES ; ++i)
    {
      var oneFish = new Fish();
      oneFish.initialize();
      oneFish.fishingHook = this.playerCharacter.fishingHook;
      this.fishes.push(oneFish);
    }
    this.selectFishesForAnswers();
  }

  this.selectFishesForAnswers = function() {
    var correctFishIdx = getRandomIntInclusive(0, this.fishes.length-1);
    var incorrectFishIdx = getRandomIntInclusive(0, this.fishes.length-1);
    while (incorrectFishIdx == correctFishIdx){
      incorrectFishIdx = getRandomIntInclusive(0, this.fishes.length-1);
    }

    this.fishes[correctFishIdx].hasCorrectAnswer = true;
    this.fishes[incorrectFishIdx].hasIncorrectAnswer = true;
  }

  this.defineAndInitializePlayerCharacter = function()
  {
    this.playerCharacter = new FishingCharacter();
    this.playerCharacter.initialize();
  }

  this.draw = function()
  {
    this.background.draw();
    this.playerCharacter.draw();

    for(var i = 0 ; i < this.fishes.length ; i++){
      this.fishes[i].draw();
    }

    drawAnswersManager.draw();
    promptersManager.drawPromptsWhenAppropriate();
  }

  this.update = function()
  {
    this.updateAllFishes();
    this.playerCharacter.update();
    this.collisionsWithAnswersManager.handleCollisionsWithAnswers(
      this.playerCharacter.fishingBucket
    );
  }

  this.reset = function() {
    this.playerCharacter.resetHook();
    this.playerCharacter.speedX = 5;
    this.resetFishes();
  }

  this.updateAllFishes = function(){
    for(var i = 0 ; i < this.fishes.length ; i++){
      this.fishes[i].update();
    }
  }

  this.resetFishes = function() {
    for (var i = 0 ; i < NUM_FISHES ; ++i)
    {
      this.fishes.pop();
    }
    this.initializeFishes();
  }

  this.handleLeftArrowDown = function(){
    if (this.playerCharacter.isInitialized){
        this.playerCharacter.moveLeft();
    }
  }

  this.handleRightArrowDown = function(){
    if (this.playerCharacter.isInitialized){
        this.playerCharacter.moveRight();
    }
  }

  this.handleSpaceBarDown = function () {
    if (this.playerCharacter.isInitialized){
      this.playerCharacter.throwHook();
    }
  }

  this.drawTransitionText = function()
  {
    customFontFillText(['Catch The Fishes', symbolExclamationPointImage], 60,30, 100,50);
    customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' move right'], 30,15, 350,350);
    customFontFillText(['Space bar', ' ', symbolEqualsImage, ' throw ', symbolCommaImage, ' lift line'], 30,15,80,500);
    customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' move left'], 30,15, 50,350);
  }

}

const fishingGame = new fishingGameClass();

function FishingHook() {
    this.x = undefined;
    this.y = undefined;

    this.width = 10;
    this.height = 10;

    this.isThrown = false;
    this.isFalling = false;
    this.isEatenByFish = false;
    this.isPulledBack = false;

    this.speedX = 5;
    this.speedY = 2;

    this.fishCaught = undefined;

    this.outLocationX = undefined;
    this.outLocationY = undefined;

    this.fishingRodLocationX = undefined;
    this.fishingRodLocationY = undefined;

    this.bezierParameter = 0;
    this.bezierSpeed = 0.05;

    this.draw = function () {
        gameCanvasContext.save();
        gameCanvasContext.fillStyle = "red";
        gameCanvasContext.beginPath();
        gameCanvasContext.arc(
            this.x, this.y, 10, 0, 2*Math.PI, true
        );
        gameCanvasContext.fill();
        gameCanvasContext.restore();
    }

    this.reset = function () {
        this.isThrown = false;
        this.isFalling = false;
        this.isEatenByFish = false;
        this.isPulledBack = false;
        this.fishCaught = undefined;
        this.bezierParameter = 0;
        this.outLocationX = undefined;
        this.outLocationY = undefined;
        this.fishingRodLocationX = undefined;
        this.fishingRodLocationY = undefined;
    }

    this.update = function () {
        if (this.isFalling){
            if (
                this.fishingRodLocationX == undefined &&
                this.fishingRodLocationY == undefined
            ){
                this.fishingRodLocationX = this.x;
                this.fishingRodLocationY = this.y;
            }

            this.y += this.speedY;

            if(this.y > gameCanvas.height){
                this.isFalling = false;
            }
        }
        else if (this.isEatenByFish && this.y > WATER_HEIGHT){
            this.x = this.fishCaught.headX;
            this.y = this.fishCaught.y;
        }
        else if (this.isEatenByFish && this.bezierParameter < 1){
            if (
                this.outLocationX == undefined &&
                this.outLocationY == undefined
            ){
                this.outLocationX = this.x;
                this.outLocationY = this.y;
            }

            this.x = this.getCoordinateOnBezierCurve(
                this.outLocationX, this.outLocationX, this.fishingRodLocationX, this.fishingRodLocationX
            );
            this.y = this.getCoordinateOnBezierCurve(
                this.outLocationY, this.fishingRodLocationY, WATER_HEIGHT/2, this.fishingRodLocationY
            );
            this.bezierParameter += this.bezierSpeed;
        }
    }

    this.getCoordinateOnBezierCurve = function(
        originCoordinate,   // P0
        control1Coordinate, // P1
        control2Coordinate, // P2
        targetCoordinate    // P3
    ){
        //  (1-t)^3*P0 + 3(1-t)^2*t*P1 + 3(1-t)*t^2*P2 + t^3*P3
        var bezierCoordinate  =     (1 - this.bezierParameter)**3 * originCoordinate;
        bezierCoordinate     += 3 * (1 - this.bezierParameter)**2 * this.bezierParameter * control1Coordinate;
        bezierCoordinate     += 3 * (1 - this.bezierParameter)    * this.bezierParameter**2 * control2Coordinate;
        bezierCoordinate     += this.bezierParameter**3 * targetCoordinate;

        return bezierCoordinate;
    }

    this.moveLeft = function () {
        if (this.isFalling && !this.isEatenByFish){
            this.x -= this.speedX;
        }
    }

    this.moveRight = function () {
        if (this.isFalling && !this.isEatenByFish){
            this.x += this.speedX;
        }
    }
}



const FISHING_ROD_LENGTH = 70;

function FishingCharacter () {
    this.isInitialized = false;

    this.x = undefined;
    this.y = undefined;

    this.width = 70;
    this.height = 70;

    this.speedX = 5;

    this.fishingHook = undefined;

    this.fishingBucket = undefined;

    this.caughtFish = false;

    this.initialize = function() {
        this.x = gameCanvas.width / 2;
        this.y = WATER_HEIGHT - 30;
        this.isInitialized = true;

        this.fishingHook = new FishingHook();
        this.fishingHook.x = this.x + this.width/2;
        this.fishingHook.y = this.y + 5;

        this.fishingBucket = new FishingBucket();
        this.fishingBucket.initialize(this.x - this.width/2);

        this.caughtFish = false
    }

    this.resetHook = function() {
        this.fishingHook.x = this.x + this.width/2;;
        this.fishingHook.y = this.y + 5;
        this.fishingHook.reset();
    }

    this.update = function () {
        if (this.isInitialized){
            if (!this.fishingHook.isThrown){
                this.fishingHook.x = this.x + this.width/2;
                this.fishingBucket.updateXPosition(this.x - this.width/2);
            }
            this.fishingHook.update();
        }
    }

    this.draw = function () {

        this.drawCharacter();
        this.fishingBucket.draw();
        this.drawBoat();
        this.drawFishingLine();
        this.fishingHook.draw();
    }

    this.drawCharacter = function(){
        drawFromSheet('images\\sprites\\Fishing\\person.png',
        this.x - this.width/2,
        this.y - this.height/2,
        this.width, this.height)
        // gameCanvasContext.drawImage(
        //     fishingGameCharacter,
        //     this.x - this.width/2,
        //     this.y - this.height/2,
        //     this.width, this.height
        //)
    }

    this.drawBoat = function() {
      drawFromSheet('images\\sprites\\Fishing\\boat.png',
      this.x - 100,
      WATER_HEIGHT - 15,
      150, 30)
        // gameCanvasContext.drawImage(
        //     fishingGameBoat,
        //     this.x - 100,
        //     WATER_HEIGHT - 15,
        //     150, 30
        // )
    }

    this.drawFishingLine = function() {
        if (this.fishingHook.isThrown){
            gameCanvasContext.save();
            gameCanvasContext.strokeStyle = "black";
            gameCanvasContext.lineWidth = 2;
            gameCanvasContext.beginPath();
            gameCanvasContext.moveTo(this.x + this.width/2, this.y + 5)
            gameCanvasContext.bezierCurveTo(
                this.x + this.width/2, WATER_HEIGHT,
                this.fishingHook.x, WATER_HEIGHT,
                this.fishingHook.x, this.fishingHook.y
            );
            gameCanvasContext.stroke();
            gameCanvasContext.restore();
        }
    }

    this.throwHook = function () {
        if (!this.fishingHook.isThrown){
            this.fishingHook.isThrown = true;
            this.fishingHook.isFalling = true;
            gameAudio.rodCasting.play();
        }
        else if (this.fishingHook.isEatenByFish){
            this.fishingHook.isPulledBack = true;
            gameAudio.rodCasting.play();
        }
    }

    this.moveLeft = function(){
        if (!this.fishingHook.isThrown){
            this.x -= this.speedX;

            if (this.x  < this.width/2){
                this.x += this.speedX;
            }
        }
        else {
            this.fishingHook.moveLeft()
        }
    }

    this.moveRight = function(){
        if (!this.fishingHook.isThrown){
            this.x += this.speedX;

            if (this.x  > gameCanvas.width - this.width/2){
                this.x -= this.speedX;
            }
        }
        else {
            this.fishingHook.moveRight()
        }
    }
}

const BUCKET_SPACE_TO_CHAR = 10;

function FishingBucket() {

    this.x = undefined;
    this.y = undefined;

    this.width  = 40;
    this.height = 15;

    this.initialize = function(x){
        this.updateXPosition(x);
        this.y = WATER_HEIGHT - 20;
    }

    this.updateXPosition = function(x){
        this.x = x - this.width/2 - BUCKET_SPACE_TO_CHAR;
    }

    this.draw = function(){
        gameCanvasContext.save();
        gameCanvasContext.fillStyle = "green";
        gameCanvasContext.fillRect(
            this.x - this.width/2, this.y - this.height/2,
            this.width, this.height
        );
        gameCanvasContext.restore();
    }
}

const WATER_HEIGHT = 210;

function FishingBackground()
{
  this.waterImage = 'images\\Backgrounds\\underwater2.png';
  this.skyImage = "images\\Backgrounds\\Sky.png";
  this.draw = function()
  {
    drawFromSheet(this.skyImage, 0,0, gameCanvas.width,gameCanvas.height*0.3);
    drawFromSheet(this.waterImage, 0,gameCanvas.height*0.3, gameCanvas.width,gameCanvas.height*0.7);
    //gameCanvasContext.drawImage(this.skyImage, 0,0, gameCanvas.width,gameCanvas.height*0.3);
    //gameCanvasContext.drawImage(this.waterImage, 0,gameCanvas.height*0.3, gameCanvas.width,gameCanvas.height*0.7);
  }
}

const FISH_SIZE_FACTOR = 0.5;
const FISH_MIN_SPEED = 0.5;
const FISH_MAX_SPEED = 2.0;

const MIN_DISTANCE_BETWEEN_FISHES = 50;

const PROJECTION_TO_BUCKET_SPEED = 0.03;

const FISH_HEAD_X = 40;

function Fish() {
    this.x = undefined;
    this.y = undefined;

    this.headX = undefined;

    this.headWidth = undefined;

    this.speedX = undefined;
    this.speedY = 0.5;

    this.width = undefined;
    this.height = undefined;

    this.sprite = undefined;
    this.orientation = undefined;

    this.hasCorrectAnswer = false;
    this.hasIncorrectAnswer = false;

    this.fishingHook = undefined;

    this.hasEatenHook = false;

    this.oscillation = 0.0;
    this.oscillationSpeed = undefined;

    this.drawTrajectoryToBucket = false;

    this.bucketX = undefined;
    this.bucketY = undefined;
    this.caughtLocationX = undefined;
    this.caughtLocationY = undefined;

    this.bezierParameter = 0.0;
    this.isInBucket = false;

    this.initialize = function () {
        this.orientation = getRandomElementFromArray([-1, 1]);

        this.sprite = getRandomElementFromArray(fishSprites);
        this.width  = FISH_SIZE_FACTOR * 190; // pre-string this.sprite.width
        this.height = FISH_SIZE_FACTOR * 67; // pre-string this.sprite.height

        this.headWidth = this.width * 0.3;
        this.headXOffset = (this.width - this.headWidth) / 2;

        this.x = getRandomArbitrary(
            this.width/2, gameCanvas.width - this.width/2
        );

        while (this.scanForOtherFishesTooClose()){
            this.y = getRandomArbitrary(
                300 + this.height/2, gameCanvas.height - this.height/2
            );
        }

        this.speedX = getRandomArbitrary(FISH_MIN_SPEED, FISH_MAX_SPEED);

        this.hasCorrectAnswer = false;
        this.hasIncorrectAnswer = false;

        this.oscillation = 0.0;
        this.oscillationSpeed = 5 * Math.PI / gameClassManager.currentGame.FRAME_RATE;

        this.bezierParameter = 0.0;
    }

    this.update = function () {
        if (!this.isInBucket)
        {
            this.updatePosition();
            this.handleCollisionWithCanvasBorder();
            this.setAnswerPositionIfHasAnswer();
            this.handleCollisionWithFishingHook();
        }
    }

    this.updatePosition = function() {
        if (!this.hasEatenHook){
            this.x += this.orientation * this.speedX;
        }
        else{
            this.updatePositionWhenHasEatenHook();
        }

        this.headX = this.x + this.orientation * this.headXOffset;
    }

    this.updatePositionWhenHasEatenHook = function() {

        if (this.fishingHook.isPulledBack){
            this.setCaughtAndBucketLocationsIfUndefined();
            this.projectToBucket();
        }
        else {
            this.oscillateTryingToEscape();
        }
    }

    this.oscillateTryingToEscape = function() {
        this.x -= this.orientation * 1.0;
        this.y += 0.5 + 2*Math.sin(this.oscillation);
        this.oscillation += this.oscillationSpeed;
        if (this.oscillation >= Math.PI * 2){
            this.oscillation = 0.0;
        }
    }

    this.projectToBucket = function () {
        if (this.bezierParameter < 1 + PROJECTION_TO_BUCKET_SPEED){
            this.updatePositionOnProjectionTrajectory();
        }
        else{
            this.isInBucket = true;
            gameClassManager.currentGame.playerCharacter.resetHook();
        }
    }

    this.updatePositionOnProjectionTrajectory = function(){
        this.x = this.getCoordinateOnBezierCurve(
            this.caughtLocationX, this.caughtLocationX, this.bucketX, this.bucketX
        )

        this.y = this.getCoordinateOnBezierCurve(
            this.caughtLocationY, -WATER_HEIGHT, 0, this.bucketY
        )

        this.bezierParameter += PROJECTION_TO_BUCKET_SPEED;
    }

    this.getCoordinateOnBezierCurve = function(
        originCoordinate,   // P0
        control1Coordinate, // P1
        control2Coordinate, // P2
        targetCoordinate    // P3
    ){
        //  (1-t)^3*P0 + 3(1-t)^2*t*P1 + 3(1-t)*t^2*P2 + t^3*P3
        var bezierCoordinate  =     (1 - this.bezierParameter)**3 * originCoordinate;
        bezierCoordinate     += 3 * (1 - this.bezierParameter)**2 * this.bezierParameter * control1Coordinate;
        bezierCoordinate     += 3 * (1 - this.bezierParameter)    * this.bezierParameter**2 * control2Coordinate;
        bezierCoordinate     += this.bezierParameter**3 * targetCoordinate;

        return bezierCoordinate;
    }

    this.setCaughtAndBucketLocationsIfUndefined = function() {
        if (this.bucketX == undefined &&
            this.bucketY == undefined &&
            this.caughtLocationY == undefined &&
            this.caughtLocationY == undefined
        )
        {
            this.bucketX = gameClassManager.currentGame.playerCharacter.fishingBucket.x;
            this.bucketY = gameClassManager.currentGame.playerCharacter.fishingBucket.y;
            this.caughtLocationX = this.x;
            this.caughtLocationY = this.y
        }

        if (debugOn && !this.drawTrajectoryToBucket){
            this.drawTrajectoryToBucket = true;
        }
    }

    this.handleCollisionWithFishingHook = function() {
        if(
            this.x + this.width/2 > this.fishingHook.x - this.fishingHook.width &&
            this.x - this.width/2 < this.fishingHook.x + this.fishingHook.width &&
            this.y + this.height/2 > this.fishingHook.y - this.fishingHook.height &&
            this.y - this.height/2 < this.fishingHook.y + this.fishingHook.height &&
            !this.fishingHook.isEatenByFish
        )
        {
            this.fishingHook.isEatenByFish = true;
            this.fishingHook.isFalling = false;
            this.fishingHook.fishCaught = this;
            this.hasEatenHook = true;
        }
    }

    this.handleCollisionWithCanvasBorder = function() {
        if (this.x > gameCanvas.width - this.width / 2){
            this.orientation = -1;
        }
        else if (this.x < this.width / 2){
            this.orientation = 1;
        }
    }

    this.setAnswerPositionIfHasAnswer = function (){
        if (this.hasCorrectAnswer || this.hasIncorrectAnswer){
            var centeredPosition = this.centerAnswersCoordinate();

            if (this.hasCorrectAnswer){
                promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xCoordinate = centeredPosition.x;
                promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate = centeredPosition.y;
            }
            else if (this.hasIncorrectAnswer){
                promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xCoordinate = centeredPosition.x;
                promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate = centeredPosition.y;
            }
        }
    }

    this.centerAnswersCoordinate = function() {
        var centeredX = this.x;
        var centeredY = this.y;

        if (promptsAndAnswersManager.currentAnswerDataType === 'string'){
            var answerWidth;
            if (this.hasCorrectAnswer){
                answerWidth = promptsAndAnswersManager.getCorrectAnswerWidthFromFontStyle(
                    gameClassManager.currentGame.textAnswerFontStyle
                )
            }
            else if (this.hasIncorrectAnswer){
                answerWidth = promptsAndAnswersManager.getIncorrectAnswerWidthFromFontStyle(
                    gameClassManager.currentGame.textAnswerFontStyle
                )
            }

            centeredX -= answerWidth / 2;
            centeredY += gameClassManager.currentGame.textAnswerFontSize / 4;
        }
        else if (promptsAndAnswersManager.currentAnswerDataType === 'IMG'){
            centeredX -= gameClassManager.currentGame.imageAnswerWidth / 2;
            centeredY -= gameClassManager.currentGame.imageAnswerHeight / 2;
        }
        else if (promptsAndAnswersManager.currentAnswerDataType === 'AUDIO'){
            centeredX -= gameClassManager.currentGame.audioImageAnswerWidth / 2;
            centeredY -= gameClassManager.currentGame.audioImageAnswerHeight / 2;
        }

        return {
            x: centeredX,
            y: centeredY
        }
    }

    this.draw = function () {
        if (!this.isInBucket)
        {
            gameCanvasContext.save();
            gameCanvasContext.translate(this.x, this.y);
            gameCanvasContext.scale(this.orientation, 1);
            drawFromSheet(
              this.sprite,
            -this.width/2,
            -this.height/2,
            this.width,
            this.height);
            // gameCanvasContext.drawImage(
            //     this.sprite,
            //     -this.width/2,
            //     -this.height/2,
            //     this.width,
            //     this.height
            // );
            gameCanvasContext.restore();

            this.drawBoundingBoxesIfDebugMode();
            this.drawProjectionTrajectoryIfDebugMode();
        }
    }

    this.drawBoundingBoxesIfDebugMode = function() {
        if (debugOn){

            gameCanvasContext.save();
            gameCanvasContext.translate(this.x, this.y);
            gameCanvasContext.scale(this.orientation, 1);
            gameCanvasContext.strokeStyle = "purple";
            gameCanvasContext.lineWidth = 3;
            gameCanvasContext.strokeRect(
                -this.width/2,
                -this.height/2,
                this.width,
                this.height
            );
            gameCanvasContext.restore();

            gameCanvasContext.save();
            gameCanvasContext.translate(this.headX, this.y);
            gameCanvasContext.lineWidth = 2;
            gameCanvasContext.strokeStyle = "red";
            gameCanvasContext.strokeRect(
                -this.headWidth/2,
                -this.height/2,
                this.headWidth,
                this.height
            );
            gameCanvasContext.restore();
        }
    }

    this.drawProjectionTrajectoryIfDebugMode = function()
    {
        if (debugOn && this.drawTrajectoryToBucket)
        {
            gameCanvasContext.save();
            gameCanvasContext.strokeStyle = "red";
            gameCanvasContext.lineWidth = 2;
            gameCanvasContext.beginPath();
            gameCanvasContext.moveTo(this.caughtLocationX, this.caughtLocationY);
            gameCanvasContext.bezierCurveTo(
                this.caughtLocationX, -WATER_HEIGHT,
                this.bucketX, 0,
                this.bucketX, this.bucketY
            );
            gameCanvasContext.stroke();
            gameCanvasContext.restore();
        }
    }

    this.scanForOtherFishesTooClose = function() {

        if (this.y == undefined){
            return true;
        }

        var otherFishesInWater = gameClassManager.currentGame.fishes;

        for (var i=0 ; i < otherFishesInWater.length ; i++){
            if (Math.abs(this.y - otherFishesInWater[i].y) <
                MIN_DISTANCE_BETWEEN_FISHES
            ){
                return true;
            }
        }

        return false;
    }
}
flyingBeeGameClass.prototype = new GameClass();
function flyingBeeGameClass()
{
  this.name = 'flying bee game';
  this.playerCharacter = undefined;

  this.answersOnRightSide = true;
  this.answersOnLeftSide = false;
  this.toggleAnswerPlacements = function()
  {
    if (this.answersOnRightSide === true)
    {
      this.answersOnRightSide = false;
      this.answersOnLeftSide = true;
    }
    else if (this.answersOnLeftSide === true)
    {
      this.answersOnLeftSide = false;
      this.answersOnRightSide = true;
    }
  }

  this.drawTransitionText = function()
  {
    customFontFillText(['Fly to the answers', symbolExclamationPointImage], 60,30, 100,50);
    customFontFillText([upArrowImage, ' ', symbolEqualsImage, ' Fly up'], 30,15, 210,200);
    customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' Fly right'], 30,15, 350,350);
    customFontFillText([downArrowImage, ' ', symbolEqualsImage, ' Fly down'], 30,15, 200,500);
    customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' Fly left'], 30,15, 50,350);
  }

  this.background = new FlyingBeeBackground();
  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/flyingBeeSong.mp3', 14.1);

  this.defineAndInitializePlayerCharacter = function()
  {
    this.playerCharacter = new FlyingBeePlayerCharacter();
  }

  this.imageAnswerWidth = undefined;
  this.imageAnswerHeight = undefined;
  this.imageAnswerHolderWidth = undefined;
  this.imageAnswerHolderHeight = undefined;

  this.audioImageAnswerWidth = undefined;
  this.audioImageAnswerHeight = undefined;
  this.audioImageAnswerHolderWidth = undefined;
  this.audioImageAnswerHolderHeight = undefined;

  this.correctTextAnswerHolderWidth = undefined;
  this.incorrectTextAnswerHolderWidth = undefined;

  this.LETTER_COLOR = 'black';
  this.textAnswerFontSize = '30';
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';
	this.titleScreenData =
  [
	  {name: "Flying", fontSize: 25, spacing: 15, x: 420, y: 465},{name: "Bee", fontSize: 25, spacing: 10, x: 440, y: 505}
	];

  this.collidingObject = undefined;
  this.initialize = function()
  {
    this.defineAndInitializePlayerCharacter();
    this.imageAnswerWidth = gameCanvas.width*0.1;
		this.imageAnswerHeight = gameCanvas.height*0.1;
		this.audioImageAnswerWidth = gameCanvas.width*0.1;
    this.audioImageAnswerHeight = gameCanvas.height*0.1;

    this.imageAnswerHolderWidth = gameCanvas.width*0.15;
		this.imageAnswerHolderHeight = gameCanvas.height*0.15;
		this.audioImageAnswerHolderWidth = gameCanvas.width*0.15;
    this.audioImageAnswerHolderHeight = gameCanvas.height*0.15;
    drawAnswersManager.initialize();

    promptersManager.loadAppropriatePrompterBasedOnCurrentPromptsDataType();
    this.collidingObject = this.playerCharacter;

    gameAudio.beeBuzz = new sfxLooping('audio/V/beeBuzz.mp3');
    gameAudio.beeBuzz.play();
  }

  this.handleLeftArrowDown = function()
	{
		inputManager.leftArrowIsBeingHeld = true;
	}

	this.handleUpArrowDown = function()
	{
		inputManager.upArrowIsBeingHeld = true;
	}

	this.handleRightArrowDown = function()
	{
		inputManager.rightArrowIsBeingHeld = true;
	}

	this.handleDownArrowDown = function()
	{
		inputManager.downArrowIsBeingHeld = true;
	}

  this.handleLeftArrowUp = function()
	{
		inputManager.leftArrowIsBeingHeld = false;
	}

	this.handleUpArrowUp = function()
	{
		inputManager.upArrowIsBeingHeld = false;
	}

	this.handleRightArrowUp = function()
	{
		inputManager.rightArrowIsBeingHeld = false;
	}

	this.handleDownArrowUp = function()
	{
		inputManager.downArrowIsBeingHeld = false;
	}

  this.update = function()
  {
    if (!promptersManager.shouldBeDrawingAPrompt &&
        fullGameStateMachine.currentState !== fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.pausedMiniGame)
    {
      this.playerCharacter.move();
      // this.moveAnswers();
      // this.handleAnswersOffScreen();
      this.collisionsWithAnswersManager.handleCollisionsWithAnswers(this.collidingObject);
    }
  }

  this.draw = function()
  {
    this.background.draw();
    this.playerCharacter.draw();

    drawAnswersManager.draw();
    promptersManager.drawPromptsWhenAppropriate();
  }
}

const flyingBeeGame = new flyingBeeGameClass();

function FlyingBeeBackground()
{
  this.image = 'images\\Backgrounds\\flyingBee.png';
  this.draw = function()
  {
    drawFromSheet(this.image, 0,0, gameCanvas.width,gameCanvas.height);
    //gameCanvasContext.drawImage(this.image, 0,0, gameCanvas.width,gameCanvas.height);
  }
}

function FlyingBeePlayerCharacter()
{
  this.image = 'images/sprites/Flying Bee/Simple Bee Facing Right.png';

  this.width = gameCanvas.width*0.15;
  this.height = gameCanvas.height*0.1;

  this.x = gameCanvas.width/2 - this.width/2;
  this.y = gameCanvas.height/2 - this.height/2;

  this.draw = function()
  {
    if (inputManager.leftArrowIsBeingHeld && !inputManager.upArrowIsBeingHeld &&
        !inputManager.downArrowIsBeingHeld)//flying left
        {
          this.image = 'images\\sprites\\Flying Bee\\Simple Bee Facing Left.png';
        }
    else if (inputManager.leftArrowIsBeingHeld && inputManager.upArrowIsBeingHeld &&
        !inputManager.downArrowIsBeingHeld)//flying up left up
        {
          this.image = 'images\\sprites\\Flying Bee\\Simple Bee Facing UpLeft.png';
        }
    else if (inputManager.leftArrowIsBeingHeld && !inputManager.upArrowIsBeingHeld &&
             inputManager.downArrowIsBeingHeld)//flying right
             {
               this.image = 'images\\sprites\\Flying Bee\\Simple Bee Facing DownLeft.png';
             }
    else if (inputManager.rightArrowIsBeingHeld && inputManager.upArrowIsBeingHeld &&
             !inputManager.downArrowIsBeingHeld)//flying right up
             {
               this.image = 'images\\sprites\\Flying Bee\\Simple Bee Facing UpRight.png';
             }
    else if (inputManager.rightArrowIsBeingHeld && !inputManager.upArrowIsBeingHeld &&
             inputManager.downArrowIsBeingHeld)// flying right down
             {
               this.image = 'images\\sprites\\Flying Bee\\Simple Bee Facing DownRight.png';
             }
    else if (inputManager.upArrowIsBeingHeld && !inputManager.rightArrowIsBeingHeld &&
             !inputManager.leftArrowIsBeingHeld)// flying up
             {
               this.image = 'images\\sprites\\Flying Bee\\Simple Bee Facing Up.png';
             }
    else if (inputManager.downArrowIsBeingHeld && !inputManager.rightArrowIsBeingHeld &&
             !inputManager.leftArrowIsBeingHeld)// flying down
             {
               this.image = 'images\\sprites\\Flying Bee\\Simple Bee Facing Down.png';
             }
    else
    {
      this.image = 'images\\sprites\\Flying Bee\\Simple Bee Facing Right.png';
    }
      drawFromSheet(this.image, this.x,this.y, this.width,this.height);
      //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
  }

  this.velocity = 7;
  this.move = function()
	{
		//console.log('inside space shooter movePlayer');
		if (inputManager.upArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.y -= this.velocity;
		}
		if (inputManager.rightArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.x += this.velocity;
		}
		if (inputManager.downArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.y += this.velocity;
		}
		if (inputManager.leftArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.x -= this.velocity;
		}
		// this.handleShipAtCanvasBoundaries();
	};


}
eggCatchGameClass.prototype = new GameClass();
function eggCatchGameClass()
{
  this.name = 'egg catch game';

  this.playerCharacter = undefined;
  this.defineAndInitializePlayerCharacter = function()
  {

  }

  this.drawTransitionText = function()
  {
    customFontFillText(['Catch the answers!', symbolExclamationPointImage], 55,30, 35,50);
    customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' Move right'], 40,15, gameCanvas.width*0.25,250);
    customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' Move left'], 40,15, gameCanvas.width*0.25,450);
  }

  this.backgroundMusic = this.backgroundMusic = new MusicTrack('audio/backgroundTracks/eggCatchSong.mp3', 17.4);
  this.FRAME_RATE = 1000/30;
  this.background = new EggCatchBackground();

  this.titleScreenData =
  [
    {name: "Egg", fontSize: 25, spacing: 12, x: 45, y: 565},
    {name: "Catch", fontSize: 25, spacing: 10, x: 37, y: 605}
  ];

  this.imageAnswerWidth = undefined;
  this.imageAnswerHeight = undefined;
  this.imageAnswerHolderWidth = undefined;
  this.imageAnswerHolderHeight = undefined;

  this.audioImageAnswerWidth = undefined;
  this.audioImageAnswerHeight = undefined;
  this.audioImageAnswerHolderWidth = undefined;
  this.audioImageAnswerHolderHeight = undefined;

  this.correctTextAnswerHolderWidth = undefined;
  this.incorrectTextAnswerHolderWidth = undefined;

  this.LETTER_COLOR = 'black';
  this.textAnswerFontSize = '30';
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';

  this.arrayOfAnswerHolders = [];
  this.eggAnswerHolder1 = new EggAnswerHolder('images\\sprites\\eggCatch\\egg.png');
  this.eggAnswerHolder2 = new EggAnswerHolder('images\\sprites\\eggCatch\\egg2.png');
  this.arrayOfAnswerHolders.push(this.eggAnswerHolder1);
  this.arrayOfAnswerHolders.push(this.eggAnswerHolder2);
  this.assignAnswerHolder = function()
  {
    let randomNumber = getRandomIntInclusive(0, this.arrayOfAnswerHolders.length - 1);
    return this.arrayOfAnswerHolders[randomNumber];
  }

  this.chicken1 = undefined;
  this.chicken2 = undefined;

  this.answersXSpeed = 4;

  this.arrayOfCluckSounds = ['audio/V/chickenCluck1.mp3','audio/V/chickenCluck2.mp3','audio/V/chickenCluck3.mp3'];
  this.pregameSpecialCode = function()
  {
    gameAudio.chickenCluck1 = new sfxOneShot('audio/V/chickenCluck1.mp3');
    gameAudio.chickenCluck2 = new sfxOneShot('audio/V/chickenCluck2.mp3');
    gameAudio.chickenCluck3 = new sfxOneShot('audio/V/chickenCluck3.mp3');

    gameAudio.eggBreaking1 = new sfxOneShot('audio/V/eggBreaking.mp3');
    gameAudio.eggBreaking2 = new sfxOneShot('audio/V/eggBreaking2.mp3');
  }

  this.playChickenClucks = function()
  {
    let cluckInterval1 = getRandomArbitrary(2000,5000);
    let cluckInterval2 = getRandomArbitrary(2000,5000);
    let cluckInterval3 = getRandomArbitrary(2000,5000);

    this.intervalCluck1 = setInterval(function(){
      gameAudio.chickenCluck1.play();
    },cluckInterval1);
    this.intervalCluck2 = setInterval(function(){
      gameAudio.chickenCluck2.play();
    },cluckInterval2);
    this.intervalCluck3 = setInterval(function(){
      gameAudio.chickenCluck3.play();
    },cluckInterval3);
  }

  this.collidingObject = undefined;
  this.superInitialize = function()
  {
    this.imageAnswerWidth = gameCanvas.width*0.1;
		this.imageAnswerHeight = gameCanvas.height*0.1;
		this.audioImageAnswerWidth = gameCanvas.width*0.1;
    this.audioImageAnswerHeight = gameCanvas.height*0.1;

    this.imageAnswerHolderWidth = gameCanvas.width*0.15;
		this.imageAnswerHolderHeight = gameCanvas.height*0.15;
		this.audioImageAnswerHolderWidth = gameCanvas.width*0.15;
    this.audioImageAnswerHolderHeight = gameCanvas.height*0.15;
    drawAnswersManager.initialize();

    promptersManager.loadAppropriatePrompterBasedOnCurrentPromptsDataType();

    this.playerCharacter = new BasketPlayerCharacter();
    this.chicken1 = new Chicken(gameCanvas.width*0.25,gameCanvas.height*0.22);
    this.chicken2 = new Chicken(gameCanvas.width*0.6,gameCanvas.height*0.22);
    this.collidingObject = this.playerCharacter;
    this.playChickenClucks();
  }

  this.handleLeftArrowDown = function()
  {
    this.playerCharacter.x -= 5;
  }

  this.handleRightArrowDown = function()
  {
    this.playerCharacter.x  += 5;
  }


  this.update = function()
  {
    if (!promptersManager.shouldBeDrawingAPrompt &&
        fullGameStateMachine.currentState !== fullGameStateMachine.FULL_GAME_ENUMERABLE_STATES.pausedMiniGame)
    {

      this.moveAnswers();
      this.handleAnswersOffScreen();
      this.collisionsWithAnswersManager.handleCollisionsWithAnswers(this.collidingObject);
    }
   }

   this.collisionAudioEffect = function(collisionType)
   {
     if (collisionType === COLLISION_WITH_INCORRECT_ANSWER)
     {
       let fiftyFiftyResult = Math.random();
       if (fiftyFiftyResult < 0.5)
       {
         gameAudio.eggBreaking1.play();
       }
       else {
         gameAudio.eggBreaking2.play();
       }
     }
   }

   this.draw = function()
   {
     this.background.draw();
     this.playerCharacter.draw();
     this.chicken1.draw();
     this.chicken2.draw();
     drawAnswersManager.draw();
     promptersManager.drawPromptsWhenAppropriate();
   }

   this.moveAnswers = function()
   {
     promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate += 3;
     promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate += 3;
   }

   this.handleAnswersOffScreen = function()
   {
     if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate > gameCanvas.height - 50)
     {
       this.collisionsWithAnswersManager.processCollisionWithIncorrectAnswer();
       promptsAndAnswersManager.setOrResetPromptsAndAnswers();
       let fiftyFiftyResult = Math.random();
       if (fiftyFiftyResult < 0.5)
       {
         gameAudio.eggBreaking1.play();
       }
       else {
         gameAudio.eggBreaking2.play();
       }
     }
   }


}

const eggCatchGame = new eggCatchGameClass();

function EggCatchBackground()
{
  this.image = 'images\\Backgrounds\\Barn.png';
  this.draw = function()
  {
    drawFromSheet("images\\Backgrounds\\daytimeBackground.png", 0,0, gameCanvas.width,gameCanvas.height);
    drawFromSheet(this.image, 0,0, gameCanvas.width,gameCanvas.height);
    // gameCanvasContext.drawImage("images\\Backgrounds\\daytimeBackground.png", 0,0, gameCanvas.width,gameCanvas.height);
    // gameCanvasContext.drawImage(this.image, 0,0, gameCanvas.width,gameCanvas.height);
  }
}

function EggAnswerHolder(image)
{
  this.image = image;
}

function BasketPlayerCharacter()
{
  this.width = gameCanvas.width*0.2;
  this.height = gameCanvas.height*0.1;
  this.x = gameCanvas.width/2 - this.width/2;
  this.y = gameCanvas.height*0.8;
  this.image = 'images\\sprites\\eggCatch\\Basket.png';

  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
  }
}

function Chicken(x,y)
{
  this.x = x;
  this.y = y;

  this.width = gameCanvas.width*0.15;
  this.height = gameCanvas.height*0.15;

  this.eggStartingX = this.x;
  this.eggStartingY = this.y + this.height*0.6;

  this.image = 'images\\sprites\\eggCatch\\chicken.png';

  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
  }
}
whackAnAnswerGameClass.prototype = new GameClass();
function whackAnAnswerGameClass()
  {

    this.name = 'whack an answer game';

    this.imageAnswerWidth = 75;
    this.imageAnswerHeight = 75;

    this.audioImageAnswerWidth = 75;
    this.audioImageAnswerHeight = 75;

    this.textAnswerFontSize = 30;
    this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';

    this.FRAME_RATE = 1000/30;

    this.backButtonColor = 'rgb(0,127,127)';
    this.backButtonTextColor = 'rgb(224,224,224)';

    this.titleScreenData =
     [
      {name: "Whack",fontSize: 25, spacing: 12, x: 235, y: 550},
      {name: "An",fontSize: 25, spacing: 10, x: 260, y: 580},
      {name: "Answer",fontSize: 25, spacing: 10, x: 235, y: 615}
     ];

     this.drawTransitionText = function()
     {
       customFontFillText(['Whack the Answer!', symbolExclamationPointImage], 55,30, 75,50);
       customFontFillText(['Move the Mouse', ' ', symbolEqualsImage, ' Move the hammer'], 40,15, gameCanvas.width*0.125,250);
       customFontFillText(['Mouse Click', ' ', symbolEqualsImage, ' Whack!'], 40,15, gameCanvas.width*0.125,450);
     }

     this.initialize = function()
     {
       //document.body.style.cursor = 'none';
   	   this.playerCharacter = new Hammer();
       this.background = new WhackBackground();
       this.background.createTiles();
       this.playerCharacter.initialize();
       this.collidingObject = this.playerCharacter;
       initializePromptAndAnswerObjects();
       promptsAndAnswersManager.setOrResetPromptsAndAnswers();
       promptersManager.loadAppropriatePrompterBasedOnCurrentPromptsDataType();
       drawAnswersManager.initialize();
   	   //this.superInitialize();
     };

     this.superInitialize = this.initialize;

     this.draw = function()
     {
       this.background.draw();
       this.playerCharacter.draw();

       promptersManager.drawPromptsWhenAppropriate();
     }

     this.update = function()
     {
       this.playerCharacter.update();
       this.moveAnswers();
     }

     this.handleClick = function()
     {
       this.playerCharacter.handleMouseClick();
     }

     this.moveAnswers = function()
     {
       let correctAnswer = promptsAndAnswersManager.correctTargetPromptAndAnswerPairing;
       let incorrectAnswer = promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing;

       correctAnswer.radians += correctAnswer.oscillationVelocity;
       incorrectAnswer.radians += incorrectAnswer.oscillationVelocity;

       correctAnswer.xSpeed = 2;
       correctAnswer.ySpeed = 2;
       incorrectAnswer.xSpeed = 2;
       incorrectAnswer.ySpeed = 2;

       // console.log('correctAnswer.whackAnAnswerPositionName: ' + correctAnswer.whackAnAnswerPositionName);
       if (correctAnswer.whackAnAnswerPositionName === 'left')
       {
         //left and right
         // console.log('inside left position move function');
         correctAnswer.xCoordinate =
         correctAnswer.whackAnAnswerXStartingPosition + 50 + (Math.cos(correctAnswer.radians) * 25) + correctAnswer.xSpeed;
       }
       else if (correctAnswer.whackAnAnswerPositionName === 'right')
       {
         // console.log('inside right position move function');
         correctAnswer.xCoordinate =
         correctAnswer.whackAnAnswerXStartingPosition - 75 + (Math.cos(correctAnswer.radians) * 25) + correctAnswer.xSpeed;
       }
       else if (correctAnswer.whackAnAnswerPositionName === 'above')
       {
         // console.log('inside above position move function');
         //up and down
         correctAnswer.yCoordinate =
         correctAnswer.whackAnAnswerYStartingPosition + 75 + (Math.sin(correctAnswer.radians) * 25) + correctAnswer.ySpeed;
       }
       else if (correctAnswer.whackAnAnswerPositionName === 'below')
       {
         // console.log('inside below position move function');
         correctAnswer.yCoordinate =
         correctAnswer.whackAnAnswerYStartingPosition - 60 + (Math.sin(correctAnswer.radians) * 25) + correctAnswer.ySpeed;
       }

       if (incorrectAnswer.whackAnAnswerPositionName === 'left')
       {
         //left and right
         incorrectAnswer.xCoordinate =
         incorrectAnswer.whackAnAnswerXStartingPosition + 50 + (Math.cos(incorrectAnswer.radians) * 25) + incorrectAnswer.xSpeed;
       }
       else if (incorrectAnswer.whackAnAnswerPositionName === 'right')
       {
         incorrectAnswer.xCoordinate =
         incorrectAnswer.whackAnAnswerXStartingPosition - 75 + (Math.cos(incorrectAnswer.radians) * 25) + incorrectAnswer.xSpeed;
       }
       else if (incorrectAnswer.whackAnAnswerPositionName === 'above')
       {
         //up and down
         incorrectAnswer.yCoordinate =
         incorrectAnswer.whackAnAnswerYStartingPosition + 75 + (Math.sin(incorrectAnswer.radians) * 25) + incorrectAnswer.ySpeed;
       }
       else if (incorrectAnswer.whackAnAnswerPositionName === 'below')
       {
         incorrectAnswer.yCoordinate =
         incorrectAnswer.whackAnAnswerYStartingPosition - 60 + (Math.sin(incorrectAnswer.radians) * 25) + incorrectAnswer.ySpeed;
       }
     }
  }

let whackAnAnswerGame = new whackAnAnswerGameClass();
function WhackBackground()
{
  this.draw = function()
  {
    gameCanvasContext.fillStyle = 'orange';
    gameCanvasContext.fillRect(0,0, gameCanvas.width,gameCanvas.height);
    drawFromSheet('images\\Backgrounds\\WackTableBeneathSurface.png');
    //gameCanvasContext.drawImage('images\\Backgrounds\\WackTableBeneathSurface.png', 0,0, gameCanvas.width,gameCanvas.height);
    drawAnswersManager.draw();
    drawFromSheet('images\\Backgrounds\\WackTableSurface.png', 0,0, gameCanvas.width,gameCanvas.height);
    //gameCanvasContext.drawImage('images\\Backgrounds\\WackTableSurface.png', 0,0, gameCanvas.width,gameCanvas.height);
    //this.drawGrid();
  }

  this.grid = [];

  this.createTiles = function()
  {
    for (let rowIndex = 0; rowIndex < 3; rowIndex++)
    {
      for (let columnIndex = 0; columnIndex < 3; columnIndex++)
      {
        let tile = new WhackTile(rowIndex,columnIndex);
        this.grid.push(tile);
      }
    }
  }

  this.drawGrid = function()
  {
    for (let gridIndex = 0; gridIndex < this.grid.length; gridIndex++)
    {
      this.grid[gridIndex].draw();
    }
  }
}

function WhackTile(rowIndex,columnIndex)
{
  this.rowIndex = rowIndex;
  this.columnIndex = columnIndex;

  this.answer = undefined;

  this.gridIndex = this.rowIndex*3 + this.columnIndex;

  this.width = 150;
  this.height = 150;

  this.x = this.columnIndex*this.height + 95;
  this.y = this.rowIndex*this.height + 120;

  this.draw = function()
  {
    gameCanvasContext.strokeStyle = 'white';
    gameCanvasContext.strokeRect(this.x,this.y, this.width,this.height);
    gameCanvasContext.fillStyle = 'white';
    gameCanvasContext.fillText(this.gridIndex.toString(), this.x + 30,this.y + 30);
  }

  this.drawAnswer = function()
  {
    if (this.answer !== undefined)
    {

    }
  }
}
function Hammer()
{
  this.image = 'images\\sprites\\whackAnAnswer\\whackHammer.png';

  this.x = undefined;
  this.y = undefined;

  this.width = undefined;
  this.height = undefined;

  this.mouseClicked = false;

  this.initialize = function()
  {
    this.width = gameCanvas.width*0.4;
    this.height = gameCanvas.height*0.4;
  }

  this.draw = function()
  {
    //document.body.style.cursor = 'none';
    if (this.mouseClicked === true)
    {
      drawFromSheet(this.image, this.x - 20,this.y - 215, this.width,this.height, undefined, -120*Math.PI/180,this.x + this.width,this.y);
      // gameCanvasContext.save();
      // gameCanvasContext.translate(this.x + this.width,this.y);
      // gameCanvasContext.rotate(-25*Math.PI/180);
      // gameCanvasContext.translate(-(this.x + this.width),-(this.y));
      //
      // gameCanvasContext.drawImage(this.image, this.x - 20,this.y - 215, this.width,this.height);
      // gameCanvasContext.restore();
    }
    else if (this.mouseClicked === false)
    {
      drawFromSheet(this.image, this.x - 20,this.y - 215,
                                              this.width,this.height);
      // gameCanvasContext.drawImage(this.image, this.x - 20,this.y - 215,
      //                                         this.width,this.height);
    }
  }

  this.update = function()
  {
    this.x = inputManager.mouseCoordinates.x;
    this.y = inputManager.mouseCoordinates.y;
  }

  this.handleMouseClick = function()
  {
    this.mouseClicked = true;
    setTimeout(this.unClickMouse, 200);

    var mouseCol = Math.floor((inputManager.mouseCoordinates.x - 95)/150);
    var mouseRow = Math.floor((inputManager.mouseCoordinates.y - 120)/150);
    let mouseGridIndex = undefined;
    if (mouseCol >= 0 && mouseCol < 3 && mouseRow >= 0 && mouseRow < 3)
    {
      mouseGridIndex = mouseCol + mouseRow * 3;
    }



    if (mouseGridIndex === promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.whackAnAnswerGridIndex)
    {
      genAudio.playPositive();
      promptersManager.currentPrompter.currentWidth = 150;
      promptersManager.currentPrompter.currentHeight = 150;
      promptsAndAnswersManager.setOrResetPromptsAndAnswers();
      promptersManager.loadAppropriatePrompterBasedOnCurrentPromptsDataType();
      promptersManager.promptThePlayer();
      amountCorrect++;
      calculateAccuracy();
    }
    else if (mouseGridIndex === promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.whackAnAnswerGridIndex)
    {
      genAudio.playNegative();
      promptersManager.currentPrompter.currentWidth = 150;
      promptersManager.currentPrompter.currentHeight = 150;
      promptsAndAnswersManager.setOrResetPromptsAndAnswers();
      promptersManager.loadAppropriatePrompterBasedOnCurrentPromptsDataType();
      promptersManager.promptThePlayer();
      amountIncorrect++;
      calculateAccuracy();
    }
  }

  this.unClickMouse = function()
  {
    gameClassManager.currentGame.playerCharacter.mouseClicked = false;
  }
}
spellingBeesGameClass.prototype = new GameClass();
function spellingBeesGameClass()
{
  this.name = 'spelling bees game';
  this.playerCharacter = undefined;

  this.background = undefined;
  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/flyingBeeSong.mp3', 14.1);

  this.drawTransitionText = function()
  {
    customFontFillText(['Spell the Words!', symbolExclamationPointImage], 60,30, 75,50);
    customFontFillText([upArrowImage, ' ', symbolEqualsImage, ' Move up'], 30,15, 210,200);
    customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' Move right'], 30,15, 350,350);
    customFontFillText([downArrowImage, ' ', symbolEqualsImage, ' Move down'], 30,15, 200,500);
    customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' Move left'], 30,15, 50,350);
  }

  this.beesManager = undefined;

  this.wordsManager = undefined;

  this.initialize = function()
  {
    this.playerCharacter = new BeeCatcher();
    this.background = new SpellingBeesBackground();
    this.background.initializeBoxes();

    this.wordsManager = new WordsManager();
    this.wordsManager.initialize();
    this.wordsManager.defineCurrentAnswer();

    this.beesManager = new BeesManager();
    this.beesManager.initialize();
  }

  this.LETTER_COLOR = 'black';
  this.textAnswerFontSize = '30';
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';

  this.titleScreenData =
  [
	  {name: 'Spelling', fontSize: 25, spacing: 12, x:418, y: 560},{name: 'Bees', fontSize: 25, spacing: 12, x:436, y: 598}
	];

  this.update = function()
  {
    this.playerCharacter.move();
    this.beesManager.updateBees();
    this.playerCharacter.checkForBeeCollisions();
  }

  this.draw = function()
  {
    this.background.draw();
    this.background.drawBoxes();
    this.playerCharacter.draw();
    this.beesManager.drawBees();
  }

  this.handleLeftArrowDown = function()
	{
		inputManager.leftArrowIsBeingHeld = true;
	}

	this.handleUpArrowDown = function()
	{
		inputManager.upArrowIsBeingHeld = true;
	}

	this.handleRightArrowDown = function()
	{
		inputManager.rightArrowIsBeingHeld = true;
	}

	this.handleDownArrowDown = function()
	{
		inputManager.downArrowIsBeingHeld = true;
	}

  this.handleLeftArrowUp = function()
	{
		inputManager.leftArrowIsBeingHeld = false;
	}

	this.handleUpArrowUp = function()
	{
		inputManager.upArrowIsBeingHeld = false;
	}

	this.handleRightArrowUp = function()
	{
		inputManager.rightArrowIsBeingHeld = false;
	}

	this.handleDownArrowUp = function()
	{
		inputManager.downArrowIsBeingHeld = false;
	}

}

function SpellingBeesBackground()
{
  this.image = 'images\\Backgrounds\\spellingBee.png';
  this.draw = function()
  {
    drawFromSheet(this.image, 0,0, gameCanvas.width,gameCanvas.height);
    //gameCanvasContext.drawImage(this.image, 0,0, gameCanvas.width,gameCanvas.height);
  }

  this.playingFieldLeftXBoundary = 75;
  this.playingFieldRightXBoundary = 570;
  this.playingFieldTopYBoundary = 75;
  this.playingFieldBottomYBoundary = 625;

  this.arrayOfBoxes = [];

  this.initializeBoxes = function()
  {
    this.box1 = new Box(100);
    this.box2 = new Box(250);
    this.box3 = new Box(400);

    this.arrayOfBoxes.push(this.box1);
    this.arrayOfBoxes.push(this.box2);
    this.arrayOfBoxes.push(this.box3);
  }

  this.currentBoxToBeFilledIndex = 0;
  this.drawBoxes = function()
  {
    for (let i = 0; i < this.arrayOfBoxes.length; i++)
    {
      this.arrayOfBoxes[i].draw();
    }
  }
}

function Box(x)
{
  this.x = x;
  this.y = 5;

  this.width = 150;
  this.height = 65;

  this.letter = undefined;

  this.draw = function()
  {
    gameCanvasContext.save();
    gameCanvasContext.strokeStyle = 'brown';
    gameCanvasContext.lineWidth = 7;
    gameCanvasContext.strokeRect(this.x,this.y, this.width,this.height);
    gameCanvasContext.stroke();
    gameCanvasContext.restore();
  }
}

const spellingBeesGame = new spellingBeesGameClass();
function BeeCatcher()
{
  this.width = gameCanvas.width*0.1;
  this.height = gameCanvas.height*0.1;

  this.x = gameCanvas.width/2 - this.width/2;
  this.y = gameCanvas.height/2 - this.height/2;

  this.image = "images\\sprites\\dodgeBall\\Player2.png";

  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
  }

  this.velocity = 7;
  this.move = function()
  {
    if (inputManager.upArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.y -= this.velocity;
		}
		if (inputManager.rightArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.x += this.velocity;
		}
		if (inputManager.downArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.y += this.velocity;
		}
		if (inputManager.leftArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.x -= this.velocity;
		}
  }

  this.checkForBeeCollisions = function()
  {
    let arrayOfBees = gameClassManager.currentGame.beesManager.arrayOfBees;
    for (let beeIndex = 0; beeIndex < arrayOfBees.length; beeIndex++)
    {
      let currentBee = arrayOfBees[beeIndex];
      if (currentBee.x + currentBee.width > this.x &&
          currentBee.x < this.x + this.width &&
          currentBee.y + currentBee.height > this.y &&
          currentBee.y < this.y + this.height)
          {
            currentBee.shouldBeMoving = false;
            let boxToBeFilled = gameClassManager.currentGame.background.arrayOfBoxes[gameClassManager.currentGame.background.currentBoxToBeFilledIndex];
            currentBee.x = boxToBeFilled.x + 10;
            currentBee.y = boxToBeFilled.y - 10;
            boxToBeFilled.letter = currentBee.letter;

            if (gameClassManager.currentGame.background.currentBoxToBeFilledIndex === 2)
            {
              let wordStringToCheck = '';
              let arrayOfBoxes = gameClassManager.currentGame.background.arrayOfBoxes;
              wordStringToCheck = arrayOfBoxes[0].letter + arrayOfBoxes[1].letter + arrayOfBoxes[2].letter;
              gameClassManager.currentGame.background.currentBoxToBeFilledIndex = 0;
              if (wordStringToCheck === gameClassManager.currentGame.wordsManager.currentAnswer.word)
              {
                amountCorrect++;
                genAudio.positive.play();
              }
              else {
                amountIncorrect++;
                genAudio.negative.play();
              }
              gameClassManager.currentGame.wordsManager.defineCurrentAnswer();
              gameClassManager.currentGame.beesManager.arrayOfBees = [];
              gameClassManager.currentGame.beesManager.initialize();
            }
            else
            {
              gameClassManager.currentGame.background.currentBoxToBeFilledIndex++;
            }


            // spellingBeesGame.caughtBeesManager.submitLetterToSubmissionsManager(caughtBee);
            // spellingBeesGame.letterSubmissionManager.checkSubmittedLettersForCorrectSpelling();
          }
    }
  }
}
function Bee(letter)
{
  this.x = undefined;
  this.y = undefined;

  this.width = 100;
  this.height = 100;

  this.image = 'images\\sprites\\SpellingBees\\Simple Bee Without Stripes.png';

  this.letter = letter;
  this.letterColor = 'black';

  this.xDirection = undefined;
  this.yDirection = undefined;

  this.velocity = 5;

  this.shouldBeMoving = true;
  this.initialize = function()
  {
    let leftBoxX = gameClassManager.currentGame.background.playingFieldLeftXBoundary;
    let rightBoxX = gameClassManager.currentGame.background.playingFieldRightXBoundary
    let topBoxY = gameClassManager.currentGame.background.playingFieldTopYBoundary;
    let bottomBoxY = gameClassManager.currentGame.background.playingFieldBottomYBoundary;

    this.x = getRandomIntInclusive(leftBoxX,rightBoxX - this.width);
    this.y = getRandomIntInclusive(topBoxY,bottomBoxY - this.height);

    //move away from player at the start of prompt
    let player = gameClassManager.currentGame.playerCharacter;
    if (player.x > this.x)
    {
      this.xDirection = -1;
    }
    else
    {
      this.xDirection = 1;
    }

    if (player.y > this.y)
    {
      this.yDirection = -1;
    }
    else
    {
      this.yDirection = 1;
    }
  }

  this.update = function()
  {
    this.move();
    this.checkForBoxCollisions();
  }

  this.checkForBoxCollisions = function()
  {
    let leftBoxX = gameClassManager.currentGame.background.playingFieldLeftXBoundary;
    let rightBoxX = gameClassManager.currentGame.background.playingFieldRightXBoundary
    let topBoxY = gameClassManager.currentGame.background.playingFieldTopYBoundary;
    let bottomBoxY = gameClassManager.currentGame.background.playingFieldBottomYBoundary;

    if (this.x + this.width > rightBoxX || this.x < leftBoxX)
    {
      this.xDirection *= -1;
    }

    if (this.y + this.height > bottomBoxY || this.y < topBoxY)
    {
      this.yDirection *= - 1;
    }
  }

  this.move = function()
  {
    if (this.shouldBeMoving === true)
    {
      this.x += this.velocity*this.xDirection;
      this.y += this.velocity*this.yDirection;
    }
  }

  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
    gameCanvasContext.fillStyle = this.letterColor;
    gameCanvasContext.font = '30px Helvetica';
    gameCanvasContext.fillText(this.letter, this.x + this.width/2 -10, this.y + this.height/2 + 10);
  }
}
function BeesManager()
{
  this.arrayOfBees = [];

  this.initialize = function()
  {
    let wordsManager = gameClassManager.currentGame.wordsManager;
    for (let arrayOfWordsIndex = 0; arrayOfWordsIndex < wordsManager.arrayOfWords.length; arrayOfWordsIndex++)
    {
      for (let letterIndex = 0; letterIndex < wordsManager.arrayOfWords[arrayOfWordsIndex].arrayOfLetters.length; letterIndex++)
      {
        let letter = wordsManager.arrayOfWords[arrayOfWordsIndex].arrayOfLetters[letterIndex];
        let bee = new Bee(letter);
        bee.initialize();
        this.arrayOfBees.push(bee);
      }
    }
  }

  this.drawBees = function()
  {
    for (let i = 0; i < this.arrayOfBees.length; i++)
    {
      this.arrayOfBees[i].draw();
    }
  }

  this.updateBees = function()
  {
    for (let i = 0; i < this.arrayOfBees.length; i++)
    {
      this.arrayOfBees[i].update();
    }
  }
}
function Word(word, audioPrompt)
{
  this.word = word;
  this.arrayOfLetters = this.word.split("");

  this.audioPrompt = audioPrompt;
}

function WordsManager()
{
  this.arrayOfWords = [];

  this.manWord = undefined;
  this.menWord = undefined;

  this.initialize = function()
  {
    //define word bindings
    this.manWord = new Word('man', promptAudio.man);
    this.menWord = new Word('men', promptAudio.men);

    //populate words array
    this.arrayOfWords.push(this.manWord);
    this.arrayOfWords.push(this.menWord);
  }

  this.currentAnswer = undefined;

  this.defineCurrentAnswer = function()
  {
    let randomAnswerIndex = getRandomIntInclusive(0,this.arrayOfWords.length - 1);
    this.currentAnswer = this.arrayOfWords[randomAnswerIndex];
    this.currentAnswer.audioPrompt.play();
  }
}
vacuumGameClass.prototype = new GameClass();
function vacuumGameClass()
{
  this.name = 'vacuum game';
  this.background = undefined;
  this.backgroundMusic = undefined;
  this.playerCharacter = undefined;

  this.defineAndInitializePlayerCharacter = function()
  {
    this.background = new VacuumBackground();
    this.playerCharacter = new Vacuum();
  }

  this.drawTransitionText = function()
  {
    customFontFillText(['Suck up the answers', symbolExclamationPointImage], 60,30, 25,50);
    customFontFillText([upArrowImage, ' ', symbolEqualsImage, ' Move up'], 30,15, 210,200);
    customFontFillText([rightArrowImage, ' ', symbolEqualsImage, ' Move right'], 30,15, 350,350);
    customFontFillText([downArrowImage, ' ', symbolEqualsImage, ' Move down'], 30,15, 200,500);
    customFontFillText([leftArrowImage, ' ', symbolEqualsImage, ' Move left'], 30,15, 50,350);
  }

  this.phonicClassManager = undefined;

  this.startGameSpecialCode = function()
  {
    gameClassManager.currentGame.phonicClassManager.currentCorrectPhonic.promptAudio.sfx.play();
  }

  this.textAnswerFontSize = '30';
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';
	this.titleScreenData =
  [
	  {name: "Vacuum", fontSize: 25, spacing: 12, x: 327, y: 580}
	];

  this.initialize = function()
  {
    this.defineAndInitializePlayerCharacter();
    this.phonicClassManager = new PhonicClassManager();
    this.phonicClassManager.initializeArraysOfPhonics();
    this.phonicClassManager.setCurrentLanguageArray(languageSelectionScreen.languageNum);
    this.phonicClassManager.populateTemporaryArrayOfPhonics();
    this.phonicClassManager.chooseCorrectPhonic();
    this.defineXAndYCoordinatesForLetters();
  }

  this.draw = function()
  {
    this.background.draw();
    this.playerCharacter.draw();
    this.drawLetters();
  }

  this.update = function()
  {
    this.playerCharacter.move();
    this.handleCollisions();
  }

  this.handleLeftArrowDown = function()
	{
		inputManager.leftArrowIsBeingHeld = true;
	}

	this.handleUpArrowDown = function()
	{
		inputManager.upArrowIsBeingHeld = true;
	}

	this.handleRightArrowDown = function()
	{
		inputManager.rightArrowIsBeingHeld = true;
	}

	this.handleDownArrowDown = function()
	{
		inputManager.downArrowIsBeingHeld = true;
	}

	this.handleLeftArrowUp = function()
	{
		inputManager.leftArrowIsBeingHeld = false;
	}

	this.handleUpArrowUp = function()
	{
		inputManager.upArrowIsBeingHeld = false;
	}

	this.handleRightArrowUp = function()
	{
		inputManager.rightArrowIsBeingHeld = false;
	}

	this.handleDownArrowUp = function()
	{
		inputManager.downArrowIsBeingHeld = false;
	}

  this.defineXAndYCoordinatesForLetters = function()
  {
    for (let temporaryArrayOfPhonicsIndex = 0; temporaryArrayOfPhonicsIndex < this.phonicClassManager.temporaryArrayOfPhonics.length; temporaryArrayOfPhonicsIndex++)
    {
      let currentPhonic = this.phonicClassManager.temporaryArrayOfPhonics[temporaryArrayOfPhonicsIndex];
      currentPhonic.x = getRandomArbitrary(100,gameCanvas.width - 100);
      currentPhonic.y = getRandomArbitrary(100,gameCanvas.height - 100);

      while (currentPhonic.x + 30 > this.playerCharacter.x && currentPhonic.x < this.playerCharacter.x + this.playerCharacter.width &&
          currentPhonic.y + 30 > this.playerCharacter.y && currentPhonic.y < this.playerCharacter.y + this.playerCharacter.height)
          {
            currentPhonic.x = getRandomArbitrary(100,gameCanvas.width - 100);
            currentPhonic.y = getRandomArbitrary(100,gameCanvas.height - 100);
          }
    }
  }

  this.drawLetters = function()
  {
    for (let temporaryArrayOfPhonicsIndex = 0; temporaryArrayOfPhonicsIndex < this.phonicClassManager.temporaryArrayOfPhonics.length; temporaryArrayOfPhonicsIndex++)
      {
        gameCanvasContext.fillStyle = 'black';
        gameCanvasContext.font = '30px Helvetica';
        gameCanvasContext.fillText
        (
          this.phonicClassManager.temporaryArrayOfPhonics[temporaryArrayOfPhonicsIndex].textAssociation,
          this.phonicClassManager.temporaryArrayOfPhonics[temporaryArrayOfPhonicsIndex].x,
          this.phonicClassManager.temporaryArrayOfPhonics[temporaryArrayOfPhonicsIndex].y
        )
      }
  }

  this.handleCollisions = function()
  {
    for (let temporaryArrayOfPhonicsIndex = 0; temporaryArrayOfPhonicsIndex < this.phonicClassManager.temporaryArrayOfPhonics.length; temporaryArrayOfPhonicsIndex++)
    {
      let currentPhonic = this.phonicClassManager.temporaryArrayOfPhonics[temporaryArrayOfPhonicsIndex];
      if (currentPhonic.x + 30 > this.playerCharacter.x && currentPhonic.x < this.playerCharacter.x + this.playerCharacter.width &&
          currentPhonic.y + 30 > this.playerCharacter.y && currentPhonic.y < this.playerCharacter.y + this.playerCharacter.height)
          {
            if (currentPhonic.isTheCorrectChoice === true)
            {
              genAudio.positive.play();
            }
            else if (currentPhonic.isTheCorrectChoice === false)
            {
              genAudio.negative.play();
            }
            this.phonicClassManager.temporaryArrayOfPhonics = [];
            this.phonicClassManager.populateTemporaryArrayOfPhonics();
            this.phonicClassManager.chooseCorrectPhonic();
            this.defineXAndYCoordinatesForLetters();
            gameClassManager.currentGame.phonicClassManager.currentCorrectPhonic.promptAudio.sfx.play();
          }
    }
  }
}

const vacuumGame = new vacuumGameClass();

function VacuumBackground()
{
  this.image = 'images\\Backgrounds\\vacuumBackground.png';

  this.draw = function()
  {
    drawFromSheet(this.image, 0,0, gameCanvas.width,gameCanvas.height);
    //gameCanvasContext.drawImage(this.image, 0,0, gameCanvas.width,gameCanvas.height);
  }
}
function Vacuum()
{
  this.image = 'images\\sprites\\Vacuum\\vacuum.png';
  this.width = gameCanvas.width*0.15;
  this.height = gameCanvas.height*0.15;

  this.x = gameCanvas.width/2 - this.width/2;
  this.y = gameCanvas.height/2 - this.height/2;

  this.velocity = 5;

  this.draw = function()
  {
    drawFromSheet(this.image, this.x,this.y, this.width,this.height);
    //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
  }

  this.move = function()
  {
    if (inputManager.upArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.y -= this.velocity;
		}
		if (inputManager.rightArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.x += this.velocity;
		}
		if (inputManager.downArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.y += this.velocity;
		}
		if (inputManager.leftArrowIsBeingHeld)
		{
			gameClassManager.currentGame.playerCharacter.x -= this.velocity;
		}
  }
}
function FeedGrabberPlayer()
{

  this.armlessBodyImage = "images\\sprites\\air grab\\AirGuy.png";
  this.rightArmImage = "images\\sprites\\air grab\\rightArmm.png";
  this.leftArmImage = "images\\sprites\\air grab\\leftArmm.png";
  this.leftPac = "images\\sprites\\feedGame\\leftP.png";
  this.rightPac = "images\\sprites\\feedGame\\rightP.png";

  this.leftArmX = undefined;
  this.leftArmY = undefined;
  this.leftArmWidth = gameCanvas.width/20;
  this.leftArmHeight = gameCanvas.height/5;
  this.leftArmAngle = 90;
  this.leftArmPivotX = undefined;
  this.leftArmPivotY = undefined;


  this.rightArmX = undefined;
  this.rightArmY = undefined;
  this.rightArmAngle = 90;
  this.rightArmWidth = gameCanvas.width/20;
  this.rightArmHeight = gameCanvas.height/5;
  this.rightArmPivotX = undefined;
  this.rightArmPivotY = undefined;


  this.bodyWidth = gameCanvas.width/5;
  this.bodyHeight = gameCanvas.width/3;

  this.shoulderY = 545;

  this.collisionsWithAnswersManager = new CollisionsWithAnswersManager();

  this.initialize = function()
  {
    this.leftArmX = gameCanvas.width/2 - this.bodyWidth/2;
    this.leftArmY = this.shoulderY - this.leftArmHeight;
    this.rightArmX = gameCanvas.width/2 + this.bodyWidth/2 - this.rightArmWidth;
    this.rightArmY = this.shoulderY - this.rightArmHeight;

    this.leftArmPivotX = this.leftArmX + this.leftArmWidth/2;
    this.leftArmPivotY = this.shoulderY;
    this.rightArmPivotX = this.rightArmX + this.rightArmWidth/2;
    this.rightArmPivotY = this.shoulderY;
  }

  this.draw = function()
  {
    drawFromSheet(this.leftPac, 50,
      gameCanvas.height,
      50,50);

    drawFromSheet(this.rightPac, gameCanvas.width - 50,
      gameCanvas.height,
      50,50);

    drawFromSheet(this.armlessBodyImage, gameCanvas.width/2 - this.bodyWidth/2,
                                gameCanvas.height - this.bodyHeight - gameCanvas.width*0.0225,
                                this.bodyWidth,this.bodyHeight);
    // gameCanvasContext.drawImage(this.armlessBodyImage, gameCanvas.width/2 - this.bodyWidth/2,
    //                             gameCanvas.height - this.bodyHeight - gameCanvas.width*0.0225,
    //                             this.bodyWidth,this.bodyHeight);
    this.calculateLeftArmAngle();
    drawFromSheet(this.leftArmImage, this.leftArmX,this.leftArmY, this.leftArmWidth,this.leftArmHeight, undefined, this.leftArmAngle,this.leftArmPivotX,this.leftArmPivotY);
    // gameCanvasContext.save();//save context so we can do weird stuff and go back to normal drawing afterwards
    // gameCanvasContext.translate(this.leftArmPivotX,this.leftArmPivotY);//place imaginary hand at pivot point
    // gameCanvasContext.rotate(this.leftArmAngle + Math.PI/2);//rotate with hand at pivot based in radians
    // gameCanvasContext.translate(-this.leftArmPivotX,-this.leftArmPivotY);//return hand to 0,0 of canvas
    // gameCanvasContext.drawImage(this.leftArmImage, this.leftArmX,this.leftArmY, this.leftArmWidth,this.leftArmHeight);//normal draw code affected by rotation
    // gameCanvasContext.restore();//erase any errant abnormal draw code

    this.calculateRightArmAngle();
    drawFromSheet(this.rightArmImage, this.rightArmX,this.rightArmY, this.rightArmWidth,this.rightArmHeight, undefined, this.rightArmAngle,this.rightArmPivotX,this.rightArmPivotY);
    // gameCanvasContext.save();//save context so we can do weird stuff and go back to normal drawing afterwards
    // gameCanvasContext.translate(this.rightArmPivotX,this.rightArmPivotY);//place imaginary hand at pivot point
    // gameCanvasContext.rotate(this.rightArmAngle + Math.PI/2);//rotate with hand at pivot based in radians
    // gameCanvasContext.translate(-this.rightArmPivotX,-this.rightArmPivotY);//return hand to 0,0 of canvas
    // gameCanvasContext.drawImage(this.rightArmImage, this.rightArmX,this.rightArmY, this.rightArmWidth,this.rightArmHeight);//normal draw code affected by rotation
    // gameCanvasContext.restore();//erase any errant abnormal draw code
  }

  this.calculateLeftArmAngle = function()
  {
      this.leftArmAngle = Math.atan2(inputManager.mouseCoordinates.y - this.shoulderY,
                                     inputManager.mouseCoordinates.x - this.leftArmPivotX);
  }

  this.calculateRightArmAngle = function()
  {
      this.rightArmAngle = Math.atan2(inputManager.mouseCoordinates.y - this.shoulderY,
                                      inputManager.mouseCoordinates.x - this.rightArmPivotX);
  }

  this.handleClick = function()
  {
    this.leftArmY = inputManager.mouseCoordinates.y;
    this.rightArmY = inputManager.mouseCoordinates.y;
    this.leftArmPythagoreanALength = Math.abs(this.shoulderY - this.leftArmY);
    this.rightArmPythagoreanALength = Math.abs(this.shoulderY - this.rightArmY);
    this.leftArmPythagoreanBLength = Math.abs(inputManager.mouseCoordinates.x - this.leftArmPivotX);
    this.rightArmPythagoreanBLength = Math.abs(inputManager.mouseCoordinates.x - this.rightArmPivotX);
    this.leftArmHeight = Math.sqrt( (this.leftArmPythagoreanALength*this.leftArmPythagoreanALength) +
                                    (this.leftArmPythagoreanBLength*this.leftArmPythagoreanBLength) );

    this.rightArmHeight = Math.sqrt( (this.rightArmPythagoreanALength*this.rightArmPythagoreanALength) +
                                     (this.rightArmPythagoreanBLength*this.rightArmPythagoreanBLength) );
    this.leftArmY = this.shoulderY - this.leftArmHeight;
    this.rightArmY = this.shoulderY - this.rightArmHeight;
    setTimeout(resetArmSettings, 500);

    this.handleCollisionsWithAnswers(promptsAndAnswersManager.correctTargetPromptAndAnswerPairing,
                                     promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing);
  }

  this.handleCollisionsWithAnswers = function(correctAnswer,incorrectAnswer)
  {
    let mouseX = inputManager.mouseCoordinates.x;
    let mouseY = inputManager.mouseCoordinates.y;
    let correctAnswerX = correctAnswer.xCoordinate;
    let correctAnswerY = correctAnswer.yCoordinate;
    let incorrectAnswerX = incorrectAnswer.xCoordinate;
    let incorrectAnswerY = incorrectAnswer.yCoordinate;
    let correctAnswerWidth = undefined;
    let incorrectAnswerWidth = undefined
    let correctAnswerHeight = undefined;
    let incorrectAnswerHeight = undefined;
    if (promptsAndAnswersManager.currentAnswerDataType === 'string')
    {
      correctAnswerWidth = promptsAndAnswersManager.getCorrectAnswerWidthFromFontStyle(
          gameClassManager.currentGame.textAnswerFontStyle
      );
      incorrectAnswerWidth = promptsAndAnswersManager.getIncorrectAnswerWidthFromFontStyle(
          gameClassManager.currentGame.textAnswerFontStyle
      );

      correctAnswerHeight = 30;
      incorrectAnswerHeight = 30;
      correctAnswerY -= correctAnswerHeight;
      incorrectAnswerY -= correctAnswerHeight;
    }
    else if (promptsAndAnswersManager.currentAnswerDataType === 'IMG')
    {
      correctAnswerWidth = gameClassManager.currentGame.imageAnswerWidth;
      correctAnswerHeight = gameClassManager.currentGame.imageAnswerHeight;
      incorrectAnswerWidth = gameClassManager.currentGame.imageAnswerWidth;
      incorrectAnswerHeight = gameClassManager.currentGame.imageAnswerHeight;
    }
    else if (promptsAndAnswersManager.currentAnswerDataType === 'AUDIO')
    {
      correctAnswerWidth = gameClassManager.currentGame.audioImageAnswerWidth;
      correctAnswerHeight = gameClassManager.currentGame.audioImageAnswerHeight;
      incorrectAnswerWidth = gameClassManager.currentGame.audioImageAnswerWidth;
      incorrectAnswerHeight = gameClassManager.currentGame.audioImageAnswerHeight;
    }


    if (mouseX >= correctAnswerX && mouseX <= correctAnswerX + correctAnswerWidth &&
        mouseY >= correctAnswerY && mouseY <= correctAnswerY + correctAnswerHeight)
        {
          this.collisionsWithAnswersManager.processCollisionWithCorrectAnswer();
          this.collisionsWithAnswersManager.resetAnswers();
          gameClassManager.currentGame.initializeAnswerSettings();
          gameAudio.paperCrumple.play();
        }
    else if (mouseX >= incorrectAnswerX && mouseX <= incorrectAnswerX + incorrectAnswerWidth &&
        mouseY >= incorrectAnswerY && mouseY <= incorrectAnswerY + incorrectAnswerHeight)
        {
          this.collisionsWithAnswersManager.processCollisionWithIncorrectAnswer();
          this.collisionsWithAnswersManager.resetAnswers();
          gameClassManager.currentGame.initializeAnswerSettings();
          gameAudio.paperCrumple.play();
        }

      gameAudio.clap.play();

  }
}

function resetArmSettings()
{
  let airGuy = gameClassManager.currentGame.playerCharacter;
  airGuy.leftArmHeight = gameCanvas.height/5;
  airGuy.rightArmHeight = gameCanvas.height/5;
  airGuy.leftArmY = airGuy.shoulderY - airGuy.leftArmHeight;
  airGuy.rightArmY = airGuy.shoulderY - airGuy.rightArmHeight;
  airGuy.leftArmX = gameCanvas.width/2 - airGuy.bodyWidth/2;
  airGuy.rightArmX = gameCanvas.width/2 + airGuy.bodyWidth/2 - airGuy.rightArmWidth;
}
function feedCollisionsManager() {
    CollisionsWithAnswersManager.call(this);

    this.processCollisionWithAnswer = function (){
        if (nextGame === SINGLE_PLAYER_RANDOM ||
            nextGame === TWO_PLAYER_RANDOM)
        {
            cycleCount++;
        }
        calculateAccuracy();
    }

    this.processCollisionWithCorrectAnswer = function(){
        CollisionsWithAnswersManager.prototype.processCollisionWithCorrectAnswer();
        gameClassManager.currentGame.correctAnswersYSpeed *= -1;
        let randomImageIndex = getRandomIntInclusive(0, gameClassManager.currentGame.arrayOfUpsideDownAnswerHolders.length - 1);

        promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.answerHolder.image =
        gameClassManager.currentGame.arrayOfUpsideDownAnswerHolders[randomImageIndex].image;

        let arrayOfGemImages = gameClassManager.currentGame.playerCharacter.arrayOfGemImages;
        let randomIndexForArrayOfGemImages = getRandomIntInclusive(0,arrayOfGemImages.length - 1);
        let randomGemImage = arrayOfGemImages[randomIndexForArrayOfGemImages];
        let arrayOfGems = gameClassManager.currentGame.playerCharacter.arrayOfGems;
        let paddleX = gameClassManager.currentGame.playerCharacter.x;
        let gemBaseWidth = 10;
        let paddleWidth = gameClassManager.currentGame.playerCharacter.width;
        let paddleRightLimitXForGemToFitOnPaddle = paddleX + paddleWidth - gemBaseWidth;
        let randomGemX = getRandomArbitrary(paddleX,paddleRightLimitXForGemToFitOnPaddle);
        let gemY = gameClassManager.currentGame.playerCharacter.y;
        let gem = new Gem(randomGemImage, randomGemX,gemY);
        arrayOfGems.push(gem);
    }

    this.processCollisionWithIncorrectAnswer = function(){
        CollisionsWithAnswersManager.prototype.processCollisionWithIncorrectAnswer();
        gameClassManager.currentGame.incorrectAnswersYSpeed *= -1;
        let randomImageIndex = getRandomIntInclusive(0, gameClassManager.currentGame.arrayOfUpsideDownAnswerHolders.length - 1);
        promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.answerHolder.image =
        gameClassManager.currentGame.arrayOfUpsideDownAnswerHolders[randomImageIndex].image;
    }
}

feedCollisionsManager.prototype = new CollisionsWithAnswersManager();
feedCollisionsManager.prototype.constructor = feedCollisionsManager;
feedGameClass.prototype = new GameClass();

function feedGameClass()
{
  this.name = 'feedGame';

  this.FRAME_RATE = 1000/30;

  this.textAnswerFontSize = 30;
  this.textAnswerFontStyle = this.textAnswerFontSize + 'px Helvetica';

  this.LETTER_COLOR = 'black';

  this.drawTransitionText = function()
  {
    customFontFillText(['Feed the cakes', symbolExclamationPointImage], 55,30, 75,50);
    customFontFillText(['Move the Mouse', ' ', symbolEqualsImage, ' Move the arms'], 40,15, gameCanvas.width*0.125,250);
    customFontFillText(['Mouse Click', ' ', symbolEqualsImage, ' Reach and Grab'], 40,15, gameCanvas.width*0.125,450);
  }

  this.imageAnswerWidth = undefined;
  this.imageAnswerHeight = undefined;
  this.imageAnswerHolderWidth = undefined;
  this.imageAnswerHolderHeight = undefined;

  this.audioImageAnswerWidth = undefined;
  this.audioImageAnswerHeight = undefined;
  this.audioImageAnswerHolderWidth = undefined;
  this.audioImageAnswerHolderHeight = undefined;

  this.correctTextAnswerHolderWidth = undefined;
  this.incorrectTextAnswerHolderWidth = undefined;

  this.answerHolderImage = undefined;
  this.arrayOfAnswerHolders = [];
  this.assignAnswerHolder = function()
  {
      let randomNumber = getRandomIntInclusive(0, this.arrayOfAnswerHolders.length - 1);
      return this.arrayOfAnswerHolders[randomNumber];
  }

  this.titleScreenData = [
	  {name: "Feed", fontSize: 27, spacing: 15, x: 122, y: 480},
	  {name: "US", fontSize: 27, spacing: 15, x: 126, y: 495}
	];

  this.playerCharacter = undefined;
  this.defineAndInitializePlayerCharacter = function()
  {
    this.playerCharacter = new FeedGrabberPlayer();
    this.playerCharacter.initialize();
    this.collidingObject = this.playerCharacter;
  }

  this.backgroundMusic = new MusicTrack('audio/backgroundTracks/200412.mp3', 121.62);

  this.background = undefined;

  this.pregameSpecialCode = function()
  {
    gameAudio = {};
    gameAudio.clap = new sfxOneShot('audio/clap1.mp3');
    gameAudio.paperCrumple = new sfxOneShot('audio/V/feed.mp3');
  };

  this.superInitialize = function()
  {
    this.imageAnswerWidth = gameCanvas.width/8;
    this.imageAnswerHeight = gameCanvas.height/9;
    this.imageAnswerHolderWidth = gameCanvas.width/4;
    this.imageAnswerHolderHeight = gameCanvas.height/5;

    this.audioImageAnswerWidth = gameCanvas.width/6;
    this.audioImageAnswerHeight = gameCanvas.height/7;
    this.audioImageAnswerHolderWidth = gameCanvas.width/5;
    this.audioImageAnswerHolderHeight = gameCanvas.height/6;

    this.correctTextAnswerHolderWidth = undefined;
    this.incorrectTextAnswerHolderWidth = undefined;

    this.foodAnswerHolder1 = new FoodAnswerHolder("images\\sprites\\feedGame\\cake1.png");
    this.foodAnswerHolder2 = new FoodAnswerHolder("images\\sprites\\feedGame\\cake2.png");
    this.foodAnswerHolder3 = new FoodAnswerHolder("images\\sprites\\feedGame\\cake3.png");
    this.foodAnswerHolder4 = new FoodAnswerHolder("images\\sprites\\feedGame\\cake4.png");
    this.arrayOfAnswerHolders.push(this.foodAnswerHolder1);
    this.arrayOfAnswerHolders.push(this.foodAnswerHolder2);
    this.arrayOfAnswerHolders.push(this.foodAnswerHolder3);
    this.arrayOfAnswerHolders.push(this.foodAnswerHolder4);

    this.initializeAnswerSettings();
    drawAnswersManager.initialize();
    this.background = new feedBackground();
    //this.collisionsWithAnswersManager = new feedCollisionsManager();
    this.playerCharacter.collisionsWithAnswersManager.initialize(gameClassManager.currentGame);
  }

  this.draw = function()
  {
    this.background.draw();
    this.playerCharacter.draw();
    drawAnswersManager.draw();


    promptersManager.drawPromptsWhenAppropriate();
  }

  this.update = function()
  {
    this.moveAnswers();
  }

  this.handleClick = function()
  {
    this.playerCharacter.handleClick();
  }

  this.moveAnswers = function()
  {
    let correctAnswer = promptsAndAnswersManager.correctTargetPromptAndAnswerPairing;
    let incorrectAnswer = promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing;



    correctAnswer.radians += correctAnswer.circlePathVelocity;
    correctAnswer.xCoordinate = correctAnswer.xCoordinate + (Math.cos(correctAnswer.radians) * 10) + correctAnswer.xSpeed;
    correctAnswer.yCoordinate = correctAnswer.yCoordinate + (Math.sin(correctAnswer.radians) * 10) + correctAnswer.ySpeed;

    incorrectAnswer.radians += incorrectAnswer.circlePathVelocity;
    incorrectAnswer.xCoordinate = incorrectAnswer.xCoordinate + (Math.cos(incorrectAnswer.radians) * 10) + incorrectAnswer.xSpeed;
    incorrectAnswer.yCoordinate = incorrectAnswer.yCoordinate + (Math.sin(incorrectAnswer.radians) * 10) + incorrectAnswer.ySpeed;
    this.checkAnswerWallCollisions();
  }

  this.updateAnswerPositions = function()
  {
    let correctAnswer = promptsAndAnswersManager.correctTargetPromptAndAnswerPairing;
    let incorrectAnswer = promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing;
    //move points over time

  }

  this.checkAnswerWallCollisions = function()
  {
    let correctAnswer = promptsAndAnswersManager.correctTargetPromptAndAnswerPairing;
    let incorrectAnswer = promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing;

    if (correctAnswer.xCoordinate + 50 > 500 || correctAnswer.xCoordinate  - 50 < 100)
    {
      correctAnswer.xSpeed *= -1;
    }
    if (correctAnswer.yCoordinate + 50 > 600 || correctAnswer.yCoordinate - 50 < 150)
    {
      correctAnswer.ySpeed *= -1;
    }

    if (incorrectAnswer.xCoordinate + 50 > 500 || incorrectAnswer.xCoordinate  - 50 < 100)
    {

      incorrectAnswer.xSpeed *= -1;
    }
    if (incorrectAnswer.yCoordinate + 50 > 600 || incorrectAnswer.yCoordinate - 50 < 150)
    {
      incorrectAnswer.ySpeed *= -1;
    }
  }

  this.initializeAnswerSettings = function()
  {
    promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.xSpeed = getRandomArbitrary(-3,3);
    promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.ySpeed = getRandomArbitrary(-3,3);
    promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.xSpeed = getRandomArbitrary(-3,3);
    promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.ySpeed = getRandomArbitrary(-3,3);
  }
}

const feedGame = new feedGameClass();

function FoodAnswerHolder(image)
{
  this.image = image;
}


// function feedGrabPlayer()
//   {
//     this.width = gameCanvas.width*0.2;
//     this.height = gameCanvas.height*0.1;
//     this.x = gameCanvas.width/2 - this.width/2;
//     this.y = gameCanvas.height*0.8;
//     this.image = "images\\sprites\\air grab\\AirGuy.png";

//     this.draw = function()
//     {
//       drawFromSheet(this.image, this.x,this.y, this.width,this.height);
//       //gameCanvasContext.drawImage(this.image, this.x,this.y, this.width,this.height);
//     }
//   }
function feedBackground()
{

  this.feedBackgroundImage = 'images\\Backgrounds\\feed.png';
  this.draw = function()
  {
    drawFromSheet(this.feedBackgroundImage, 0,0, gameCanvas.width,gameCanvas.height);
    //gameCanvasContext.drawImage(this.feedBackgroundImage, 0,0, gameCanvas.width,gameCanvas.height);
  }

  this.handleAnswersOffScreen = function()
  {
    this.handleAnswersOffBottomOfScreen();
    this.handleAnswersOffTopOfScreen();
  }

  this.correctAnswerOffScreen = false;
  this.incorrectAnswerOffScreen = false;

  this.handleAnswersOffBottomOfScreen = function()
  {
    if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate > gameCanvas.height)
    {
      // amountIncorrect++;
      this.correctAnswerOffScreen = true;
      this.checkIfBothAnswersAreOffScreenAndResetIfSo();
    }
    if (promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate > gameCanvas.height)
    {
      // amountCorrect++;
      this.incorrectAnswerOffScreen = true;
      this.checkIfBothAnswersAreOffScreenAndResetIfSo();
    }
  }

  this.handleAnswersOffTopOfScreen = function()
  {
    if (promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.yCoordinate //-
        /*promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.height*/ < 0)
    {
      // amountCorrect++;
      this.correctAnswerOffScreen = true;
      this.checkIfBothAnswersAreOffScreenAndResetIfSo();
    }
    if (promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.yCoordinate //-
        /*promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.height*/ < 0)
    {
      // amountIncorrect++;
      this.incorrectAnswerOffScreen = true;
      this.checkIfBothAnswersAreOffScreenAndResetIfSo();
    }
  }

  this.checkIfBothAnswersAreOffScreenAndResetIfSo = function()
  {
    if (this.correctAnswerOffScreen && this.incorrectAnswerOffScreen)
    {
      this.correctAnswerOffScreen = false;
      this.incorrectAnswerOffScreen = false;

      gameClassManager.currentGame.collisionsWithAnswersManager.resetAnswers();
      gameClassManager.currentGame.correctAnswersYSpeed = 4;
      gameClassManager.currentGame.incorrectAnswersYSpeed = 4;
      promptsAndAnswersManager.correctTargetPromptAndAnswerPairing.answerHolder = gameClassManager.currentGame.assignAnswerHolder();
      promptsAndAnswersManager.incorrectTargetPromptAndAnswerPairing.answerHolder = gameClassManager.currentGame.assignAnswerHolder();
    }
  }
}
var gameList = [snakeGame,birdGame,laneGame,jumperGame,finderGame,passOrBlockGame,
                cVcShooterGame,spaceShooterGame,runnerGame,pinataGame,airGrabGame,frogRiverGame,
                mazeGame,memoryGame,flowerGame,penaltyGame,balloonPopGame,helloWorldGame,
                dodgeballGame,feedGame,nighttimeGame,frogCrateGame,flyingBeeGame,fishingGame,
                eggCatchGame,bubbleWrapGame,whackAnAnswerGame,vacuumGame,spellingBeesGame,helloWorld2Game];

var currentlyLoadedGame = -1;
var SINGLE_PLAYER_ENDLESS = 0;
var SINGLE_PLAYER_RANDOM = 1;
var TWO_PLAYER_RANDOM = 2;
var nextGame = SINGLE_PLAYER_ENDLESS;

var CYCLE_LIMIT_FOR_RANDOM_GAME_RELOAD = 3;
var cycleCount = 0;


// switch (nextGame)
// {
//   case SINGLE_PLAYER_ENDLESS:
//     break;
//   case SINGLE_PLAYER_RANDOM:
//     break;
//   case TWO_PLAYER_RANDOM:
//     break;
// }

function loadGameNum(gameListIndex)
{
  if(gameList[gameListIndex] == null) {
    //console.log("gameToLoad is null, bailing");
    return false;
  }
  gameClassManager.loadCurrentGame(gameList[gameListIndex]);
  gameClassManager.initializeCurrentGame();
  return true;
}

function loadRandomGame()
{
  // Choose a random game from the gameList that is not null
  do {
    gameListIndex = Math.floor(Math.random()*30);
  } while (gameList[gameListIndex] == null)

  // Prepare game to paly
  gameClassManager.loadCurrentGame(gameList[gameListIndex]);
  // Initialize the game
  gameClassManager.initializeCurrentGame();
}

function reloadLastGame()
{
  gameClassManager.loadCurrentGame(gameClassManager.currentGame);
}
